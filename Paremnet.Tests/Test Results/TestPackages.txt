TEST TestPackages


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo") (package-get)
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
ParseNext ==>  (package-get)
Parsed:  (core:package-get)
Compiled:
	CODE BLOCK ; () => ((package-get))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	package-get
	2	JMP_CLOSURE	0

Running...
Executing:  
	CODE BLOCK ; () => ((package-get))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	package-get
	2	JMP_CLOSURE	0

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	package-get
                                      1: [ [Closure/core:package-get] ]
[ 1]   2 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : CALL_PRIMOP	"package-get"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo") (package-import "core") (car '(1 2))
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
ParseNext ==>  (package-import "core")
Parsed:  (core:package-import "core")
Compiled:
	CODE BLOCK ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "core" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (car (quote (1 2)))
Parsed:  (core:car (quote (1 2)))
Compiled:
	CODE BLOCK ; () => ((car (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	car
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((car (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	car
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : GLOBAL_GET	car
                                      2: [ (1 2) [Closure/core:car] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set nil) (set! x 5) (package-set "foo") (package-import "core") (set! x (+ 1 5)) (package-set nil) x
ParseNext ==>  (package-set nil)
Parsed:  (core:package-set foo:nil)
Compiled:
	CODE BLOCK ; () => ((package-set nil))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	nil
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set nil))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	nil
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	nil
                                      1: [ () ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ () [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (set! x 5)
Parsed:  (set! x 5)
Compiled:
	CODE BLOCK ; () => ((set! x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((set! x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 5 ]
[ 1]   3 : RETURN_VAL
test: got "5"  - expected "5"
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
ParseNext ==>  (package-import "core")
Parsed:  (core:package-import "core")
Compiled:
	CODE BLOCK ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "core" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (set! x (+ 1 5))
Parsed:  (set! foo:x (core:+ 1 5))
Compiled:
	CODE BLOCK ; () => ((set! x (+ 1 5)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	5
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	GLOBAL_SET	x
	8	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((set! x (+ 1 5)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	5
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	GLOBAL_SET	x
	8	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [R0/6] 1 ]
[ 2]   3 : PUSH_CONST	5
                                      3: [ [R0/6] 1 5 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [R0/6] 1 5 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 1 5 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [R0/6] 6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 6 ]
[ 1]   6 : LABEL	"R0"
                                      1: [ 6 ]
[ 1]   7 : GLOBAL_SET	x
                                      1: [ 6 ]
[ 1]   8 : RETURN_VAL
test: got "6"  - expected "6"
ParseNext ==>  (package-set nil)
Parsed:  (core:package-set foo:nil)
Compiled:
	CODE BLOCK ; () => ((package-set nil))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	nil
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set nil))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	nil
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	nil
                                      1: [ () ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ () [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  x
Parsed:  x
Compiled:
	CODE BLOCK ; () => (x)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => (x)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	x
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo") (package-import "core") (set! first car) (first '(1 2))
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
ParseNext ==>  (package-import "core")
Parsed:  (core:package-import "core")
Compiled:
	CODE BLOCK ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "core" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (set! first car)
Parsed:  (set! foo:first core:car)
Compiled:
	CODE BLOCK ; () => ((set! first car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((set! first car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	car
                                      1: [ [Closure/core:car] ]
[ 1]   2 : GLOBAL_SET	first
                                      1: [ [Closure/core:car] ]
[ 1]   3 : RETURN_VAL
test: got "[Closure/core:car]"  - expected "[Closure/core:car]"
ParseNext ==>  (first (quote (1 2)))
Parsed:  (foo:first (quote (1 2)))
Compiled:
	CODE BLOCK ; () => ((first (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	first
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((first (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	first
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : GLOBAL_GET	first
                                      2: [ (1 2) [Closure/core:car] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "a") (package-export '(afoo)) (set! afoo 1) (package-set "b") (package-import "a") afoo
ParseNext ==>  (package-set "a")
Parsed:  (core:package-set "a")
Compiled:
	CODE BLOCK ; () => ((package-set "a"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set "a"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"a"
                                      1: [ "a" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "a" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "a" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "a" ]
[ 1]   1 : RETURN_VAL
test: got ""a""  - expected ""a""
ParseNext ==>  (package-export (quote (afoo)))
Parsed:  (core:package-export (quote (a:afoo)))
Compiled:
	CODE BLOCK ; () => ((package-export (quote (afoo))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(afoo)
	2	GLOBAL_GET	package-export
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-export (quote (afoo))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(afoo)
	2	GLOBAL_GET	package-export
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(afoo)
                                      1: [ (afoo) ]
[ 1]   2 : GLOBAL_GET	package-export
                                      2: [ (afoo) [Closure/core:package-export] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (afoo) ]
[ 1]   0 : CALL_PRIMOP	"package-export"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (set! afoo 1)
Parsed:  (set! a:afoo 1)
Compiled:
	CODE BLOCK ; () => ((set! afoo 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	GLOBAL_SET	afoo
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((set! afoo 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	GLOBAL_SET	afoo
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : GLOBAL_SET	afoo
                                      1: [ 1 ]
[ 1]   3 : RETURN_VAL
test: got "1"  - expected "1"
ParseNext ==>  (package-set "b")
Parsed:  (core:package-set "b")
Compiled:
	CODE BLOCK ; () => ((package-set "b"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"b"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set "b"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"b"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"b"
                                      1: [ "b" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "b" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "b" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "b" ]
[ 1]   1 : RETURN_VAL
test: got ""b""  - expected ""b""
ParseNext ==>  (package-import "a")
Parsed:  (core:package-import "a")
Compiled:
	CODE BLOCK ; () => ((package-import "a"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-import "a"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"a"
                                      1: [ "a" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "a" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "a" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  afoo
Parsed:  a:afoo
Compiled:
	CODE BLOCK ; () => (afoo)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	afoo
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => (afoo)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	afoo
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	afoo
                                      1: [ 1 ]
[ 1]   2 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo")
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (+ (+ 1 2) 3) 4)
ParseNext ==>  (begin (+ (+ 1 2) 3) 4)
Parsed:  (begin (core:+ (core:+ 1 2) 3) 4)
Compiled:
	CODE BLOCK ; () => ((begin (+ (+ 1 2) 3) 4))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	11
	2	SAVE_RETURN	"R1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	+
	6	JMP_CLOSURE	2
7	LABEL	"R1"
	8	PUSH_CONST	3
	9	GLOBAL_GET	+
	10	JMP_CLOSURE	2
11	LABEL	"R0"
	12	STACK_POP
	13	PUSH_CONST	4
	14	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((begin (+ (+ 1 2) 3) 4))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	11
	2	SAVE_RETURN	"R1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	+
	6	JMP_CLOSURE	2
7	LABEL	"R1"
	8	PUSH_CONST	3
	9	GLOBAL_GET	+
	10	JMP_CLOSURE	2
11	LABEL	"R0"
	12	STACK_POP
	13	PUSH_CONST	4
	14	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	11
                                      1: [ [R0/11] ]
[ 1]   2 : SAVE_RETURN	"R1"	7
                                      2: [ [R0/11] [R1/7] ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [R0/11] [R1/7] 1 ]
[ 3]   4 : PUSH_CONST	2
                                      4: [ [R0/11] [R1/7] 1 2 ]
[ 4]   5 : GLOBAL_GET	+
                                      5: [ [R0/11] [R1/7] 1 2 [Closure/core:+] ]
[ 5]   6 : JMP_CLOSURE	2
                                      4: [ [R0/11] [R1/7] 1 2 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [R0/11] [R1/7] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/11] 3 ]
[ 2]   7 : LABEL	"R1"
                                      2: [ [R0/11] 3 ]
[ 2]   8 : PUSH_CONST	3
                                      3: [ [R0/11] 3 3 ]
[ 3]   9 : GLOBAL_GET	+
                                      4: [ [R0/11] 3 3 [Closure/core:+] ]
[ 4]  10 : JMP_CLOSURE	2
                                      3: [ [R0/11] 3 3 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [R0/11] 6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 6 ]
[ 1]  11 : LABEL	"R0"
                                      1: [ 6 ]
[ 1]  12 : STACK_POP
                                      0: [  ]
[ 0]  13 : PUSH_CONST	4
                                      1: [ 4 ]
[ 1]  14 : RETURN_VAL
test: got "4"  - expected "4"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! incf (lambda (x) (+ x 1))) (incf (incf 5)))
ParseNext ==>  (begin (set! incf (lambda (x) (+ x 1))) (incf (incf 5)))
Parsed:  (begin (set! foo:incf (lambda (foo:x) (core:+ foo:x 1))) (foo:incf (foo:incf 5)))
Compiled:
	CODE BLOCK ; (x) => ((+ x 1))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	PUSH_CONST	1
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

	CODE BLOCK ; () => ((begin (set! incf (lambda (x) (+ x 1))) (incf (incf 5))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((+ x 1))
	2	GLOBAL_SET	incf
	3	STACK_POP
	4	SAVE_RETURN	"R0"	8
	5	PUSH_CONST	5
	6	GLOBAL_GET	incf
	7	JMP_CLOSURE	1
8	LABEL	"R0"
	9	GLOBAL_GET	incf
	10	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((begin (set! incf (lambda (x) (+ x 1))) (incf (incf 5))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((+ x 1))
	2	GLOBAL_SET	incf
	3	STACK_POP
	4	SAVE_RETURN	"R0"	8
	5	PUSH_CONST	5
	6	GLOBAL_GET	incf
	7	JMP_CLOSURE	1
8	LABEL	"R0"
	9	GLOBAL_GET	incf
	10	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((+ x 1))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	incf
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"R0"	8
                                      1: [ [R0/8] ]
[ 1]   5 : PUSH_CONST	5
                                      2: [ [R0/8] 5 ]
[ 2]   6 : GLOBAL_GET	incf
                                      3: [ [R0/8] 5 [Closure] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [R0/8] 5 ]
[ 2]   0 : MAKE_ENV	1	; (x)
                                      1: [ [R0/8] ]
[ 1]   1 : LOCAL_GET	0	0	; x
                                      2: [ [R0/8] 5 ]
[ 2]   2 : PUSH_CONST	1
                                      3: [ [R0/8] 5 1 ]
[ 3]   3 : GLOBAL_GET	+
                                      4: [ [R0/8] 5 1 [Closure/core:+] ]
[ 4]   4 : JMP_CLOSURE	2
                                      3: [ [R0/8] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [R0/8] 6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 6 ]
[ 1]   8 : LABEL	"R0"
                                      1: [ 6 ]
[ 1]   9 : GLOBAL_GET	incf
                                      2: [ 6 [Closure] ]
[ 2]  10 : JMP_CLOSURE	1
                                      1: [ 6 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 6 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 6 1 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 6 1 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 6 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 7 ]
[ 1]   1 : RETURN_VAL
test: got "7"  - expected "7"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (set! fact (lambda (x) (if (<= x 1) 1 (* x (fact (- x 1)))))) (fact 5)
ParseNext ==>  (set! fact (lambda (x) (if (<= x 1) 1 (* x (fact (- x 1))))))
Parsed:  (set! foo:fact (lambda (foo:x) (if (core:<= foo:x 1) 1 (core:* foo:x (foo:fact (core:- foo:x 1))))))
Compiled:
	CODE BLOCK ; (x) => ((if (<= x 1) 1 (* x (fact (- x 1)))))
	0	MAKE_ENV	1	; (x)
	1	SAVE_RETURN	"R0"	6
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	<=
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	1
	9	RETURN_VAL
10	LABEL	"L3"
	11	LOCAL_GET	0	0	; x
	12	SAVE_RETURN	"R1"	21
	13	SAVE_RETURN	"R2"	18
	14	LOCAL_GET	0	0	; x
	15	PUSH_CONST	1
	16	GLOBAL_GET	-
	17	JMP_CLOSURE	2
18	LABEL	"R2"
	19	GLOBAL_GET	fact
	20	JMP_CLOSURE	1
21	LABEL	"R1"
	22	GLOBAL_GET	*
	23	JMP_CLOSURE	2

	CODE BLOCK ; () => ((set! fact (lambda (x) (if (<= x 1) 1 (* x (fact (- x 1)))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (<= x 1) 1 (* x (fact (- x 1)))))
	2	GLOBAL_SET	fact
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((set! fact (lambda (x) (if (<= x 1) 1 (* x (fact (- x 1)))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (<= x 1) 1 (* x (fact (- x 1)))))
	2	GLOBAL_SET	fact
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (<= x 1) 1 (* x (fact (- x 1)))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fact
                                      1: [ [Closure] ]
[ 1]   3 : RETURN_VAL
test: got "[Closure]"  - expected "[Closure]"
ParseNext ==>  (fact 5)
Parsed:  (foo:fact 5)
Compiled:
	CODE BLOCK ; () => ((fact 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	fact
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((fact 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	fact
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_GET	fact
                                      2: [ 5 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [R0/6] 5 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [R0/6] 5 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [R0/6] 5 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [R0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : LOCAL_GET	0	0	; x
                                      1: [ 5 ]
[ 1]  12 : SAVE_RETURN	"R1"	21
                                      2: [ 5 [R1/21] ]
[ 2]  13 : SAVE_RETURN	"R2"	18
                                      3: [ 5 [R1/21] [R2/18] ]
[ 3]  14 : LOCAL_GET	0	0	; x
                                      4: [ 5 [R1/21] [R2/18] 5 ]
[ 4]  15 : PUSH_CONST	1
                                      5: [ 5 [R1/21] [R2/18] 5 1 ]
[ 5]  16 : GLOBAL_GET	-
                                      6: [ 5 [R1/21] [R2/18] 5 1 [Closure/core:-] ]
[ 6]  17 : JMP_CLOSURE	2
                                      5: [ 5 [R1/21] [R2/18] 5 1 ]
[ 5]   0 : CALL_PRIMOP	"-"
                                      4: [ 5 [R1/21] [R2/18] 4 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 5 [R1/21] 4 ]
[ 3]  18 : LABEL	"R2"
                                      3: [ 5 [R1/21] 4 ]
[ 3]  19 : GLOBAL_GET	fact
                                      4: [ 5 [R1/21] 4 [Closure] ]
[ 4]  20 : JMP_CLOSURE	1
                                      3: [ 5 [R1/21] 4 ]
[ 3]   0 : MAKE_ENV	1	; (x)
                                      2: [ 5 [R1/21] ]
[ 2]   1 : SAVE_RETURN	"R0"	6
                                      3: [ 5 [R1/21] [R0/6] ]
[ 3]   2 : LOCAL_GET	0	0	; x
                                      4: [ 5 [R1/21] [R0/6] 4 ]
[ 4]   3 : PUSH_CONST	1
                                      5: [ 5 [R1/21] [R0/6] 4 1 ]
[ 5]   4 : GLOBAL_GET	<=
                                      6: [ 5 [R1/21] [R0/6] 4 1 [Closure/core:<=] ]
[ 6]   5 : JMP_CLOSURE	2
                                      5: [ 5 [R1/21] [R0/6] 4 1 ]
[ 5]   0 : CALL_PRIMOP	"<="
                                      4: [ 5 [R1/21] [R0/6] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 5 [R1/21] #f ]
[ 3]   6 : LABEL	"R0"
                                      3: [ 5 [R1/21] #f ]
[ 3]   7 : JMP_IF_FALSE	"L3"	10
                                      2: [ 5 [R1/21] ]
[ 2]  10 : LABEL	"L3"
                                      2: [ 5 [R1/21] ]
[ 2]  11 : LOCAL_GET	0	0	; x
                                      3: [ 5 [R1/21] 4 ]
[ 3]  12 : SAVE_RETURN	"R1"	21
                                      4: [ 5 [R1/21] 4 [R1/21] ]
[ 4]  13 : SAVE_RETURN	"R2"	18
                                      5: [ 5 [R1/21] 4 [R1/21] [R2/18] ]
[ 5]  14 : LOCAL_GET	0	0	; x
                                      6: [ 5 [R1/21] 4 [R1/21] [R2/18] 4 ]
[ 6]  15 : PUSH_CONST	1
                                      7: [ 5 [R1/21] 4 [R1/21] [R2/18] 4 1 ]
[ 7]  16 : GLOBAL_GET	-
                                      8: [ 5 [R1/21] 4 [R1/21] [R2/18] 4 1 [Closure/core:-] ]
[ 8]  17 : JMP_CLOSURE	2
                                      7: [ 5 [R1/21] 4 [R1/21] [R2/18] 4 1 ]
[ 7]   0 : CALL_PRIMOP	"-"
                                      6: [ 5 [R1/21] 4 [R1/21] [R2/18] 3 ]
[ 6]   1 : RETURN_VAL
                                      5: [ 5 [R1/21] 4 [R1/21] 3 ]
[ 5]  18 : LABEL	"R2"
                                      5: [ 5 [R1/21] 4 [R1/21] 3 ]
[ 5]  19 : GLOBAL_GET	fact
                                      6: [ 5 [R1/21] 4 [R1/21] 3 [Closure] ]
[ 6]  20 : JMP_CLOSURE	1
                                      5: [ 5 [R1/21] 4 [R1/21] 3 ]
[ 5]   0 : MAKE_ENV	1	; (x)
                                      4: [ 5 [R1/21] 4 [R1/21] ]
[ 4]   1 : SAVE_RETURN	"R0"	6
                                      5: [ 5 [R1/21] 4 [R1/21] [R0/6] ]
[ 5]   2 : LOCAL_GET	0	0	; x
                                      6: [ 5 [R1/21] 4 [R1/21] [R0/6] 3 ]
[ 6]   3 : PUSH_CONST	1
                                      7: [ 5 [R1/21] 4 [R1/21] [R0/6] 3 1 ]
[ 7]   4 : GLOBAL_GET	<=
                                      8: [ 5 [R1/21] 4 [R1/21] [R0/6] 3 1 [Closure/core:<=] ]
[ 8]   5 : JMP_CLOSURE	2
                                      7: [ 5 [R1/21] 4 [R1/21] [R0/6] 3 1 ]
[ 7]   0 : CALL_PRIMOP	"<="
                                      6: [ 5 [R1/21] 4 [R1/21] [R0/6] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ 5 [R1/21] 4 [R1/21] #f ]
[ 5]   6 : LABEL	"R0"
                                      5: [ 5 [R1/21] 4 [R1/21] #f ]
[ 5]   7 : JMP_IF_FALSE	"L3"	10
                                      4: [ 5 [R1/21] 4 [R1/21] ]
[ 4]  10 : LABEL	"L3"
                                      4: [ 5 [R1/21] 4 [R1/21] ]
[ 4]  11 : LOCAL_GET	0	0	; x
                                      5: [ 5 [R1/21] 4 [R1/21] 3 ]
[ 5]  12 : SAVE_RETURN	"R1"	21
                                      6: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] ]
[ 6]  13 : SAVE_RETURN	"R2"	18
                                      7: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R2/18] ]
[ 7]  14 : LOCAL_GET	0	0	; x
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R2/18] 3 ]
[ 8]  15 : PUSH_CONST	1
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R2/18] 3 1 ]
[ 9]  16 : GLOBAL_GET	-
                                     10: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R2/18] 3 1 [Closure/core:-] ]
[10]  17 : JMP_CLOSURE	2
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R2/18] 3 1 ]
[ 9]   0 : CALL_PRIMOP	"-"
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R2/18] 2 ]
[ 8]   1 : RETURN_VAL
                                      7: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 ]
[ 7]  18 : LABEL	"R2"
                                      7: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 ]
[ 7]  19 : GLOBAL_GET	fact
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [Closure] ]
[ 8]  20 : JMP_CLOSURE	1
                                      7: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 ]
[ 7]   0 : MAKE_ENV	1	; (x)
                                      6: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] ]
[ 6]   1 : SAVE_RETURN	"R0"	6
                                      7: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R0/6] ]
[ 7]   2 : LOCAL_GET	0	0	; x
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R0/6] 2 ]
[ 8]   3 : PUSH_CONST	1
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R0/6] 2 1 ]
[ 9]   4 : GLOBAL_GET	<=
                                     10: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R0/6] 2 1 [Closure/core:<=] ]
[10]   5 : JMP_CLOSURE	2
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R0/6] 2 1 ]
[ 9]   0 : CALL_PRIMOP	"<="
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] [R0/6] #f ]
[ 8]   1 : RETURN_VAL
                                      7: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] #f ]
[ 7]   6 : LABEL	"R0"
                                      7: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] #f ]
[ 7]   7 : JMP_IF_FALSE	"L3"	10
                                      6: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] ]
[ 6]  10 : LABEL	"L3"
                                      6: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] ]
[ 6]  11 : LOCAL_GET	0	0	; x
                                      7: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 ]
[ 7]  12 : SAVE_RETURN	"R1"	21
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] ]
[ 8]  13 : SAVE_RETURN	"R2"	18
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R2/18] ]
[ 9]  14 : LOCAL_GET	0	0	; x
                                     10: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R2/18] 2 ]
[10]  15 : PUSH_CONST	1
                                     11: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R2/18] 2 1 ]
[11]  16 : GLOBAL_GET	-
                                     12: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R2/18] 2 1 [Closure/core:-] ]
[12]  17 : JMP_CLOSURE	2
                                     11: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R2/18] 2 1 ]
[11]   0 : CALL_PRIMOP	"-"
                                     10: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R2/18] 1 ]
[10]   1 : RETURN_VAL
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] 1 ]
[ 9]  18 : LABEL	"R2"
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] 1 ]
[ 9]  19 : GLOBAL_GET	fact
                                     10: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] 1 [Closure] ]
[10]  20 : JMP_CLOSURE	1
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] 1 ]
[ 9]   0 : MAKE_ENV	1	; (x)
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] ]
[ 8]   1 : SAVE_RETURN	"R0"	6
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R0/6] ]
[ 9]   2 : LOCAL_GET	0	0	; x
                                     10: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R0/6] 1 ]
[10]   3 : PUSH_CONST	1
                                     11: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R0/6] 1 1 ]
[11]   4 : GLOBAL_GET	<=
                                     12: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R0/6] 1 1 [Closure/core:<=] ]
[12]   5 : JMP_CLOSURE	2
                                     11: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R0/6] 1 1 ]
[11]   0 : CALL_PRIMOP	"<="
                                     10: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] [R0/6] #t ]
[10]   1 : RETURN_VAL
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] #t ]
[ 9]   6 : LABEL	"R0"
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] #t ]
[ 9]   7 : JMP_IF_FALSE	"L3"	10
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] ]
[ 8]   8 : PUSH_CONST	1
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 [R1/21] 1 ]
[ 9]   9 : RETURN_VAL
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 1 ]
[ 8]  21 : LABEL	"R1"
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 1 ]
[ 8]  22 : GLOBAL_GET	*
                                      9: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 1 [Closure/core:*] ]
[ 9]  23 : JMP_CLOSURE	2
                                      8: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 1 ]
[ 8]   0 : CALL_PRIMOP	"*"
                                      7: [ 5 [R1/21] 4 [R1/21] 3 [R1/21] 2 ]
[ 7]   1 : RETURN_VAL
                                      6: [ 5 [R1/21] 4 [R1/21] 3 2 ]
[ 6]  21 : LABEL	"R1"
                                      6: [ 5 [R1/21] 4 [R1/21] 3 2 ]
[ 6]  22 : GLOBAL_GET	*
                                      7: [ 5 [R1/21] 4 [R1/21] 3 2 [Closure/core:*] ]
[ 7]  23 : JMP_CLOSURE	2
                                      6: [ 5 [R1/21] 4 [R1/21] 3 2 ]
[ 6]   0 : CALL_PRIMOP	"*"
                                      5: [ 5 [R1/21] 4 [R1/21] 6 ]
[ 5]   1 : RETURN_VAL
                                      4: [ 5 [R1/21] 4 6 ]
[ 4]  21 : LABEL	"R1"
                                      4: [ 5 [R1/21] 4 6 ]
[ 4]  22 : GLOBAL_GET	*
                                      5: [ 5 [R1/21] 4 6 [Closure/core:*] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ 5 [R1/21] 4 6 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 5 [R1/21] 24 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 5 24 ]
[ 2]  21 : LABEL	"R1"
                                      2: [ 5 24 ]
[ 2]  22 : GLOBAL_GET	*
                                      3: [ 5 24 [Closure/core:*] ]
[ 3]  23 : JMP_CLOSURE	2
                                      2: [ 5 24 ]
[ 2]   0 : CALL_PRIMOP	"*"
                                      1: [ 120 ]
[ 1]   1 : RETURN_VAL
test: got "120"  - expected "120"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (set! fact-helper (lambda (x prod) (if (<= x 1) prod (fact-helper (- x 1) (* x prod))))) (set! fact (lambda (x) (fact-helper x 1))) (fact 5)
ParseNext ==>  (set! fact-helper (lambda (x prod) (if (<= x 1) prod (fact-helper (- x 1) (* x prod)))))
Parsed:  (set! foo:fact-helper (lambda (foo:x foo:prod) (if (core:<= foo:x 1) foo:prod (foo:fact-helper (core:- foo:x 1) (core:* foo:x foo:prod)))))
Compiled:
	CODE BLOCK ; (x prod) => ((if (<= x 1) prod (fact-helper (- x 1) (* x prod))))
	0	MAKE_ENV	2	; (x prod)
	1	SAVE_RETURN	"R0"	6
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	<=
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	JMP_IF_FALSE	"L3"	10
	8	LOCAL_GET	0	1	; prod
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"R1"	16
	12	LOCAL_GET	0	0	; x
	13	PUSH_CONST	1
	14	GLOBAL_GET	-
	15	JMP_CLOSURE	2
16	LABEL	"R1"
	17	SAVE_RETURN	"R2"	22
	18	LOCAL_GET	0	0	; x
	19	LOCAL_GET	0	1	; prod
	20	GLOBAL_GET	*
	21	JMP_CLOSURE	2
22	LABEL	"R2"
	23	GLOBAL_GET	fact-helper
	24	JMP_CLOSURE	2

	CODE BLOCK ; () => ((set! fact-helper (lambda (x prod) (if (<= x 1) prod (fact-helper (- x 1) (* x prod))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (<= x 1) prod (fact-helper (- x 1) (* x prod))))
	2	GLOBAL_SET	fact-helper
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((set! fact-helper (lambda (x prod) (if (<= x 1) prod (fact-helper (- x 1) (* x prod))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (<= x 1) prod (fact-helper (- x 1) (* x prod))))
	2	GLOBAL_SET	fact-helper
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (<= x 1) prod (fact-helper (- x 1) (* x prod))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fact-helper
                                      1: [ [Closure] ]
[ 1]   3 : RETURN_VAL
test: got "[Closure]"  - expected "[Closure]"
ParseNext ==>  (set! fact (lambda (x) (fact-helper x 1)))
Parsed:  (set! foo:fact (lambda (foo:x) (foo:fact-helper foo:x 1)))
Compiled:
	CODE BLOCK ; (x) => ((fact-helper x 1))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	PUSH_CONST	1
	3	GLOBAL_GET	fact-helper
	4	JMP_CLOSURE	2

	CODE BLOCK ; () => ((set! fact (lambda (x) (fact-helper x 1))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((fact-helper x 1))
	2	GLOBAL_SET	fact
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((set! fact (lambda (x) (fact-helper x 1))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((fact-helper x 1))
	2	GLOBAL_SET	fact
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((fact-helper x 1))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fact
                                      1: [ [Closure] ]
[ 1]   3 : RETURN_VAL
test: got "[Closure]"  - expected "[Closure]"
ParseNext ==>  (fact 5)
Parsed:  (foo:fact 5)
Compiled:
	CODE BLOCK ; () => ((fact 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	fact
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((fact 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	fact
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_GET	fact
                                      2: [ 5 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 5 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 5 1 ]
[ 2]   3 : GLOBAL_GET	fact-helper
                                      3: [ 5 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 5 1 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [R0/6] 5 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [R0/6] 5 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [R0/6] 5 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [R0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"R1"	16
                                      1: [ [R1/16] ]
[ 1]  12 : LOCAL_GET	0	0	; x
                                      2: [ [R1/16] 5 ]
[ 2]  13 : PUSH_CONST	1
                                      3: [ [R1/16] 5 1 ]
[ 3]  14 : GLOBAL_GET	-
                                      4: [ [R1/16] 5 1 [Closure/core:-] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [R1/16] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"-"
                                      2: [ [R1/16] 4 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 4 ]
[ 1]  16 : LABEL	"R1"
                                      1: [ 4 ]
[ 1]  17 : SAVE_RETURN	"R2"	22
                                      2: [ 4 [R2/22] ]
[ 2]  18 : LOCAL_GET	0	0	; x
                                      3: [ 4 [R2/22] 5 ]
[ 3]  19 : LOCAL_GET	0	1	; prod
                                      4: [ 4 [R2/22] 5 1 ]
[ 4]  20 : GLOBAL_GET	*
                                      5: [ 4 [R2/22] 5 1 [Closure/core:*] ]
[ 5]  21 : JMP_CLOSURE	2
                                      4: [ 4 [R2/22] 5 1 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 4 [R2/22] 5 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 4 5 ]
[ 2]  22 : LABEL	"R2"
                                      2: [ 4 5 ]
[ 2]  23 : GLOBAL_GET	fact-helper
                                      3: [ 4 5 [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ 4 5 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [R0/6] 4 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [R0/6] 4 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [R0/6] 4 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 4 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [R0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"R1"	16
                                      1: [ [R1/16] ]
[ 1]  12 : LOCAL_GET	0	0	; x
                                      2: [ [R1/16] 4 ]
[ 2]  13 : PUSH_CONST	1
                                      3: [ [R1/16] 4 1 ]
[ 3]  14 : GLOBAL_GET	-
                                      4: [ [R1/16] 4 1 [Closure/core:-] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [R1/16] 4 1 ]
[ 3]   0 : CALL_PRIMOP	"-"
                                      2: [ [R1/16] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]  16 : LABEL	"R1"
                                      1: [ 3 ]
[ 1]  17 : SAVE_RETURN	"R2"	22
                                      2: [ 3 [R2/22] ]
[ 2]  18 : LOCAL_GET	0	0	; x
                                      3: [ 3 [R2/22] 4 ]
[ 3]  19 : LOCAL_GET	0	1	; prod
                                      4: [ 3 [R2/22] 4 5 ]
[ 4]  20 : GLOBAL_GET	*
                                      5: [ 3 [R2/22] 4 5 [Closure/core:*] ]
[ 5]  21 : JMP_CLOSURE	2
                                      4: [ 3 [R2/22] 4 5 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 3 [R2/22] 20 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 3 20 ]
[ 2]  22 : LABEL	"R2"
                                      2: [ 3 20 ]
[ 2]  23 : GLOBAL_GET	fact-helper
                                      3: [ 3 20 [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ 3 20 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [R0/6] 3 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [R0/6] 3 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [R0/6] 3 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 3 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [R0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"R1"	16
                                      1: [ [R1/16] ]
[ 1]  12 : LOCAL_GET	0	0	; x
                                      2: [ [R1/16] 3 ]
[ 2]  13 : PUSH_CONST	1
                                      3: [ [R1/16] 3 1 ]
[ 3]  14 : GLOBAL_GET	-
                                      4: [ [R1/16] 3 1 [Closure/core:-] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [R1/16] 3 1 ]
[ 3]   0 : CALL_PRIMOP	"-"
                                      2: [ [R1/16] 2 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 2 ]
[ 1]  16 : LABEL	"R1"
                                      1: [ 2 ]
[ 1]  17 : SAVE_RETURN	"R2"	22
                                      2: [ 2 [R2/22] ]
[ 2]  18 : LOCAL_GET	0	0	; x
                                      3: [ 2 [R2/22] 3 ]
[ 3]  19 : LOCAL_GET	0	1	; prod
                                      4: [ 2 [R2/22] 3 20 ]
[ 4]  20 : GLOBAL_GET	*
                                      5: [ 2 [R2/22] 3 20 [Closure/core:*] ]
[ 5]  21 : JMP_CLOSURE	2
                                      4: [ 2 [R2/22] 3 20 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 2 [R2/22] 60 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 2 60 ]
[ 2]  22 : LABEL	"R2"
                                      2: [ 2 60 ]
[ 2]  23 : GLOBAL_GET	fact-helper
                                      3: [ 2 60 [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ 2 60 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [R0/6] 2 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [R0/6] 2 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [R0/6] 2 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [R0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"R1"	16
                                      1: [ [R1/16] ]
[ 1]  12 : LOCAL_GET	0	0	; x
                                      2: [ [R1/16] 2 ]
[ 2]  13 : PUSH_CONST	1
                                      3: [ [R1/16] 2 1 ]
[ 3]  14 : GLOBAL_GET	-
                                      4: [ [R1/16] 2 1 [Closure/core:-] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [R1/16] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"-"
                                      2: [ [R1/16] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]  16 : LABEL	"R1"
                                      1: [ 1 ]
[ 1]  17 : SAVE_RETURN	"R2"	22
                                      2: [ 1 [R2/22] ]
[ 2]  18 : LOCAL_GET	0	0	; x
                                      3: [ 1 [R2/22] 2 ]
[ 3]  19 : LOCAL_GET	0	1	; prod
                                      4: [ 1 [R2/22] 2 60 ]
[ 4]  20 : GLOBAL_GET	*
                                      5: [ 1 [R2/22] 2 60 [Closure/core:*] ]
[ 5]  21 : JMP_CLOSURE	2
                                      4: [ 1 [R2/22] 2 60 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 1 [R2/22] 120 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 120 ]
[ 2]  22 : LABEL	"R2"
                                      2: [ 1 120 ]
[ 2]  23 : GLOBAL_GET	fact-helper
                                      3: [ 1 120 [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ 1 120 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [R0/6] 1 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [R0/6] 1 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [R0/6] 1 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [R0/6] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   6 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]   8 : LOCAL_GET	0	1	; prod
                                      1: [ 120 ]
[ 1]   9 : RETURN_VAL
test: got "120"  - expected "120"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! add +) (add 3 (add 2 1)))
ParseNext ==>  (begin (set! add +) (add 3 (add 2 1)))
Parsed:  (begin (set! foo:add core:+) (foo:add 3 (foo:add 2 1)))
Compiled:
	CODE BLOCK ; () => ((begin (set! add +) (add 3 (add 2 1))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	+
	2	GLOBAL_SET	add
	3	STACK_POP
	4	PUSH_CONST	3
	5	SAVE_RETURN	"R0"	10
	6	PUSH_CONST	2
	7	PUSH_CONST	1
	8	GLOBAL_GET	add
	9	JMP_CLOSURE	2
10	LABEL	"R0"
	11	GLOBAL_GET	add
	12	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((begin (set! add +) (add 3 (add 2 1))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	+
	2	GLOBAL_SET	add
	3	STACK_POP
	4	PUSH_CONST	3
	5	SAVE_RETURN	"R0"	10
	6	PUSH_CONST	2
	7	PUSH_CONST	1
	8	GLOBAL_GET	add
	9	JMP_CLOSURE	2
10	LABEL	"R0"
	11	GLOBAL_GET	add
	12	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	+
                                      1: [ [Closure/core:+] ]
[ 1]   2 : GLOBAL_SET	add
                                      1: [ [Closure/core:+] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	3
                                      1: [ 3 ]
[ 1]   5 : SAVE_RETURN	"R0"	10
                                      2: [ 3 [R0/10] ]
[ 2]   6 : PUSH_CONST	2
                                      3: [ 3 [R0/10] 2 ]
[ 3]   7 : PUSH_CONST	1
                                      4: [ 3 [R0/10] 2 1 ]
[ 4]   8 : GLOBAL_GET	add
                                      5: [ 3 [R0/10] 2 1 [Closure/core:+] ]
[ 5]   9 : JMP_CLOSURE	2
                                      4: [ 3 [R0/10] 2 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ 3 [R0/10] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 3 3 ]
[ 2]  10 : LABEL	"R0"
                                      2: [ 3 3 ]
[ 2]  11 : GLOBAL_GET	add
                                      3: [ 3 3 [Closure/core:+] ]
[ 3]  12 : JMP_CLOSURE	2
                                      2: [ 3 3 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 6 ]
[ 1]   1 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! kar car) (set! car cdr) (set! result (car '(1 2 3))) (set! car kar) result)
ParseNext ==>  (begin (set! kar car) (set! car cdr) (set! result (car (quote (1 2 3)))) (set! car kar) result)
Parsed:  (begin (set! foo:kar core:car) (set! core:car core:cdr) (set! foo:result (core:car (quote (1 2 3)))) (set! core:car foo:kar) foo:result)
Compiled:
	CODE BLOCK ; () => ((begin (set! kar car) (set! car cdr) (set! result (car (quote (1 2 3)))) (set! car kar) result))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	kar
	3	STACK_POP
	4	GLOBAL_GET	cdr
	5	GLOBAL_SET	car
	6	STACK_POP
	7	SAVE_RETURN	"R0"	11
	8	PUSH_CONST	(1 2 3)
	9	GLOBAL_GET	car
	10	JMP_CLOSURE	1
11	LABEL	"R0"
	12	GLOBAL_SET	result
	13	STACK_POP
	14	GLOBAL_GET	kar
	15	GLOBAL_SET	car
	16	STACK_POP
	17	GLOBAL_GET	result
	18	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((begin (set! kar car) (set! car cdr) (set! result (car (quote (1 2 3)))) (set! car kar) result))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	kar
	3	STACK_POP
	4	GLOBAL_GET	cdr
	5	GLOBAL_SET	car
	6	STACK_POP
	7	SAVE_RETURN	"R0"	11
	8	PUSH_CONST	(1 2 3)
	9	GLOBAL_GET	car
	10	JMP_CLOSURE	1
11	LABEL	"R0"
	12	GLOBAL_SET	result
	13	STACK_POP
	14	GLOBAL_GET	kar
	15	GLOBAL_SET	car
	16	STACK_POP
	17	GLOBAL_GET	result
	18	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	car
                                      1: [ [Closure/core:car] ]
[ 1]   2 : GLOBAL_SET	kar
                                      1: [ [Closure/core:car] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : GLOBAL_GET	cdr
                                      1: [ [Closure/core:cdr] ]
[ 1]   5 : GLOBAL_SET	car
                                      1: [ [Closure/core:cdr] ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R0"	11
                                      1: [ [R0/11] ]
[ 1]   8 : PUSH_CONST	(1 2 3)
                                      2: [ [R0/11] (1 2 3) ]
[ 2]   9 : GLOBAL_GET	car
                                      3: [ [R0/11] (1 2 3) [Closure/core:cdr] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [R0/11] (1 2 3) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R0/11] (2 3) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (2 3) ]
[ 1]  11 : LABEL	"R0"
                                      1: [ (2 3) ]
[ 1]  12 : GLOBAL_SET	result
                                      1: [ (2 3) ]
[ 1]  13 : STACK_POP
                                      0: [  ]
[ 0]  14 : GLOBAL_GET	kar
                                      1: [ [Closure/core:car] ]
[ 1]  15 : GLOBAL_SET	car
                                      1: [ [Closure/core:car] ]
[ 1]  16 : STACK_POP
                                      0: [  ]
[ 0]  17 : GLOBAL_GET	result
                                      1: [ (2 3) ]
[ 1]  18 : RETURN_VAL
test: got "(2 3)"  - expected "(2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (x) (set! x 5) x) 6)
ParseNext ==>  ((lambda (x) (set! x 5) x) 6)
Parsed:  ((lambda (foo:x) (set! foo:x 5) foo:x) 6)
Compiled:
	CODE BLOCK ; (x) => ((set! x 5) x)
	0	MAKE_ENV	1	; (x)
	1	PUSH_CONST	5
	2	LOCAL_SET	0	0	; x
	3	STACK_POP
	4	LOCAL_GET	0	0	; x
	5	RETURN_VAL

	CODE BLOCK ; () => (((lambda (x) (set! x 5) x) 6))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	6
	2	MAKE_CLOSURE	[Closure]	; ((set! x 5) x)
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => (((lambda (x) (set! x 5) x) 6))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	6
	2	MAKE_CLOSURE	[Closure]	; ((set! x 5) x)
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	6
                                      1: [ 6 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((set! x 5) x)
                                      2: [ 6 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 6 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : LOCAL_SET	0	0	; x
                                      1: [ 5 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; x
                                      1: [ 5 ]
[ 1]   5 : RETURN_VAL
test: got "5"  - expected "5"
SUCCESS
