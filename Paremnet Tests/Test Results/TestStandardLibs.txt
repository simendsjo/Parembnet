TEST TestStandardLibs
ParseNext ==>  (package-set "core")
Executing:  
	CODE BLOCK ; () => ((package-set "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "core" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "core" ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (package-export (quote (let let* letrec define and or cond case for dotimes first second third rest after-first after-second after-third fold-left fold-right reverse chain chain-list)))
Executing:  
	CODE BLOCK ; () => ((package-export (quote (let let* letrec define and or cond case for dotimes first second third rest after-first after-second after-third fold-left fold-right reverse chain chain-list))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let let* letrec define and or cond case for dotimes first second third rest after-first after-second after-third fold-left fold-right reverse chain chain-list)
	2	GLOBAL_GET	package-export
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(let let* letrec define and or cond case for dotimes first second third rest after-first after-second after-third fold-left fold-right reverse chain chain-list)
                                      1: [ (let let* letrec define and or cond case for dotimes first second third rest after-first after-second after-third fold-left fold-right reverse chain chain-list) ]
[ 1]   2 : GLOBAL_GET	package-export
                                      2: [ (let let* letrec define and or cond case for dotimes first second third rest after-first after-second after-third fold-left fold-right reverse chain chain-list) [Closure/core:package-export] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (let let* letrec define and or cond case for dotimes first second third rest after-first after-second after-third fold-left fold-right reverse chain chain-list) ]
[ 1]   0 : CALL_PRIMOP	"package-export"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (defmacro let (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
Executing:  
	CODE BLOCK ; () => ((defmacro let (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro let* (bindings . body) (if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
Executing:  
	CODE BLOCK ; () => ((defmacro let* (bindings . body) (if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro letrec (bindings . body) (append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
Executing:  
	CODE BLOCK ; () => ((defmacro letrec (bindings . body) (append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro define (name . body) (if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
Executing:  
	CODE BLOCK ; () => ((defmacro define (name . body) (if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro and (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
Executing:  
	CODE BLOCK ; () => ((defmacro and (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro or (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
Executing:  
	CODE BLOCK ; () => ((defmacro or (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro cond (first . rest) (if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
Executing:  
	CODE BLOCK ; () => ((defmacro cond (first . rest) (if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro case (key . rest) (let* ((keyval (gensym "CASE"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((keyval (gensym "CASE"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] ((keyval (gensym "CASE"))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((keyval (gensym "CASE"))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((keyval (gensym "CASE"))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"R2"	25
                                      2: [ let [R2/25] ]
[ 2]  18 : SAVE_RETURN	"R3"	22
                                      3: [ let [R2/25] [R3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [R2/25] [R3/22] ((keyval (gensym "CASE"))) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [R2/25] [R3/22] ((keyval (gensym "CASE"))) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [R2/25] [R3/22] ((keyval (gensym "CASE"))) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [R2/25] [R3/22] (keyval (gensym "CASE")) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R2/25] (keyval (gensym "CASE")) ]
[ 3]  22 : LABEL	"R3"
                                      3: [ let [R2/25] (keyval (gensym "CASE")) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [R2/25] (keyval (gensym "CASE")) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [R2/25] (keyval (gensym "CASE")) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R2/25] ((keyval (gensym "CASE"))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((keyval (gensym "CASE"))) ]
[ 2]  25 : LABEL	"R2"
                                      2: [ let ((keyval (gensym "CASE"))) ]
[ 2]  26 : SAVE_RETURN	"R4"	44
                                      3: [ let ((keyval (gensym "CASE"))) [R4/44] ]
[ 3]  27 : SAVE_RETURN	"R5"	31
                                      4: [ let ((keyval (gensym "CASE"))) [R4/44] [R5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((keyval (gensym "CASE"))) [R4/44] [R5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((keyval (gensym "CASE"))) [R4/44] [R5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((keyval (gensym "CASE"))) [R4/44] [R5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((keyval (gensym "CASE"))) [R4/44] [R5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) ]
[ 4]  31 : LABEL	"R5"
                                      4: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"R6"	40
                                      5: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] ]
[ 5]  33 : SAVE_RETURN	"R7"	37
                                      6: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] [R7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] [R7/37] ((keyval (gensym "CASE"))) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] [R7/37] ((keyval (gensym "CASE"))) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] [R7/37] ((keyval (gensym "CASE"))) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] [R7/37] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] () ]
[ 6]  37 : LABEL	"R7"
                                      6: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] () ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] () [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) [R6/40] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) (()) ]
[ 5]  40 : LABEL	"R6"
                                      5: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) (()) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) (()) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) (()) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((keyval (gensym "CASE"))) [R4/44] (let*) (()) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((keyval (gensym "CASE"))) [R4/44] (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((keyval (gensym "CASE"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 3]  44 : LABEL	"R4"
                                      3: [ let ((keyval (gensym "CASE"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((keyval (gensym "CASE"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((keyval (gensym "CASE"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((keyval (gensym "CASE"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R1"	11
                                      1: [ [R1/11] ]
[ 1]   8 : PUSH_CONST	begin
                                      2: [ [R1/11] begin ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [R1/11] begin [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [R1/11] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R1/11] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  11 : LABEL	"R1"
                                      1: [ (begin) ]
[ 1]  12 : LOCAL_GET	0	1	; body
                                      2: [ (begin) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 2]  13 : GLOBAL_GET	append
                                      3: [ (begin) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) [Closure/core:append] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (begin) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((keyval (gensym "CASE"))) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((keyval (gensym "CASE"))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((keyval (gensym "CASE"))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((keyval (gensym "CASE"))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (keyval (gensym "CASE")) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ keyval ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (keyval) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (keyval) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (keyval) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (keyval) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (keyval) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((keyval)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((keyval)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((keyval)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((keyval)) ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((keyval)) ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((keyval)) ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [R5/30] [Closure/core:cadr] ((keyval (gensym "CASE"))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [R5/30] [Closure/core:cadr] ((keyval (gensym "CASE"))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [R5/30] [Closure/core:cadr] ((keyval (gensym "CASE"))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (keyval (gensym "CASE")) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (gensym "CASE") ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [R5/30] ((gensym "CASE")) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "CASE")) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "CASE")) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "CASE")) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "CASE")) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) (gensym "CASE")) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((defmacro case (key . rest) (let* ((keyval (gensym "CASE"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro for (test . body) (let ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (varname (car test)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ varname ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (init-value (cadr test)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ init-value ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (predicate (caddr test)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ predicate ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (step-value (car (cdddr test))) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ step-value ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (varname init-value predicate step-value) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (varname init-value predicate step-value) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (varname init-value predicate step-value) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (varname init-value predicate step-value) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (varname init-value predicate step-value) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((varname init-value predicate step-value)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((varname init-value predicate step-value)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((varname init-value predicate step-value)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((varname init-value predicate step-value)) ((list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((varname init-value predicate step-value)) ((list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((varname init-value predicate step-value)) ((list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) [R5/30] [Closure/core:cadr] ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) [R5/30] [Closure/core:cadr] ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) [R5/30] [Closure/core:cadr] ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (varname (car test)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (car test) ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (init-value (cadr test)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (cadr test) ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (predicate (caddr test)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (caddr test) ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (step-value (car (cdddr test))) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (car (cdddr test)) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) [R5/30] ((car test) (cadr test) (caddr test) (car (cdddr test))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) ((car test) (cadr test) (caddr test) (car (cdddr test))) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) ((car test) (cadr test) (caddr test) (car (cdddr test))) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) ((car test) (cadr test) (caddr test) (car (cdddr test))) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))) ((car test) (cadr test) (caddr test) (car (cdddr test))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (varname init-value predicate step-value) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))) (car test) (cadr test) (caddr test) (car (cdddr test))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((defmacro for (test . body) (let ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro dotimes (pars . body) (let ((varname (car pars)) (count (cadr pars))) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((varname (car pars)) (count (cadr pars))) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((varname (car pars)) (count (cadr pars))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((varname (car pars)) (count (cadr pars))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((varname (car pars)) (count (cadr pars))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (varname (car pars)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ varname ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (count (cadr pars)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ count ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (varname count) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (varname count) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (varname count) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (varname count) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (varname count) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((varname count)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((varname count)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((varname count)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((varname count)) ((append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((varname count)) ((append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((varname count)) ((append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) [R5/30] [Closure/core:cadr] ((varname (car pars)) (count (cadr pars))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) [R5/30] [Closure/core:cadr] ((varname (car pars)) (count (cadr pars))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) [R5/30] [Closure/core:cadr] ((varname (car pars)) (count (cadr pars))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (varname (car pars)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (car pars) ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (count (cadr pars)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (cadr pars) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) [R5/30] ((car pars) (cadr pars)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) ((car pars) (cadr pars)) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) ((car pars) (cadr pars)) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) ((car pars) (cadr pars)) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))) ((car pars) (cadr pars)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (varname count) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)) (car pars) (cadr pars)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((defmacro dotimes (pars . body) (let ((varname (car pars)) (count (cadr pars))) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro apply (fn args) (let ((arglist (eval args))) (append (list fn) arglist)))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((arglist (eval args))) (append (list fn) arglist) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((arglist (eval args))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((arglist (eval args))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((arglist (eval args))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (arglist (eval args)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ arglist ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (arglist) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (arglist) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (arglist) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (arglist) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (arglist) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((arglist)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((arglist)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((arglist)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((arglist)) ((append (list fn) arglist)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((arglist)) ((append (list fn) arglist)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((arglist)) ((append (list fn) arglist)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (arglist) (append (list fn) arglist)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (arglist) (append (list fn) arglist)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (arglist) (append (list fn) arglist)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (arglist) (append (list fn) arglist)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (arglist) (append (list fn) arglist)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (arglist) (append (list fn) arglist))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (arglist) (append (list fn) arglist))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (arglist) (append (list fn) arglist))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (arglist) (append (list fn) arglist))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (arglist) (append (list fn) arglist))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (arglist) (append (list fn) arglist))) [R5/30] [Closure/core:cadr] ((arglist (eval args))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (arglist) (append (list fn) arglist))) [R5/30] [Closure/core:cadr] ((arglist (eval args))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (arglist) (append (list fn) arglist))) [R5/30] [Closure/core:cadr] ((arglist (eval args))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (arglist (eval args)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (eval args) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (arglist) (append (list fn) arglist))) [R5/30] ((eval args)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (arglist) (append (list fn) arglist))) ((eval args)) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (arglist) (append (list fn) arglist))) ((eval args)) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (arglist) (append (list fn) arglist))) ((eval args)) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (arglist) (append (list fn) arglist))) ((eval args)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (arglist) (append (list fn) arglist)) (eval args)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((defmacro apply (fn args) (let ((arglist (eval args))) (append (list fn) arglist))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (define first car)
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ first car ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] first ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] first [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] first ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] first ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] first [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (first) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (first) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (first) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (first) (car) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (first) (car) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (first) (car) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! first car) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! first car) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! first car) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! first car) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! first car) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! first car) [R4/28] quote first ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! first car) [R4/28] quote first [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! first car) [R4/28] quote first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! first car) [R4/28] (quote first) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! first car) (quote first) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! first car) (quote first) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! first car) (quote first) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! first car) (quote first) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! first car) (quote first)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define first car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	STACK_POP
	4	PUSH_CONST	first
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	car
                                      1: [ [Closure/core:car] ]
[ 1]   2 : GLOBAL_SET	first
                                      1: [ [Closure/core:car] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	first
                                      1: [ first ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define second cadr)
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ second cadr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] second ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] second [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] second ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] second ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] second [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (second) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (second) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (second) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (second) (cadr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (second) (cadr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (second) (cadr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! second cadr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! second cadr) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! second cadr) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! second cadr) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! second cadr) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! second cadr) [R4/28] quote second ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! second cadr) [R4/28] quote second [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! second cadr) [R4/28] quote second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! second cadr) [R4/28] (quote second) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! second cadr) (quote second) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! second cadr) (quote second) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! second cadr) (quote second) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! second cadr) (quote second) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! second cadr) (quote second)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define second cadr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cadr
	2	GLOBAL_SET	second
	3	STACK_POP
	4	PUSH_CONST	second
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cadr
                                      1: [ [Closure/core:cadr] ]
[ 1]   2 : GLOBAL_SET	second
                                      1: [ [Closure/core:cadr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	second
                                      1: [ second ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define third caddr)
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ third caddr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] third ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] third [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] third ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] third ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] third [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (third) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (third) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (third) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (third) (caddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (third) (caddr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (third) (caddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! third caddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! third caddr) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! third caddr) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! third caddr) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! third caddr) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! third caddr) [R4/28] quote third ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! third caddr) [R4/28] quote third [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! third caddr) [R4/28] quote third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! third caddr) [R4/28] (quote third) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! third caddr) (quote third) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! third caddr) (quote third) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! third caddr) (quote third) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! third caddr) (quote third) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! third caddr) (quote third)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define third caddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	caddr
	2	GLOBAL_SET	third
	3	STACK_POP
	4	PUSH_CONST	third
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	caddr
                                      1: [ [Closure/core:caddr] ]
[ 1]   2 : GLOBAL_SET	third
                                      1: [ [Closure/core:caddr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	third
                                      1: [ third ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define rest cdr)
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ rest cdr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] rest ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] rest [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] rest ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] rest ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] rest [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] rest ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (rest) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (rest) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (rest) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (rest) (cdr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (rest) (cdr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (rest) (cdr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! rest cdr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! rest cdr) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! rest cdr) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! rest cdr) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! rest cdr) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! rest cdr) [R4/28] quote rest ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! rest cdr) [R4/28] quote rest [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! rest cdr) [R4/28] quote rest ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! rest cdr) [R4/28] (quote rest) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! rest cdr) (quote rest) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! rest cdr) (quote rest) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! rest cdr) (quote rest) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! rest cdr) (quote rest) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! rest cdr) (quote rest)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define rest cdr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_SET	rest
	3	STACK_POP
	4	PUSH_CONST	rest
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdr
                                      1: [ [Closure/core:cdr] ]
[ 1]   2 : GLOBAL_SET	rest
                                      1: [ [Closure/core:cdr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	rest
                                      1: [ rest ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define after-first cdr)
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ after-first cdr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] after-first ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] after-first [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] after-first ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] after-first ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] after-first [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] after-first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (after-first) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (after-first) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (after-first) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (after-first) (cdr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (after-first) (cdr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (after-first) (cdr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! after-first cdr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! after-first cdr) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! after-first cdr) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! after-first cdr) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! after-first cdr) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! after-first cdr) [R4/28] quote after-first ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! after-first cdr) [R4/28] quote after-first [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! after-first cdr) [R4/28] quote after-first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! after-first cdr) [R4/28] (quote after-first) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! after-first cdr) (quote after-first) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! after-first cdr) (quote after-first) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! after-first cdr) (quote after-first) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! after-first cdr) (quote after-first) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! after-first cdr) (quote after-first)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define after-first cdr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_SET	after-first
	3	STACK_POP
	4	PUSH_CONST	after-first
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdr
                                      1: [ [Closure/core:cdr] ]
[ 1]   2 : GLOBAL_SET	after-first
                                      1: [ [Closure/core:cdr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	after-first
                                      1: [ after-first ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define after-second cddr)
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ after-second cddr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] after-second ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] after-second [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] after-second ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] after-second ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] after-second [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] after-second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (after-second) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (after-second) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (after-second) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (after-second) (cddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (after-second) (cddr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (after-second) (cddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! after-second cddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! after-second cddr) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! after-second cddr) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! after-second cddr) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! after-second cddr) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! after-second cddr) [R4/28] quote after-second ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! after-second cddr) [R4/28] quote after-second [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! after-second cddr) [R4/28] quote after-second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! after-second cddr) [R4/28] (quote after-second) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! after-second cddr) (quote after-second) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! after-second cddr) (quote after-second) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! after-second cddr) (quote after-second) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! after-second cddr) (quote after-second) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! after-second cddr) (quote after-second)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define after-second cddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cddr
	2	GLOBAL_SET	after-second
	3	STACK_POP
	4	PUSH_CONST	after-second
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cddr
                                      1: [ [Closure/core:cddr] ]
[ 1]   2 : GLOBAL_SET	after-second
                                      1: [ [Closure/core:cddr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	after-second
                                      1: [ after-second ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define after-third cdddr)
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ after-third cdddr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] after-third ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] after-third [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] after-third ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] after-third ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] after-third [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] after-third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (after-third) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (after-third) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (after-third) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (after-third) (cdddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (after-third) (cdddr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (after-third) (cdddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! after-third cdddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! after-third cdddr) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! after-third cdddr) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! after-third cdddr) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! after-third cdddr) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! after-third cdddr) [R4/28] quote after-third ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! after-third cdddr) [R4/28] quote after-third [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! after-third cdddr) [R4/28] quote after-third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! after-third cdddr) [R4/28] (quote after-third) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! after-third cdddr) (quote after-third) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! after-third cdddr) (quote after-third) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! after-third cdddr) (quote after-third) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! after-third cdddr) (quote after-third) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! after-third cdddr) (quote after-third)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define after-third cdddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdddr
	2	GLOBAL_SET	after-third
	3	STACK_POP
	4	PUSH_CONST	after-third
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdddr
                                      1: [ [Closure/core:cdddr] ]
[ 1]   2 : GLOBAL_SET	after-third
                                      1: [ [Closure/core:cdddr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	after-third
                                      1: [ after-third ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (fold-left fn base lst) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (fold-left fn base lst) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (fold-left fn base lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (fold-left fn base lst) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (fold-left fn base lst) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (fold-left fn base lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] fold-left ]
[ 3]   1 : RETURN_VAL
                                      2: [ define fold-left ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define fold-left ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define fold-left [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define fold-left [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define fold-left [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define fold-left [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define fold-left [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define fold-left [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define fold-left [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define fold-left [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define fold-left [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define fold-left [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define fold-left [R6/56] (lambda) [R8/52] [R9/49] (fold-left fn base lst) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define fold-left [R6/56] (lambda) [R8/52] [R9/49] (fold-left fn base lst) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define fold-left [R6/56] (lambda) [R8/52] [R9/49] (fold-left fn base lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define fold-left [R6/56] (lambda) [R8/52] [R9/49] (fn base lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define fold-left [R6/56] (lambda) [R8/52] (fn base lst) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define fold-left [R6/56] (lambda) [R8/52] (fn base lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define fold-left [R6/56] (lambda) [R8/52] (fn base lst) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define fold-left [R6/56] (lambda) [R8/52] (fn base lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define fold-left [R6/56] (lambda) [R8/52] ((fn base lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define fold-left [R6/56] (lambda) ((fn base lst)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define fold-left [R6/56] (lambda) ((fn base lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define fold-left [R6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define fold-left [R6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define fold-left [R6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define fold-left [R6/56] (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] fold-left ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] fold-left [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] fold-left ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] fold-left ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] fold-left [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] fold-left ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (fold-left) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (fold-left) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (fold-left) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (fold-left) ((lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (fold-left) ((lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (fold-left) ((lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [R4/28] quote fold-left ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [R4/28] quote fold-left [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [R4/28] quote fold-left ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [R4/28] (quote fold-left) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
	2	GLOBAL_SET	fold-left
	3	STACK_POP
	4	PUSH_CONST	fold-left
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fold-left
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	fold-left
                                      1: [ fold-left ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (fold-right fn base lst) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (fold-right fn base lst) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (fold-right fn base lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (fold-right fn base lst) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (fold-right fn base lst) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (fold-right fn base lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] fold-right ]
[ 3]   1 : RETURN_VAL
                                      2: [ define fold-right ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define fold-right ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define fold-right [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define fold-right [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define fold-right [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define fold-right [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define fold-right [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define fold-right [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define fold-right [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define fold-right [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define fold-right [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define fold-right [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define fold-right [R6/56] (lambda) [R8/52] [R9/49] (fold-right fn base lst) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define fold-right [R6/56] (lambda) [R8/52] [R9/49] (fold-right fn base lst) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define fold-right [R6/56] (lambda) [R8/52] [R9/49] (fold-right fn base lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define fold-right [R6/56] (lambda) [R8/52] [R9/49] (fn base lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define fold-right [R6/56] (lambda) [R8/52] (fn base lst) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define fold-right [R6/56] (lambda) [R8/52] (fn base lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define fold-right [R6/56] (lambda) [R8/52] (fn base lst) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define fold-right [R6/56] (lambda) [R8/52] (fn base lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define fold-right [R6/56] (lambda) [R8/52] ((fn base lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define fold-right [R6/56] (lambda) ((fn base lst)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define fold-right [R6/56] (lambda) ((fn base lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define fold-right [R6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define fold-right [R6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define fold-right [R6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define fold-right [R6/56] (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] fold-right ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] fold-right [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] fold-right ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] fold-right ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] fold-right [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] fold-right ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (fold-right) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (fold-right) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (fold-right) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (fold-right) ((lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (fold-right) ((lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (fold-right) ((lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [R4/28] quote fold-right ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [R4/28] quote fold-right [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [R4/28] quote fold-right ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [R4/28] (quote fold-right) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
	2	GLOBAL_SET	fold-right
	3	STACK_POP
	4	PUSH_CONST	fold-right
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fold-right
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	fold-right
                                      1: [ fold-right ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (zip a b) (if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (zip a b) (if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (zip a b) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (zip a b) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (zip a b) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (zip a b) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (zip a b) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (zip a b) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] zip ]
[ 3]   1 : RETURN_VAL
                                      2: [ define zip ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define zip ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define zip [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define zip [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define zip [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define zip [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define zip [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define zip [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define zip [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define zip [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define zip [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define zip [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define zip [R6/56] (lambda) [R8/52] [R9/49] (zip a b) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define zip [R6/56] (lambda) [R8/52] [R9/49] (zip a b) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define zip [R6/56] (lambda) [R8/52] [R9/49] (zip a b) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define zip [R6/56] (lambda) [R8/52] [R9/49] (a b) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define zip [R6/56] (lambda) [R8/52] (a b) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define zip [R6/56] (lambda) [R8/52] (a b) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define zip [R6/56] (lambda) [R8/52] (a b) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define zip [R6/56] (lambda) [R8/52] (a b) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define zip [R6/56] (lambda) [R8/52] ((a b)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define zip [R6/56] (lambda) ((a b)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define zip [R6/56] (lambda) ((a b)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define zip [R6/56] (lambda) ((a b)) ((if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define zip [R6/56] (lambda) ((a b)) ((if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define zip [R6/56] (lambda) ((a b)) ((if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define zip [R6/56] (lambda (a b) (if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define zip (lambda (a b) (if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define zip (lambda (a b) (if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define zip (lambda (a b) (if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define zip (lambda (a b) (if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define zip (lambda (a b) (if (or (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"R6"	51
	43	SAVE_RETURN	"R7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"R7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"R6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ (null? a) (null? b) ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] ((null? b)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((null? b)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((null? b)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] ((null? b)) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] ((null? b)) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] ((null? b)) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [R4/30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if* [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if*) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if*) [R5/35] (null? a) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [R5/35] (null? a) [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [R5/35] (null? a) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [R5/35] ((null? a)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) ((null? a)) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if*) ((null? a)) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if*) ((null? a)) ((null? b)) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) ((null? a)) ((null? b)) [Closure/core:append] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) ((null? a)) ((null? b)) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* (null? a) (null? b)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] zip ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] zip [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] zip ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] zip ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] zip [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] zip ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (zip) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (zip) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (zip) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (zip) ((lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (zip) ((lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (zip) ((lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) [R4/28] quote zip ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) [R4/28] quote zip [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) [R4/28] quote zip ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) [R4/28] (quote zip) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) (quote zip) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) (quote zip) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) (quote zip) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) (quote zip) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! zip (lambda (a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))) (quote zip)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (zip a b) (if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))
	2	GLOBAL_SET	zip
	3	STACK_POP
	4	PUSH_CONST	zip
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (if* (null? a) (null? b)) (quote ()) (cons (list (car a) (car b)) (zip (cdr a) (cdr b)))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	zip
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	zip
                                      1: [ zip ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (reverse lst) (define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ())))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      3: [ (reverse lst) (define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ())) ]
[ 3]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (reverse lst) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (reverse lst) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (reverse lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (reverse lst) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (reverse lst) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (reverse lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] reverse ]
[ 3]   1 : RETURN_VAL
                                      2: [ define reverse ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define reverse ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define reverse [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define reverse [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define reverse [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define reverse [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define reverse [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define reverse [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define reverse [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define reverse [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define reverse [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define reverse [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define reverse [R6/56] (lambda) [R8/52] [R9/49] (reverse lst) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define reverse [R6/56] (lambda) [R8/52] [R9/49] (reverse lst) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define reverse [R6/56] (lambda) [R8/52] [R9/49] (reverse lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define reverse [R6/56] (lambda) [R8/52] [R9/49] (lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define reverse [R6/56] (lambda) [R8/52] (lst) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define reverse [R6/56] (lambda) [R8/52] (lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define reverse [R6/56] (lambda) [R8/52] (lst) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define reverse [R6/56] (lambda) [R8/52] (lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define reverse [R6/56] (lambda) [R8/52] ((lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define reverse [R6/56] (lambda) ((lst)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define reverse [R6/56] (lambda) ((lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define reverse [R6/56] (lambda) ((lst)) ((define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ()))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define reverse [R6/56] (lambda) ((lst)) ((define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ()))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define reverse [R6/56] (lambda) ((lst)) ((define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ()))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define reverse [R6/56] (lambda (lst) (define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ()))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define reverse (lambda (lst) (define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ()))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define reverse (lambda (lst) (define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ()))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define reverse (lambda (lst) (define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ()))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define reverse (lambda (lst) (define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ()))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define reverse (lambda (lst) (define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ())))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (helper lst result) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (helper lst result) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (helper lst result) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (helper lst result) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (helper lst result) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (helper lst result) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] helper ]
[ 3]   1 : RETURN_VAL
                                      2: [ define helper ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define helper ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define helper [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define helper [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define helper [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define helper [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define helper [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define helper [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define helper [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define helper [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define helper [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define helper [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define helper [R6/56] (lambda) [R8/52] [R9/49] (helper lst result) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define helper [R6/56] (lambda) [R8/52] [R9/49] (helper lst result) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define helper [R6/56] (lambda) [R8/52] [R9/49] (helper lst result) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define helper [R6/56] (lambda) [R8/52] [R9/49] (lst result) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define helper [R6/56] (lambda) [R8/52] (lst result) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define helper [R6/56] (lambda) [R8/52] (lst result) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define helper [R6/56] (lambda) [R8/52] (lst result) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define helper [R6/56] (lambda) [R8/52] (lst result) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define helper [R6/56] (lambda) [R8/52] ((lst result)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define helper [R6/56] (lambda) ((lst result)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define helper [R6/56] (lambda) ((lst result)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define helper [R6/56] (lambda) ((lst result)) ((if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define helper [R6/56] (lambda) ((lst result)) ((if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define helper [R6/56] (lambda) ((lst result)) ((if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define helper [R6/56] (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ()))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] reverse ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] reverse [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] reverse ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] reverse ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] reverse [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] reverse ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (reverse) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (reverse) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (reverse) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (reverse) ((lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (reverse) ((lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (reverse) ((lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) [R4/28] quote reverse ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) [R4/28] quote reverse [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) [R4/28] quote reverse ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) [R4/28] (quote reverse) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) (quote reverse) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) (quote reverse) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) (quote reverse) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) (quote reverse) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! reverse (lambda (lst) (define helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (helper lst (quote ())))) (quote reverse)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] helper ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] helper [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] helper ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] helper ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] helper [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] helper ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (helper) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (helper) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (helper) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (helper) ((lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (helper) ((lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (helper) ((lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) [R4/28] quote helper ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) [R4/28] quote helper [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) [R4/28] quote helper ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) [R4/28] (quote helper) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (quote helper) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (quote helper) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (quote helper) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (quote helper) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (quote helper)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (reverse lst) (define (helper lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result)))) (helper lst (quote ()))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (quote helper)) (helper lst (quote ())))
	2	GLOBAL_SET	reverse
	3	STACK_POP
	4	PUSH_CONST	reverse
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((begin (set! helper (lambda (lst result) (if (null? lst) result (helper (cdr lst) (cons (car lst) result))))) (quote helper)) (helper lst (quote ())))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	reverse
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	reverse
                                      1: [ reverse ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (index-of elt lst) (letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0)))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (index-of elt lst) (letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (index-of elt lst) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (index-of elt lst) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (index-of elt lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (index-of elt lst) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (index-of elt lst) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (index-of elt lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] index-of ]
[ 3]   1 : RETURN_VAL
                                      2: [ define index-of ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define index-of ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define index-of [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define index-of [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define index-of [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define index-of [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define index-of [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define index-of [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define index-of [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define index-of [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define index-of [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define index-of [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define index-of [R6/56] (lambda) [R8/52] [R9/49] (index-of elt lst) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define index-of [R6/56] (lambda) [R8/52] [R9/49] (index-of elt lst) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define index-of [R6/56] (lambda) [R8/52] [R9/49] (index-of elt lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define index-of [R6/56] (lambda) [R8/52] [R9/49] (elt lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define index-of [R6/56] (lambda) [R8/52] (elt lst) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define index-of [R6/56] (lambda) [R8/52] (elt lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define index-of [R6/56] (lambda) [R8/52] (elt lst) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define index-of [R6/56] (lambda) [R8/52] (elt lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define index-of [R6/56] (lambda) [R8/52] ((elt lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define index-of [R6/56] (lambda) ((elt lst)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define index-of [R6/56] (lambda) ((elt lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define index-of [R6/56] (lambda) ((elt lst)) ((letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define index-of [R6/56] (lambda) ((elt lst)) ((letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define index-of [R6/56] (lambda) ((elt lst)) ((letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define index-of [R6/56] (lambda (elt lst) (letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define index-of (lambda (elt lst) (letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define index-of (lambda (elt lst) (letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define index-of (lambda (elt lst) (letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define index-of (lambda (elt lst) (letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define index-of (lambda (elt lst) (letrec ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	15
	7	SAVE_RETURN	"R2"	12
	8	MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
	9	LOCAL_GET	0	0	; bindings
	10	GLOBAL_GET	map
	11	JMP_CLOSURE	2
12	LABEL	"R2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	LABEL	"R1"
	16	SAVE_RETURN	"R4"	21
	17	MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
	18	LOCAL_GET	0	0	; bindings
	19	GLOBAL_GET	map
	20	JMP_CLOSURE	2
21	LABEL	"R4"
	22	LOCAL_GET	0	1	; body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      2: [ ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) (helper lst elt 0) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	let
                                      2: [ [R0/5] let ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R0/5] let [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] let ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/5] (let) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (let) ]
[ 1]   5 : LABEL	"R0"
                                      1: [ (let) ]
[ 1]   6 : SAVE_RETURN	"R1"	15
                                      2: [ (let) [R1/15] ]
[ 2]   7 : SAVE_RETURN	"R2"	12
                                      3: [ (let) [R1/15] [R2/12] ]
[ 3]   8 : MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
                                      4: [ (let) [R1/15] [R2/12] [Closure] ]
[ 4]   9 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ]
[ 5]  10 : GLOBAL_GET	map
                                      6: [ (let) [R1/15] [R2/12] [Closure] ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) [Closure/core:map] ]
[ 6]  11 : JMP_CLOSURE	2
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] helper ]
[ 2]   1 : RETURN_VAL
                                      1: [ helper ]
[ 1]   5 : LABEL	"R3"
                                      1: [ helper ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ helper () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ helper () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ helper () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (helper ()) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) [R1/15] [R2/12] ((helper ())) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) [R1/15] ((helper ())) ]
[ 3]  12 : LABEL	"R2"
                                      3: [ (let) [R1/15] ((helper ())) ]
[ 3]  13 : GLOBAL_GET	list
                                      4: [ (let) [R1/15] ((helper ())) [Closure/core:list] ]
[ 4]  14 : JMP_CLOSURE	1
                                      3: [ (let) [R1/15] ((helper ())) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (let) [R1/15] (((helper ()))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (let) (((helper ()))) ]
[ 2]  15 : LABEL	"R1"
                                      2: [ (let) (((helper ()))) ]
[ 2]  16 : SAVE_RETURN	"R4"	21
                                      3: [ (let) (((helper ()))) [R4/21] ]
[ 3]  17 : MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
                                      4: [ (let) (((helper ()))) [R4/21] [Closure] ]
[ 4]  18 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) (((helper ()))) [R4/21] [Closure] ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ]
[ 5]  19 : GLOBAL_GET	map
                                      6: [ (let) (((helper ()))) [R4/21] [Closure] ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) [Closure/core:map] ]
[ 6]  20 : JMP_CLOSURE	2
                                      5: [ (let) (((helper ()))) [R4/21] [Closure] ((helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) (((helper ()))) [R4/21] ((set! helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) (((helper ()))) ((set! helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ]
[ 3]  21 : LABEL	"R4"
                                      3: [ (let) (((helper ()))) ((set! helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ]
[ 3]  22 : LOCAL_GET	0	1	; body
                                      4: [ (let) (((helper ()))) ((set! helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ((helper lst elt 0)) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (let) (((helper ()))) ((set! helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ((helper lst elt 0)) [Closure/core:append] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (let) (((helper ()))) ((set! helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)))))) ((helper lst elt 0)) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (let ((helper ())) (set! helper (lambda (l e i) (cond ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1))))) (helper lst elt 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      3: [ ((null? l) l) ((= e (first l)) i) (helper (rest l) e (+ i 1)) ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (((= e (first l)) i) (helper (rest l) e (+ i 1))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (((= e (first l)) i) (helper (rest l) e (+ i 1))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (((= e (first l)) i) (helper (rest l) e (+ i 1))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((null? l) l) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((null? l) l) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((null? l) l) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (null? l) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (null? l) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (null? l) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (null? l) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (null? l) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (null? l) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (null? l) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (null? l) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (null? l) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (null? l) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (null? l) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (null? l) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (null? l) [R2/31] (begin) [R4/28] ((null? l) l) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (null? l) [R2/31] (begin) [R4/28] ((null? l) l) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (null? l) [R2/31] (begin) [R4/28] ((null? l) l) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (null? l) [R2/31] (begin) [R4/28] (l) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (null? l) [R2/31] (begin) (l) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (null? l) [R2/31] (begin) (l) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (null? l) [R2/31] (begin) (l) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (null? l) [R2/31] (begin) (l) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (null? l) [R2/31] (begin l) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (null? l) (begin l) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (null? l) (begin l) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (null? l) (begin l) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (null? l) (begin l) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (null? l) (begin l) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (null? l) (begin l) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (null? l) (begin l) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (null? l) (begin l) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (null? l) (begin l) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (null? l) (begin l) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (null? l) (begin l) [R5/41] (cond) (((= e (first l)) i) (helper (rest l) e (+ i 1))) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (null? l) (begin l) [R5/41] (cond) (((= e (first l)) i) (helper (rest l) e (+ i 1))) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (null? l) (begin l) [R5/41] (cond) (((= e (first l)) i) (helper (rest l) e (+ i 1))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (null? l) (begin l) [R5/41] (cond ((= e (first l)) i) (helper (rest l) e (+ i 1))) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (null? l) (begin l) (cond ((= e (first l)) i) (helper (rest l) e (+ i 1))) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (null? l) (begin l) (cond ((= e (first l)) i) (helper (rest l) e (+ i 1))) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (null? l) (begin l) (cond ((= e (first l)) i) (helper (rest l) e (+ i 1))) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (null? l) (begin l) (cond ((= e (first l)) i) (helper (rest l) e (+ i 1))) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (null? l) (begin l) (cond ((= e (first l)) i) (helper (rest l) e (+ i 1)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      2: [ ((= e (first l)) i) (helper (rest l) e (+ i 1)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] ((helper (rest l) e (+ i 1))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((helper (rest l) e (+ i 1))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((helper (rest l) e (+ i 1))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((= e (first l)) i) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((= e (first l)) i) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((= e (first l)) i) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (= e (first l)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= e (first l)) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (= e (first l)) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (= e (first l)) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (= e (first l)) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (= e (first l)) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (= e (first l)) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (= e (first l)) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= e (first l)) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= e (first l)) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (= e (first l)) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (= e (first l)) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (= e (first l)) [R2/31] (begin) [R4/28] ((= e (first l)) i) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (= e (first l)) [R2/31] (begin) [R4/28] ((= e (first l)) i) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (= e (first l)) [R2/31] (begin) [R4/28] ((= e (first l)) i) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= e (first l)) [R2/31] (begin) [R4/28] (i) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= e (first l)) [R2/31] (begin) (i) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (= e (first l)) [R2/31] (begin) (i) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (= e (first l)) [R2/31] (begin) (i) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (= e (first l)) [R2/31] (begin) (i) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= e (first l)) [R2/31] (begin i) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= e (first l)) (begin i) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (= e (first l)) (begin i) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (= e (first l)) (begin i) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (= e (first l)) (begin i) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (= e (first l)) (begin i) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (= e (first l)) (begin i) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (= e (first l)) (begin i) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= e (first l)) (begin i) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= e (first l)) (begin i) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (= e (first l)) (begin i) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (= e (first l)) (begin i) [R5/41] (cond) ((helper (rest l) e (+ i 1))) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (= e (first l)) (begin i) [R5/41] (cond) ((helper (rest l) e (+ i 1))) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (= e (first l)) (begin i) [R5/41] (cond) ((helper (rest l) e (+ i 1))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= e (first l)) (begin i) [R5/41] (cond (helper (rest l) e (+ i 1))) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= e (first l)) (begin i) (cond (helper (rest l) e (+ i 1))) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (= e (first l)) (begin i) (cond (helper (rest l) e (+ i 1))) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (= e (first l)) (begin i) (cond (helper (rest l) e (+ i 1))) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (= e (first l)) (begin i) (cond (helper (rest l) e (+ i 1))) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= e (first l)) (begin i) (cond (helper (rest l) e (+ i 1)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      1: [ (helper (rest l) e (+ i 1)) ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ begin (helper (rest l) e (+ i 1)) ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ begin (helper (rest l) e (+ i 1)) [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	2
                                      2: [ begin (helper (rest l) e (+ i 1)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (helper (rest l) e (+ i 1))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] index-of ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] index-of [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] index-of ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] index-of ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] index-of [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] index-of ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (index-of) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (index-of) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (index-of) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (index-of) ((lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (index-of) ((lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (index-of) ((lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) [R4/28] quote index-of ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) [R4/28] quote index-of [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) [R4/28] quote index-of ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) [R4/28] (quote index-of) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) (quote index-of) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) (quote index-of) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) (quote index-of) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) (quote index-of) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! index-of (lambda (elt lst) (let ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)))) (quote index-of)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((helper ())) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0) ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((helper ())) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((helper ())) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((helper ())) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (helper ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ helper ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (helper) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (helper) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (helper) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (helper) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (helper) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((helper)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((helper)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((helper)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((helper)) ((set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((helper)) ((set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((helper)) ((set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) [R5/30] [Closure/core:cadr] ((helper ())) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) [R5/30] [Closure/core:cadr] ((helper ())) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) [R5/30] [Closure/core:cadr] ((helper ())) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (helper ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) [R5/30] (()) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) (()) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) (()) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) (()) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))) (()) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (index-of elt lst) (letrec ((helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1)))))))) (helper lst elt 0))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; (((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) ()))
	2	GLOBAL_SET	index-of
	3	STACK_POP
	4	PUSH_CONST	index-of
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; (((lambda (helper) (set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0)) ()))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	index-of
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	index-of
                                      1: [ index-of ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (defmacro chain-list (lst) (let* ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)))
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"R2"	25
                                      2: [ let [R2/25] ]
[ 2]  18 : SAVE_RETURN	"R3"	22
                                      3: [ let [R2/25] [R3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [R2/25] [R3/22] ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [R2/25] [R3/22] ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [R2/25] [R3/22] ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [R2/25] [R3/22] (var (gensym)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R2/25] (var (gensym)) ]
[ 3]  22 : LABEL	"R3"
                                      3: [ let [R2/25] (var (gensym)) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [R2/25] (var (gensym)) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [R2/25] (var (gensym)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R2/25] ((var (gensym))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((var (gensym))) ]
[ 2]  25 : LABEL	"R2"
                                      2: [ let ((var (gensym))) ]
[ 2]  26 : SAVE_RETURN	"R4"	44
                                      3: [ let ((var (gensym))) [R4/44] ]
[ 3]  27 : SAVE_RETURN	"R5"	31
                                      4: [ let ((var (gensym))) [R4/44] [R5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((var (gensym))) [R4/44] [R5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((var (gensym))) [R4/44] [R5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((var (gensym))) [R4/44] [R5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((var (gensym))) [R4/44] [R5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((var (gensym))) [R4/44] (let*) ]
[ 4]  31 : LABEL	"R5"
                                      4: [ let ((var (gensym))) [R4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"R6"	40
                                      5: [ let ((var (gensym))) [R4/44] (let*) [R6/40] ]
[ 5]  33 : SAVE_RETURN	"R7"	37
                                      6: [ let ((var (gensym))) [R4/44] (let*) [R6/40] [R7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((var (gensym))) [R4/44] (let*) [R6/40] [R7/37] ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((var (gensym))) [R4/44] (let*) [R6/40] [R7/37] ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((var (gensym))) [R4/44] (let*) [R6/40] [R7/37] ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((var (gensym))) [R4/44] (let*) [R6/40] [R7/37] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((var (gensym))) [R4/44] (let*) [R6/40] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 6]  37 : LABEL	"R7"
                                      6: [ let ((var (gensym))) [R4/44] (let*) [R6/40] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((var (gensym))) [R4/44] (let*) [R6/40] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((var (gensym))) [R4/44] (let*) [R6/40] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((var (gensym))) [R4/44] (let*) [R6/40] (((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((var (gensym))) [R4/44] (let*) (((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ]
[ 5]  40 : LABEL	"R6"
                                      5: [ let ((var (gensym))) [R4/44] (let*) (((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((var (gensym))) [R4/44] (let*) (((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ((list (quote lambda) (list var) bodytext)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((var (gensym))) [R4/44] (let*) (((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ((list (quote lambda) (list var) bodytext)) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((var (gensym))) [R4/44] (let*) (((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ((list (quote lambda) (list var) bodytext)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((var (gensym))) [R4/44] (let* ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((var (gensym))) (let* ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) ]
[ 3]  44 : LABEL	"R4"
                                      3: [ let ((var (gensym))) (let* ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((var (gensym))) (let* ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((var (gensym))) (let* ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((var (gensym))) (let* ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"R2"	25
                                      2: [ let [R2/25] ]
[ 2]  18 : SAVE_RETURN	"R3"	22
                                      3: [ let [R2/25] [R3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [R2/25] [R3/22] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [R2/25] [R3/22] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [R2/25] [R3/22] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [R2/25] [R3/22] (args (reverse (eval lst))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R2/25] (args (reverse (eval lst))) ]
[ 3]  22 : LABEL	"R3"
                                      3: [ let [R2/25] (args (reverse (eval lst))) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [R2/25] (args (reverse (eval lst))) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [R2/25] (args (reverse (eval lst))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R2/25] ((args (reverse (eval lst)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((args (reverse (eval lst)))) ]
[ 2]  25 : LABEL	"R2"
                                      2: [ let ((args (reverse (eval lst)))) ]
[ 2]  26 : SAVE_RETURN	"R4"	44
                                      3: [ let ((args (reverse (eval lst)))) [R4/44] ]
[ 3]  27 : SAVE_RETURN	"R5"	31
                                      4: [ let ((args (reverse (eval lst)))) [R4/44] [R5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((args (reverse (eval lst)))) [R4/44] [R5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((args (reverse (eval lst)))) [R4/44] [R5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((args (reverse (eval lst)))) [R4/44] [R5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((args (reverse (eval lst)))) [R4/44] [R5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((args (reverse (eval lst)))) [R4/44] (let*) ]
[ 4]  31 : LABEL	"R5"
                                      4: [ let ((args (reverse (eval lst)))) [R4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"R6"	40
                                      5: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] ]
[ 5]  33 : SAVE_RETURN	"R7"	37
                                      6: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] [R7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] [R7/37] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] [R7/37] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] [R7/37] ((args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] [R7/37] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 6]  37 : LABEL	"R7"
                                      6: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((args (reverse (eval lst)))) [R4/44] (let*) [R6/40] (((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((args (reverse (eval lst)))) [R4/44] (let*) (((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ]
[ 5]  40 : LABEL	"R6"
                                      5: [ let ((args (reverse (eval lst)))) [R4/44] (let*) (((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((args (reverse (eval lst)))) [R4/44] (let*) (((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ((list (quote lambda) (list var) bodytext)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((args (reverse (eval lst)))) [R4/44] (let*) (((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ((list (quote lambda) (list var) bodytext)) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((args (reverse (eval lst)))) [R4/44] (let*) (((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))))) ((list (quote lambda) (list var) bodytext)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((args (reverse (eval lst)))) [R4/44] (let* ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((args (reverse (eval lst)))) (let* ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) ]
[ 3]  44 : LABEL	"R4"
                                      3: [ let ((args (reverse (eval lst)))) (let* ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((args (reverse (eval lst)))) (let* ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((args (reverse (eval lst)))) (let* ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((args (reverse (eval lst)))) (let* ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"R2"	25
                                      2: [ let [R2/25] ]
[ 2]  18 : SAVE_RETURN	"R3"	22
                                      3: [ let [R2/25] [R3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [R2/25] [R3/22] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [R2/25] [R3/22] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [R2/25] [R3/22] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [R2/25] [R3/22] (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R2/25] (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 3]  22 : LABEL	"R3"
                                      3: [ let [R2/25] (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [R2/25] (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [R2/25] (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R2/25] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 2]  25 : LABEL	"R2"
                                      2: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 2]  26 : SAVE_RETURN	"R4"	44
                                      3: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] ]
[ 3]  27 : SAVE_RETURN	"R5"	31
                                      4: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] [R5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] [R5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] [R5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] [R5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] [R5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) ]
[ 4]  31 : LABEL	"R5"
                                      4: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"R6"	40
                                      5: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] ]
[ 5]  33 : SAVE_RETURN	"R7"	37
                                      6: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] [R7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] [R7/37] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] [R7/37] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] [R7/37] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] [R7/37] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] () ]
[ 6]  37 : LABEL	"R7"
                                      6: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] () ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] () [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) [R6/40] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) (()) ]
[ 5]  40 : LABEL	"R6"
                                      5: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) (()) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) (()) ((list (quote lambda) (list var) bodytext)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) (()) ((list (quote lambda) (list var) bodytext)) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let*) (()) ((list (quote lambda) (list var) bodytext)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [R4/44] (let* () (list (quote lambda) (list var) bodytext)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (let* () (list (quote lambda) (list var) bodytext)) ]
[ 3]  44 : LABEL	"R4"
                                      3: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (let* () (list (quote lambda) (list var) bodytext)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (let* () (list (quote lambda) (list var) bodytext)) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (let* () (list (quote lambda) (list var) bodytext)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (let* () (list (quote lambda) (list var) bodytext))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ () (list (quote lambda) (list var) bodytext) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R1"	11
                                      1: [ [R1/11] ]
[ 1]   8 : PUSH_CONST	begin
                                      2: [ [R1/11] begin ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [R1/11] begin [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [R1/11] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R1/11] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  11 : LABEL	"R1"
                                      1: [ (begin) ]
[ 1]  12 : LOCAL_GET	0	1	; body
                                      2: [ (begin) ((list (quote lambda) (list var) bodytext)) ]
[ 2]  13 : GLOBAL_GET	append
                                      3: [ (begin) ((list (quote lambda) (list var) bodytext)) [Closure/core:append] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (begin) ((list (quote lambda) (list var) bodytext)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (list (quote lambda) (list var) bodytext)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((var (gensym))) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((var (gensym))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((var (gensym))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((var (gensym))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (var (gensym)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ var ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (var) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (var) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (var) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (var) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (var) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((var)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((var)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((var)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((var)) ((let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((var)) ((let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((var)) ((let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) [R5/30] [Closure/core:cadr] ((var (gensym))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) [R5/30] [Closure/core:cadr] ((var (gensym))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) [R5/30] [Closure/core:cadr] ((var (gensym))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (var (gensym)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (gensym) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) [R5/30] ((gensym)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) ((gensym)) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) ((gensym)) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) ((gensym)) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))) ((gensym)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (var) (let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) (gensym)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((args (reverse (eval lst)))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((args (reverse (eval lst)))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((args (reverse (eval lst)))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (args (reverse (eval lst))) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ args ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (args) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (args) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (args) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (args) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (args) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((args)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((args)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((args)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((args)) ((let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((args)) ((let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((args)) ((let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) [R5/30] [Closure/core:cadr] ((args (reverse (eval lst)))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) [R5/30] [Closure/core:cadr] ((args (reverse (eval lst)))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) [R5/30] [Closure/core:cadr] ((args (reverse (eval lst)))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (args (reverse (eval lst))) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (reverse (eval lst)) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) [R5/30] ((reverse (eval lst))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ((reverse (eval lst))) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ((reverse (eval lst))) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ((reverse (eval lst))) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))) ((reverse (eval lst))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (args) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))) (reverse (eval lst))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ bodytext ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (bodytext) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (bodytext) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (bodytext) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (bodytext) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (bodytext) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((bodytext)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((bodytext)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((bodytext)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((bodytext)) ((begin (list (quote lambda) (list var) bodytext))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((bodytext)) ((begin (list (quote lambda) (list var) bodytext))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((bodytext)) ((begin (list (quote lambda) (list var) bodytext))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (bodytext) (begin (list (quote lambda) (list var) bodytext))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (bodytext) (begin (list (quote lambda) (list var) bodytext))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (bodytext) (begin (list (quote lambda) (list var) bodytext))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (bodytext) (begin (list (quote lambda) (list var) bodytext))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (bodytext) (begin (list (quote lambda) (list var) bodytext))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) [R5/30] [Closure/core:cadr] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) [R5/30] [Closure/core:cadr] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) [R5/30] [Closure/core:cadr] ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) [R5/30] ((eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) ((eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) ((eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) ((eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext)))) ((eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (bodytext) (begin (list (quote lambda) (list var) bodytext))) (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((defmacro chain-list (lst) (let* ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro chain (first . rest) (list (quote chain-list) (list (quote quote) (cons first rest))))
Executing:  
	CODE BLOCK ; () => ((defmacro chain (first . rest) (list (quote chain-list) (list (quote quote) (cons first rest)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (package-set "record")
Executing:  
	CODE BLOCK ; () => ((package-set "record"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"record"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"record"
                                      1: [ "record" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "record" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "record" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "record" ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (package-export (quote (record? define-record-type)))
Executing:  
	CODE BLOCK ; () => ((package-export (quote (record? define-record-type))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(record? define-record-type)
	2	GLOBAL_GET	package-export
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(record? define-record-type)
                                      1: [ (record? define-record-type) ]
[ 1]   2 : GLOBAL_GET	package-export
                                      2: [ (record? define-record-type) [Closure/core:package-export] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (record? define-record-type) ]
[ 1]   0 : CALL_PRIMOP	"package-export"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (define (record-type-vector? v) (and (vector? v) (= (vector-length v) 3)))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-type-vector? v) (and (vector? v) (= (vector-length v) 3)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-type-vector? v) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-type-vector? v) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-type-vector? v) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-type-vector? v) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-type-vector? v) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-type-vector? v) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-type-vector? ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-type-vector? ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-type-vector? ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-type-vector? [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-type-vector? [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-type-vector? [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-type-vector? [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-type-vector? [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-type-vector? [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-type-vector? [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-type-vector? [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-type-vector? [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-type-vector? [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-type-vector? [R6/56] (lambda) [R8/52] [R9/49] (record-type-vector? v) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-type-vector? [R6/56] (lambda) [R8/52] [R9/49] (record-type-vector? v) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-type-vector? [R6/56] (lambda) [R8/52] [R9/49] (record-type-vector? v) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-type-vector? [R6/56] (lambda) [R8/52] [R9/49] (v) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-type-vector? [R6/56] (lambda) [R8/52] (v) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-type-vector? [R6/56] (lambda) [R8/52] (v) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-type-vector? [R6/56] (lambda) [R8/52] (v) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-type-vector? [R6/56] (lambda) [R8/52] (v) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-type-vector? [R6/56] (lambda) [R8/52] ((v)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-type-vector? [R6/56] (lambda) ((v)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-type-vector? [R6/56] (lambda) ((v)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-type-vector? [R6/56] (lambda) ((v)) ((and (vector? v) (= (vector-length v) 3))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-type-vector? [R6/56] (lambda) ((v)) ((and (vector? v) (= (vector-length v) 3))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-type-vector? [R6/56] (lambda) ((v)) ((and (vector? v) (= (vector-length v) 3))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-type-vector? [R6/56] (lambda (v) (and (vector? v) (= (vector-length v) 3))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-type-vector? (lambda (v) (and (vector? v) (= (vector-length v) 3))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-type-vector? (lambda (v) (and (vector? v) (= (vector-length v) 3))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-type-vector? (lambda (v) (and (vector? v) (= (vector-length v) 3))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-type-vector? (lambda (v) (and (vector? v) (= (vector-length v) 3))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-type-vector? (lambda (v) (and (vector? v) (= (vector-length v) 3)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ (vector? v) (= (vector-length v) 3) ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] ((= (vector-length v) 3)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((= (vector-length v) 3)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((= (vector-length v) 3)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] ((= (vector-length v) 3)) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] ((= (vector-length v) 3)) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] ((= (vector-length v) 3)) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [R4/30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if) [R5/35] (vector? v) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [R5/35] (vector? v) [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [R5/35] (vector? v) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [R5/35] ((vector? v)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) ((vector? v)) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if) ((vector? v)) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if) ((vector? v)) ((= (vector-length v) 3)) ]
[ 3]  37 : SAVE_RETURN	"R6"	41
                                      4: [ (if) ((vector? v)) ((= (vector-length v) 3)) [R6/41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) ((vector? v)) ((= (vector-length v) 3)) [R6/41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) ((vector? v)) ((= (vector-length v) 3)) [R6/41] #f [Closure/core:list] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) ((vector? v)) ((= (vector-length v) 3)) [R6/41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) ((vector? v)) ((= (vector-length v) 3)) [R6/41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) ((vector? v)) ((= (vector-length v) 3)) (#f) ]
[ 4]  41 : LABEL	"R6"
                                      4: [ (if) ((vector? v)) ((= (vector-length v) 3)) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) ((vector? v)) ((= (vector-length v) 3)) (#f) [Closure/core:append] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) ((vector? v)) ((= (vector-length v) 3)) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if (vector? v) (= (vector-length v) 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-type-vector? ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-type-vector? [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-type-vector? ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-vector? ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-type-vector? [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-vector? ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-type-vector?) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-type-vector?) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-type-vector?) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-type-vector?) ((lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-type-vector?) ((lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-type-vector?) ((lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) [R4/28] quote record-type-vector? ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) [R4/28] quote record-type-vector? [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) [R4/28] quote record-type-vector? ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) [R4/28] (quote record-type-vector?) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) (quote record-type-vector?) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) (quote record-type-vector?) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) (quote record-type-vector?) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) (quote record-type-vector?) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-type-vector? (lambda (v) (if (vector? v) (= (vector-length v) 3) #f))) (quote record-type-vector?)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-type-vector? v) (and (vector? v) (= (vector-length v) 3))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (vector? v) (= (vector-length v) 3) #f))
	2	GLOBAL_SET	record-type-vector?
	3	STACK_POP
	4	PUSH_CONST	record-type-vector?
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (vector? v) (= (vector-length v) 3) #f))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-type-vector?
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-type-vector?
                                      1: [ record-type-vector? ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (make-record-type name field-name-list) (let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (make-record-type name field-name-list) (let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (make-record-type name field-name-list) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (make-record-type name field-name-list) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (make-record-type name field-name-list) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (make-record-type name field-name-list) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (make-record-type name field-name-list) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (make-record-type name field-name-list) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] make-record-type ]
[ 3]   1 : RETURN_VAL
                                      2: [ define make-record-type ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define make-record-type ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define make-record-type [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define make-record-type [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define make-record-type [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define make-record-type [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define make-record-type [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define make-record-type [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define make-record-type [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define make-record-type [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define make-record-type [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define make-record-type [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define make-record-type [R6/56] (lambda) [R8/52] [R9/49] (make-record-type name field-name-list) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define make-record-type [R6/56] (lambda) [R8/52] [R9/49] (make-record-type name field-name-list) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define make-record-type [R6/56] (lambda) [R8/52] [R9/49] (make-record-type name field-name-list) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define make-record-type [R6/56] (lambda) [R8/52] [R9/49] (name field-name-list) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define make-record-type [R6/56] (lambda) [R8/52] (name field-name-list) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define make-record-type [R6/56] (lambda) [R8/52] (name field-name-list) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define make-record-type [R6/56] (lambda) [R8/52] (name field-name-list) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define make-record-type [R6/56] (lambda) [R8/52] (name field-name-list) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define make-record-type [R6/56] (lambda) [R8/52] ((name field-name-list)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define make-record-type [R6/56] (lambda) ((name field-name-list)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define make-record-type [R6/56] (lambda) ((name field-name-list)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define make-record-type [R6/56] (lambda) ((name field-name-list)) ((let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define make-record-type [R6/56] (lambda) ((name field-name-list)) ((let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define make-record-type [R6/56] (lambda) ((name field-name-list)) ((let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define make-record-type [R6/56] (lambda (name field-name-list) (let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define make-record-type (lambda (name field-name-list) (let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define make-record-type (lambda (name field-name-list) (let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define make-record-type (lambda (name field-name-list) (let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define make-record-type (lambda (name field-name-list) (let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define make-record-type (lambda (name field-name-list) (let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      5: [ ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type ]
[ 5]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((type (make-vector 3))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((type (make-vector 3))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((type (make-vector 3))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (type (make-vector 3)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ type ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (type) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (type) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (type) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (type) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (type) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((type)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((type)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((type)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((type)) ((vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((type)) ((vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((type)) ((vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) [R5/30] [Closure/core:cadr] ((type (make-vector 3))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) [R5/30] [Closure/core:cadr] ((type (make-vector 3))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) [R5/30] [Closure/core:cadr] ((type (make-vector 3))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (type (make-vector 3)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (make-vector 3) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) [R5/30] ((make-vector 3)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ((make-vector 3)) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ((make-vector 3)) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ((make-vector 3)) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)) ((make-vector 3)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] make-record-type ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] make-record-type [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] make-record-type ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] make-record-type ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] make-record-type [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] make-record-type ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (make-record-type) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (make-record-type) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (make-record-type) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (make-record-type) ((lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (make-record-type) ((lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (make-record-type) ((lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) [R4/28] quote make-record-type ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) [R4/28] quote make-record-type [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) [R4/28] quote make-record-type ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) [R4/28] (quote make-record-type) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) (quote make-record-type) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) (quote make-record-type) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) (quote make-record-type) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) (quote make-record-type) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! make-record-type (lambda (name field-name-list) ((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))) (quote make-record-type)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"R6"	51
	43	SAVE_RETURN	"R7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"R7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"R6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ record-type type ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (type) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (type) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (type) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] (type) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] (type) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] (type) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [R4/30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if* [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if*) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if*) [R5/35] record-type ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [R5/35] record-type [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [R5/35] record-type ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [R5/35] (record-type) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) (record-type) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if*) (record-type) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if*) (record-type) (type) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) (record-type) (type) [Closure/core:append] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) (record-type) (type) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* record-type type) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (make-record-type name field-name-list) (let ((type (make-vector 3))) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; (((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))
	2	GLOBAL_SET	make-record-type
	3	STACK_POP
	4	PUSH_CONST	make-record-type
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; (((lambda (type) (vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type) (make-vector 3)))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	make-record-type
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	make-record-type
                                      1: [ make-record-type ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define record-type (make-record-type (quote record-type) 0))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-type (make-record-type (quote record-type) 0) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-type ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-type [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-type ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-type ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-type [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-type ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-type) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-type) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-type) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-type) ((make-record-type (quote record-type) 0)) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-type) ((make-record-type (quote record-type) 0)) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-type) ((make-record-type (quote record-type) 0)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-type (make-record-type (quote record-type) 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-type (make-record-type (quote record-type) 0)) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-type (make-record-type (quote record-type) 0)) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-type (make-record-type (quote record-type) 0)) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-type (make-record-type (quote record-type) 0)) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-type (make-record-type (quote record-type) 0)) [R4/28] quote record-type ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-type (make-record-type (quote record-type) 0)) [R4/28] quote record-type [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-type (make-record-type (quote record-type) 0)) [R4/28] quote record-type ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-type (make-record-type (quote record-type) 0)) [R4/28] (quote record-type) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-type (make-record-type (quote record-type) 0)) (quote record-type) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-type (make-record-type (quote record-type) 0)) (quote record-type) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-type (make-record-type (quote record-type) 0)) (quote record-type) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-type (make-record-type (quote record-type) 0)) (quote record-type) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-type (make-record-type (quote record-type) 0)) (quote record-type)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define record-type (make-record-type (quote record-type) 0)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	record-type
	3	PUSH_CONST	0
	4	GLOBAL_GET	make-record-type
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	GLOBAL_SET	record-type
	8	STACK_POP
	9	PUSH_CONST	record-type
	10	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : PUSH_CONST	record-type
                                      2: [ [R0/6] record-type ]
[ 2]   3 : PUSH_CONST	0
                                      3: [ [R0/6] record-type 0 ]
[ 3]   4 : GLOBAL_GET	make-record-type
                                      4: [ [R0/6] record-type 0 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] record-type 0 ]
[ 3]   0 : MAKE_ENV	2	; (name field-name-list)
                                      1: [ [R0/6] ]
[ 1]   1 : SAVE_RETURN	"R0"	5
                                      2: [ [R0/6] [R0/5] ]
[ 2]   2 : PUSH_CONST	3
                                      3: [ [R0/6] [R0/5] 3 ]
[ 3]   3 : GLOBAL_GET	make-vector
                                      4: [ [R0/6] [R0/5] 3 [Closure/core:make-vector] ]
[ 4]   4 : JMP_CLOSURE	1
                                      3: [ [R0/6] [R0/5] 3 ]
[ 3]   0 : CALL_PRIMOP	"make-vector"
                                      3: [ [R0/6] [R0/5] [Vector () () ()] ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/6] [Vector () () ()] ]
[ 2]   5 : LABEL	"R0"
                                      2: [ [R0/6] [Vector () () ()] ]
[ 2]   6 : MAKE_CLOSURE	[Closure]	; ((vector-set! type 0 (or record-type type)) (vector-set! type 1 name) (vector-set! type 2 field-name-list) type)
                                      3: [ [R0/6] [Vector () () ()] [Closure] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [R0/6] [Vector () () ()] ]
[ 2]   0 : MAKE_ENV	1	; (type)
                                      1: [ [R0/6] ]
[ 1]   1 : SAVE_RETURN	"R1"	12
                                      2: [ [R0/6] [R1/12] ]
[ 2]   2 : LOCAL_GET	0	0	; type
                                      3: [ [R0/6] [R1/12] [Vector () () ()] ]
[ 3]   3 : PUSH_CONST	0
                                      4: [ [R0/6] [R1/12] [Vector () () ()] 0 ]
[ 4]   4 : GLOBAL_GET	record-type
                                      5: [ [R0/6] [R1/12] [Vector () () ()] 0 () ]
[ 5]   5 : DUPLICATE
                                      6: [ [R0/6] [R1/12] [Vector () () ()] 0 () () ]
[ 6]   6 : JMP_IF_TRUE	"L2"	9
                                      5: [ [R0/6] [R1/12] [Vector () () ()] 0 () ]
[ 5]   7 : STACK_POP
                                      4: [ [R0/6] [R1/12] [Vector () () ()] 0 ]
[ 4]   8 : LOCAL_GET	0	0	; type
                                      5: [ [R0/6] [R1/12] [Vector () () ()] 0 [Vector () () ()] ]
[ 5]   9 : LABEL	"L2"
                                      5: [ [R0/6] [R1/12] [Vector () () ()] 0 [Vector () () ()] ]
[ 5]  10 : GLOBAL_GET	vector-set!
                                      6: [ [R0/6] [R1/12] [Vector () () ()] 0 [Vector () () ()] [Closure/core:vector-set!] ]
[ 6]  11 : JMP_CLOSURE	3
                                      5: [ [R0/6] [R1/12] [Vector () () ()] 0 [Vector () () ()] ]
[ 5]   0 : CALL_PRIMOP	"vector-set!"
                                      3: [ [R0/6] [R1/12] [Vector ... () ()] ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/6] [Vector ... () ()] ]
[ 2]  12 : LABEL	"R1"
                                      2: [ [R0/6] [Vector ... () ()] ]
[ 2]  13 : STACK_POP
                                      1: [ [R0/6] ]
[ 1]  14 : SAVE_RETURN	"R3"	20
                                      2: [ [R0/6] [R3/20] ]
[ 2]  15 : LOCAL_GET	0	0	; type
                                      3: [ [R0/6] [R3/20] [Vector ... () ()] ]
[ 3]  16 : PUSH_CONST	1
                                      4: [ [R0/6] [R3/20] [Vector ... () ()] 1 ]
[ 4]  17 : LOCAL_GET	1	0	; name
                                      5: [ [R0/6] [R3/20] [Vector ... () ()] 1 record-type ]
[ 5]  18 : GLOBAL_GET	vector-set!
                                      6: [ [R0/6] [R3/20] [Vector ... () ()] 1 record-type [Closure/core:vector-set!] ]
[ 6]  19 : JMP_CLOSURE	3
                                      5: [ [R0/6] [R3/20] [Vector ... () ()] 1 record-type ]
[ 5]   0 : CALL_PRIMOP	"vector-set!"
                                      3: [ [R0/6] [R3/20] record-type ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/6] record-type ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R0/6] record-type ]
[ 2]  21 : STACK_POP
                                      1: [ [R0/6] ]
[ 1]  22 : SAVE_RETURN	"R4"	28
                                      2: [ [R0/6] [R4/28] ]
[ 2]  23 : LOCAL_GET	0	0	; type
                                      3: [ [R0/6] [R4/28] [Vector ... record:record-type ()] ]
[ 3]  24 : PUSH_CONST	2
                                      4: [ [R0/6] [R4/28] [Vector ... record:record-type ()] 2 ]
[ 4]  25 : LOCAL_GET	1	1	; field-name-list
                                      5: [ [R0/6] [R4/28] [Vector ... record:record-type ()] 2 0 ]
[ 5]  26 : GLOBAL_GET	vector-set!
                                      6: [ [R0/6] [R4/28] [Vector ... record:record-type ()] 2 0 [Closure/core:vector-set!] ]
[ 6]  27 : JMP_CLOSURE	3
                                      5: [ [R0/6] [R4/28] [Vector ... record:record-type ()] 2 0 ]
[ 5]   0 : CALL_PRIMOP	"vector-set!"
                                      3: [ [R0/6] [R4/28] 0 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/6] 0 ]
[ 2]  28 : LABEL	"R4"
                                      2: [ [R0/6] 0 ]
[ 2]  29 : STACK_POP
                                      1: [ [R0/6] ]
[ 1]  30 : LOCAL_GET	0	0	; type
                                      2: [ [R0/6] [Vector ... record:record-type 0] ]
[ 2]  31 : RETURN_VAL
                                      1: [ [Vector ... record:record-type 0] ]
[ 1]   6 : LABEL	"R0"
                                      1: [ [Vector ... record:record-type 0] ]
[ 1]   7 : GLOBAL_SET	record-type
                                      1: [ [Vector ... record:record-type 0] ]
[ 1]   8 : STACK_POP
                                      0: [  ]
[ 0]   9 : PUSH_CONST	record-type
                                      1: [ record-type ]
[ 1]  10 : RETURN_VAL
ParseNext ==>  (define (record-type? type) (and (record-type-vector? type) (= (vector-get type 0) record-type)))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-type? type) (and (record-type-vector? type) (= (vector-get type 0) record-type)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-type? type) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-type? type) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-type? type) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-type? type) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-type? type) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-type? type) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-type? ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-type? ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-type? ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-type? [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-type? [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-type? [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-type? [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-type? [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-type? [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-type? [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-type? [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-type? [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-type? [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-type? [R6/56] (lambda) [R8/52] [R9/49] (record-type? type) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-type? [R6/56] (lambda) [R8/52] [R9/49] (record-type? type) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-type? [R6/56] (lambda) [R8/52] [R9/49] (record-type? type) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-type? [R6/56] (lambda) [R8/52] [R9/49] (type) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-type? [R6/56] (lambda) [R8/52] (type) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-type? [R6/56] (lambda) [R8/52] (type) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-type? [R6/56] (lambda) [R8/52] (type) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-type? [R6/56] (lambda) [R8/52] (type) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-type? [R6/56] (lambda) [R8/52] ((type)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-type? [R6/56] (lambda) ((type)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-type? [R6/56] (lambda) ((type)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-type? [R6/56] (lambda) ((type)) ((and (record-type-vector? type) (= (vector-get type 0) record-type))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-type? [R6/56] (lambda) ((type)) ((and (record-type-vector? type) (= (vector-get type 0) record-type))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-type? [R6/56] (lambda) ((type)) ((and (record-type-vector? type) (= (vector-get type 0) record-type))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-type? [R6/56] (lambda (type) (and (record-type-vector? type) (= (vector-get type 0) record-type))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-type? (lambda (type) (and (record-type-vector? type) (= (vector-get type 0) record-type))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-type? (lambda (type) (and (record-type-vector? type) (= (vector-get type 0) record-type))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-type? (lambda (type) (and (record-type-vector? type) (= (vector-get type 0) record-type))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-type? (lambda (type) (and (record-type-vector? type) (= (vector-get type 0) record-type))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-type? (lambda (type) (and (record-type-vector? type) (= (vector-get type 0) record-type)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ (record-type-vector? type) (= (vector-get type 0) record-type) ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] ((= (vector-get type 0) record-type)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((= (vector-get type 0) record-type)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((= (vector-get type 0) record-type)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] ((= (vector-get type 0) record-type)) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] ((= (vector-get type 0) record-type)) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] ((= (vector-get type 0) record-type)) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [R4/30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if) [R5/35] (record-type-vector? type) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [R5/35] (record-type-vector? type) [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [R5/35] (record-type-vector? type) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [R5/35] ((record-type-vector? type)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) ((record-type-vector? type)) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if) ((record-type-vector? type)) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) ]
[ 3]  37 : SAVE_RETURN	"R6"	41
                                      4: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) [R6/41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) [R6/41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) [R6/41] #f [Closure/core:list] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) [R6/41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) [R6/41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) (#f) ]
[ 4]  41 : LABEL	"R6"
                                      4: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) (#f) [Closure/core:append] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) ((record-type-vector? type)) ((= (vector-get type 0) record-type)) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if (record-type-vector? type) (= (vector-get type 0) record-type) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-type? ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-type? [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-type? ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-type? ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-type? [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-type? ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-type?) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-type?) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-type?) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-type?) ((lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-type?) ((lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-type?) ((lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) [R4/28] quote record-type? ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) [R4/28] quote record-type? [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) [R4/28] quote record-type? ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) [R4/28] (quote record-type?) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) (quote record-type?) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) (quote record-type?) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) (quote record-type?) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) (quote record-type?) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-type? (lambda (type) (if (record-type-vector? type) (= (vector-get type 0) record-type) #f))) (quote record-type?)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-type? type) (and (record-type-vector? type) (= (vector-get type 0) record-type))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (record-type-vector? type) (= (vector-get type 0) record-type) #f))
	2	GLOBAL_SET	record-type?
	3	STACK_POP
	4	PUSH_CONST	record-type?
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (record-type-vector? type) (= (vector-get type 0) record-type) #f))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-type?
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-type?
                                      1: [ record-type? ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (record-type-fields type) (vector-get type 2))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-type-fields type) (vector-get type 2) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-type-fields type) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-type-fields type) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-type-fields type) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-type-fields type) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-type-fields type) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-type-fields type) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-type-fields ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-type-fields ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-type-fields ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-type-fields [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-type-fields [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-type-fields [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-type-fields [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-type-fields [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-type-fields [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-type-fields [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-type-fields [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-type-fields [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-type-fields [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-type-fields [R6/56] (lambda) [R8/52] [R9/49] (record-type-fields type) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-type-fields [R6/56] (lambda) [R8/52] [R9/49] (record-type-fields type) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-type-fields [R6/56] (lambda) [R8/52] [R9/49] (record-type-fields type) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-type-fields [R6/56] (lambda) [R8/52] [R9/49] (type) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-type-fields [R6/56] (lambda) [R8/52] (type) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-type-fields [R6/56] (lambda) [R8/52] (type) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-type-fields [R6/56] (lambda) [R8/52] (type) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-type-fields [R6/56] (lambda) [R8/52] (type) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-type-fields [R6/56] (lambda) [R8/52] ((type)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-type-fields [R6/56] (lambda) ((type)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-type-fields [R6/56] (lambda) ((type)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-type-fields [R6/56] (lambda) ((type)) ((vector-get type 2)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-type-fields [R6/56] (lambda) ((type)) ((vector-get type 2)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-type-fields [R6/56] (lambda) ((type)) ((vector-get type 2)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-type-fields [R6/56] (lambda (type) (vector-get type 2)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-type-fields (lambda (type) (vector-get type 2)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-type-fields (lambda (type) (vector-get type 2)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-type-fields (lambda (type) (vector-get type 2)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-type-fields (lambda (type) (vector-get type 2)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-type-fields (lambda (type) (vector-get type 2))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-type-fields (lambda (type) (vector-get type 2)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-type-fields ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-type-fields [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-type-fields ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-fields ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-type-fields [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-fields ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-type-fields) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-type-fields) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-type-fields) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-type-fields) ((lambda (type) (vector-get type 2))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-type-fields) ((lambda (type) (vector-get type 2))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-type-fields) ((lambda (type) (vector-get type 2))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-type-fields (lambda (type) (vector-get type 2))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) [R4/28] quote record-type-fields ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) [R4/28] quote record-type-fields [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) [R4/28] quote record-type-fields ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) [R4/28] (quote record-type-fields) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) (quote record-type-fields) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) (quote record-type-fields) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) (quote record-type-fields) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-type-fields (lambda (type) (vector-get type 2))) (quote record-type-fields) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-type-fields (lambda (type) (vector-get type 2))) (quote record-type-fields)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-type-fields type) (vector-get type 2)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((vector-get type 2))
	2	GLOBAL_SET	record-type-fields
	3	STACK_POP
	4	PUSH_CONST	record-type-fields
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((vector-get type 2))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-type-fields
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-type-fields
                                      1: [ record-type-fields ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (record-type-field-count type) (length (record-type-fields type)))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-type-field-count type) (length (record-type-fields type)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-type-field-count type) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-type-field-count type) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-type-field-count type) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-type-field-count type) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-type-field-count type) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-type-field-count type) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-type-field-count ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-type-field-count ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-type-field-count ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-type-field-count [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-type-field-count [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-type-field-count [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-type-field-count [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-type-field-count [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-type-field-count [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-type-field-count [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-type-field-count [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-type-field-count [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-type-field-count [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-type-field-count [R6/56] (lambda) [R8/52] [R9/49] (record-type-field-count type) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-type-field-count [R6/56] (lambda) [R8/52] [R9/49] (record-type-field-count type) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-type-field-count [R6/56] (lambda) [R8/52] [R9/49] (record-type-field-count type) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-type-field-count [R6/56] (lambda) [R8/52] [R9/49] (type) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-type-field-count [R6/56] (lambda) [R8/52] (type) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-type-field-count [R6/56] (lambda) [R8/52] (type) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-type-field-count [R6/56] (lambda) [R8/52] (type) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-type-field-count [R6/56] (lambda) [R8/52] (type) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-type-field-count [R6/56] (lambda) [R8/52] ((type)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-type-field-count [R6/56] (lambda) ((type)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-type-field-count [R6/56] (lambda) ((type)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-type-field-count [R6/56] (lambda) ((type)) ((length (record-type-fields type))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-type-field-count [R6/56] (lambda) ((type)) ((length (record-type-fields type))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-type-field-count [R6/56] (lambda) ((type)) ((length (record-type-fields type))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-type-field-count [R6/56] (lambda (type) (length (record-type-fields type))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-type-field-count (lambda (type) (length (record-type-fields type))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-type-field-count (lambda (type) (length (record-type-fields type))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-type-field-count (lambda (type) (length (record-type-fields type))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-type-field-count (lambda (type) (length (record-type-fields type))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-type-field-count (lambda (type) (length (record-type-fields type)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-type-field-count (lambda (type) (length (record-type-fields type))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-type-field-count ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-type-field-count [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-type-field-count ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-field-count ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-type-field-count [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-field-count ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-type-field-count) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-type-field-count) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-type-field-count) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-type-field-count) ((lambda (type) (length (record-type-fields type)))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-type-field-count) ((lambda (type) (length (record-type-fields type)))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-type-field-count) ((lambda (type) (length (record-type-fields type)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) [R4/28] quote record-type-field-count ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) [R4/28] quote record-type-field-count [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) [R4/28] quote record-type-field-count ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) [R4/28] (quote record-type-field-count) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) (quote record-type-field-count) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) (quote record-type-field-count) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) (quote record-type-field-count) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) (quote record-type-field-count) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-type-field-count (lambda (type) (length (record-type-fields type)))) (quote record-type-field-count)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-type-field-count type) (length (record-type-fields type))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((length (record-type-fields type)))
	2	GLOBAL_SET	record-type-field-count
	3	STACK_POP
	4	PUSH_CONST	record-type-field-count
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((length (record-type-fields type)))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-type-field-count
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-type-field-count
                                      1: [ record-type-field-count ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (record-type-field-index type field-name) (index-of field-name (record-type-fields type)))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-type-field-index type field-name) (index-of field-name (record-type-fields type)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-type-field-index type field-name) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-type-field-index type field-name) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-type-field-index type field-name) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-type-field-index type field-name) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-type-field-index type field-name) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-type-field-index type field-name) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-type-field-index ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-type-field-index ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-type-field-index ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-type-field-index [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-type-field-index [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-type-field-index [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-type-field-index [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-type-field-index [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-type-field-index [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-type-field-index [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-type-field-index [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-type-field-index [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-type-field-index [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-type-field-index [R6/56] (lambda) [R8/52] [R9/49] (record-type-field-index type field-name) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-type-field-index [R6/56] (lambda) [R8/52] [R9/49] (record-type-field-index type field-name) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-type-field-index [R6/56] (lambda) [R8/52] [R9/49] (record-type-field-index type field-name) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-type-field-index [R6/56] (lambda) [R8/52] [R9/49] (type field-name) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-type-field-index [R6/56] (lambda) [R8/52] (type field-name) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-type-field-index [R6/56] (lambda) [R8/52] (type field-name) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-type-field-index [R6/56] (lambda) [R8/52] (type field-name) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-type-field-index [R6/56] (lambda) [R8/52] (type field-name) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-type-field-index [R6/56] (lambda) [R8/52] ((type field-name)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-type-field-index [R6/56] (lambda) ((type field-name)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-type-field-index [R6/56] (lambda) ((type field-name)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-type-field-index [R6/56] (lambda) ((type field-name)) ((index-of field-name (record-type-fields type))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-type-field-index [R6/56] (lambda) ((type field-name)) ((index-of field-name (record-type-fields type))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-type-field-index [R6/56] (lambda) ((type field-name)) ((index-of field-name (record-type-fields type))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-type-field-index [R6/56] (lambda (type field-name) (index-of field-name (record-type-fields type))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-type-field-index ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-type-field-index [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-type-field-index ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-field-index ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-type-field-index [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-field-index ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-type-field-index) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-type-field-index) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-type-field-index) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-type-field-index) ((lambda (type field-name) (index-of field-name (record-type-fields type)))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-type-field-index) ((lambda (type field-name) (index-of field-name (record-type-fields type)))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-type-field-index) ((lambda (type field-name) (index-of field-name (record-type-fields type)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) [R4/28] quote record-type-field-index ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) [R4/28] quote record-type-field-index [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) [R4/28] quote record-type-field-index ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) [R4/28] (quote record-type-field-index) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) (quote record-type-field-index) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) (quote record-type-field-index) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) (quote record-type-field-index) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) (quote record-type-field-index) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-type-field-index (lambda (type field-name) (index-of field-name (record-type-fields type)))) (quote record-type-field-index)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-type-field-index type field-name) (index-of field-name (record-type-fields type))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((index-of field-name (record-type-fields type)))
	2	GLOBAL_SET	record-type-field-index
	3	STACK_POP
	4	PUSH_CONST	record-type-field-index
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((index-of field-name (record-type-fields type)))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-type-field-index
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-type-field-index
                                      1: [ record-type-field-index ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (record? v) (and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record? v) (and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record? v) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record? v) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record? v) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record? v) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record? v) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record? v) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record? ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record? ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record? ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record? [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record? [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record? [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record? [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record? [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record? [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record? [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record? [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record? [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record? [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record? [R6/56] (lambda) [R8/52] [R9/49] (record? v) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record? [R6/56] (lambda) [R8/52] [R9/49] (record? v) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record? [R6/56] (lambda) [R8/52] [R9/49] (record? v) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record? [R6/56] (lambda) [R8/52] [R9/49] (v) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record? [R6/56] (lambda) [R8/52] (v) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record? [R6/56] (lambda) [R8/52] (v) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record? [R6/56] (lambda) [R8/52] (v) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record? [R6/56] (lambda) [R8/52] (v) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record? [R6/56] (lambda) [R8/52] ((v)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record? [R6/56] (lambda) ((v)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record? [R6/56] (lambda) ((v)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record? [R6/56] (lambda) ((v)) ((and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record? [R6/56] (lambda) ((v)) ((and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record? [R6/56] (lambda) ((v)) ((and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record? [R6/56] (lambda (v) (and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record? (lambda (v) (and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record? (lambda (v) (and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record? (lambda (v) (and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record? (lambda (v) (and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record? (lambda (v) (and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      4: [ (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) ]
[ 4]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] ((>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] ((>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] ((>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] ((>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 3 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 3 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 3 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 3 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 3 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; first
                                      2: [ if (vector? v) ]
[ 2]  47 : SAVE_RETURN	"R7"	56
                                      3: [ if (vector? v) [R7/56] ]
[ 3]  48 : SAVE_RETURN	"R8"	52
                                      4: [ if (vector? v) [R7/56] [R8/52] ]
[ 4]  49 : PUSH_CONST	and
                                      5: [ if (vector? v) [R7/56] [R8/52] and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if (vector? v) [R7/56] [R8/52] and [Closure/core:list] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if (vector? v) [R7/56] [R8/52] and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (vector? v) [R7/56] [R8/52] (and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (vector? v) [R7/56] (and) ]
[ 4]  52 : LABEL	"R8"
                                      4: [ if (vector? v) [R7/56] (and) ]
[ 4]  53 : LOCAL_GET	0	1	; rest
                                      5: [ if (vector? v) [R7/56] (and) ((>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if (vector? v) [R7/56] (and) ((>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) [Closure/core:append] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if (vector? v) [R7/56] (and) ((>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (vector? v) [R7/56] (and (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (vector? v) (and (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 3]  56 : LABEL	"R7"
                                      3: [ if (vector? v) (and (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if (vector? v) (and (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if (vector? v) (and (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) #f [Closure/core:list] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if (vector? v) (and (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (vector? v) (and (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      3: [ (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] ((closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] ((closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] ((closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] ((closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 2 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 2 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 2 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; first
                                      2: [ if (>= (vector-length v) 1) ]
[ 2]  47 : SAVE_RETURN	"R7"	56
                                      3: [ if (>= (vector-length v) 1) [R7/56] ]
[ 3]  48 : SAVE_RETURN	"R8"	52
                                      4: [ if (>= (vector-length v) 1) [R7/56] [R8/52] ]
[ 4]  49 : PUSH_CONST	and
                                      5: [ if (>= (vector-length v) 1) [R7/56] [R8/52] and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if (>= (vector-length v) 1) [R7/56] [R8/52] and [Closure/core:list] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if (>= (vector-length v) 1) [R7/56] [R8/52] and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (>= (vector-length v) 1) [R7/56] [R8/52] (and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (>= (vector-length v) 1) [R7/56] (and) ]
[ 4]  52 : LABEL	"R8"
                                      4: [ if (>= (vector-length v) 1) [R7/56] (and) ]
[ 4]  53 : LOCAL_GET	0	1	; rest
                                      5: [ if (>= (vector-length v) 1) [R7/56] (and) ((closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if (>= (vector-length v) 1) [R7/56] (and) ((closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) [Closure/core:append] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if (>= (vector-length v) 1) [R7/56] (and) ((closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (>= (vector-length v) 1) [R7/56] (and (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (>= (vector-length v) 1) (and (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 3]  56 : LABEL	"R7"
                                      3: [ if (>= (vector-length v) 1) (and (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if (>= (vector-length v) 1) (and (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if (>= (vector-length v) 1) (and (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) #f [Closure/core:list] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if (>= (vector-length v) 1) (and (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (>= (vector-length v) 1) (and (closure? (vector-get v 0)) (record-type? ((vector-get v 0)))) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] ((record-type? ((vector-get v 0)))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((record-type? ((vector-get v 0)))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((record-type? ((vector-get v 0)))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] ((record-type? ((vector-get v 0)))) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] ((record-type? ((vector-get v 0)))) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] ((record-type? ((vector-get v 0)))) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [R4/30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if) [R5/35] (closure? (vector-get v 0)) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [R5/35] (closure? (vector-get v 0)) [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [R5/35] (closure? (vector-get v 0)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [R5/35] ((closure? (vector-get v 0))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) ((closure? (vector-get v 0))) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if) ((closure? (vector-get v 0))) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) ]
[ 3]  37 : SAVE_RETURN	"R6"	41
                                      4: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) [R6/41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) [R6/41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) [R6/41] #f [Closure/core:list] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) [R6/41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) [R6/41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) (#f) ]
[ 4]  41 : LABEL	"R6"
                                      4: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) (#f) [Closure/core:append] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) ((closure? (vector-get v 0))) ((record-type? ((vector-get v 0)))) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record? ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record? [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record? ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record? ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record? [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record? ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record?) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record?) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record?) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record?) ((lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record?) ((lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record?) ((lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) [R4/28] quote record? ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) [R4/28] quote record? [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) [R4/28] quote record? ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) [R4/28] (quote record?) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) (quote record?) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) (quote record?) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) (quote record?) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) (quote record?) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record? (lambda (v) (if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))) (quote record?)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record? v) (and (vector? v) (>= (vector-length v) 1) (closure? (vector-get v 0)) (record-type? ((vector-get v 0))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))
	2	GLOBAL_SET	record?
	3	STACK_POP
	4	PUSH_CONST	record?
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (vector? v) (if (>= (vector-length v) 1) (if (closure? (vector-get v 0)) (record-type? ((vector-get v 0))) #f) #f) #f))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record?
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record?
                                      1: [ record? ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (record-get-type rec) ((vector-get rec 0)))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-get-type rec) ((vector-get rec 0)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-get-type rec) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-get-type rec) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-get-type rec) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-get-type rec) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-get-type rec) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-get-type rec) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-get-type ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-get-type ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-get-type ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-get-type [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-get-type [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-get-type [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-get-type [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-get-type [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-get-type [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-get-type [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-get-type [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-get-type [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-get-type [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-get-type [R6/56] (lambda) [R8/52] [R9/49] (record-get-type rec) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-get-type [R6/56] (lambda) [R8/52] [R9/49] (record-get-type rec) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-get-type [R6/56] (lambda) [R8/52] [R9/49] (record-get-type rec) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-get-type [R6/56] (lambda) [R8/52] [R9/49] (rec) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-get-type [R6/56] (lambda) [R8/52] (rec) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-get-type [R6/56] (lambda) [R8/52] (rec) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-get-type [R6/56] (lambda) [R8/52] (rec) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-get-type [R6/56] (lambda) [R8/52] (rec) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-get-type [R6/56] (lambda) [R8/52] ((rec)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-get-type [R6/56] (lambda) ((rec)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-get-type [R6/56] (lambda) ((rec)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-get-type [R6/56] (lambda) ((rec)) (((vector-get rec 0))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-get-type [R6/56] (lambda) ((rec)) (((vector-get rec 0))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-get-type [R6/56] (lambda) ((rec)) (((vector-get rec 0))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-get-type [R6/56] (lambda (rec) ((vector-get rec 0))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-get-type (lambda (rec) ((vector-get rec 0))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-get-type (lambda (rec) ((vector-get rec 0))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-get-type (lambda (rec) ((vector-get rec 0))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-get-type (lambda (rec) ((vector-get rec 0))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-get-type (lambda (rec) ((vector-get rec 0)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-get-type (lambda (rec) ((vector-get rec 0))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-get-type ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-get-type [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-get-type ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-get-type ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-get-type [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-get-type ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-get-type) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-get-type) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-get-type) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-get-type) ((lambda (rec) ((vector-get rec 0)))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-get-type) ((lambda (rec) ((vector-get rec 0)))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-get-type) ((lambda (rec) ((vector-get rec 0)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-get-type (lambda (rec) ((vector-get rec 0)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) [R4/28] quote record-get-type ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) [R4/28] quote record-get-type [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) [R4/28] quote record-get-type ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) [R4/28] (quote record-get-type) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) (quote record-get-type) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) (quote record-get-type) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) (quote record-get-type) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) (quote record-get-type) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-get-type (lambda (rec) ((vector-get rec 0)))) (quote record-get-type)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-get-type rec) ((vector-get rec 0))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; (((vector-get rec 0)))
	2	GLOBAL_SET	record-get-type
	3	STACK_POP
	4	PUSH_CONST	record-get-type
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; (((vector-get rec 0)))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-get-type
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-get-type
                                      1: [ record-get-type ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (record-type-equals? rec type) (= (record-get-type rec) type))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-type-equals? rec type) (= (record-get-type rec) type) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-type-equals? rec type) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-type-equals? rec type) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-type-equals? rec type) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-type-equals? rec type) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-type-equals? rec type) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-type-equals? rec type) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-type-equals? ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-type-equals? ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-type-equals? ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-type-equals? [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-type-equals? [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-type-equals? [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-type-equals? [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-type-equals? [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-type-equals? [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-type-equals? [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-type-equals? [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-type-equals? [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-type-equals? [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-type-equals? [R6/56] (lambda) [R8/52] [R9/49] (record-type-equals? rec type) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-type-equals? [R6/56] (lambda) [R8/52] [R9/49] (record-type-equals? rec type) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-type-equals? [R6/56] (lambda) [R8/52] [R9/49] (record-type-equals? rec type) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-type-equals? [R6/56] (lambda) [R8/52] [R9/49] (rec type) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-type-equals? [R6/56] (lambda) [R8/52] (rec type) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-type-equals? [R6/56] (lambda) [R8/52] (rec type) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-type-equals? [R6/56] (lambda) [R8/52] (rec type) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-type-equals? [R6/56] (lambda) [R8/52] (rec type) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-type-equals? [R6/56] (lambda) [R8/52] ((rec type)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-type-equals? [R6/56] (lambda) ((rec type)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-type-equals? [R6/56] (lambda) ((rec type)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-type-equals? [R6/56] (lambda) ((rec type)) ((= (record-get-type rec) type)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-type-equals? [R6/56] (lambda) ((rec type)) ((= (record-get-type rec) type)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-type-equals? [R6/56] (lambda) ((rec type)) ((= (record-get-type rec) type)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-type-equals? [R6/56] (lambda (rec type) (= (record-get-type rec) type)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-type-equals? (lambda (rec type) (= (record-get-type rec) type)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-type-equals? (lambda (rec type) (= (record-get-type rec) type)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-type-equals? (lambda (rec type) (= (record-get-type rec) type)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-type-equals? (lambda (rec type) (= (record-get-type rec) type)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-type-equals? (lambda (rec type) (= (record-get-type rec) type)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-type-equals? ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-type-equals? [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-type-equals? ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-equals? ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-type-equals? [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-type-equals? ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-type-equals?) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-type-equals?) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-type-equals?) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-type-equals?) ((lambda (rec type) (= (record-get-type rec) type))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-type-equals?) ((lambda (rec type) (= (record-get-type rec) type))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-type-equals?) ((lambda (rec type) (= (record-get-type rec) type))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) [R4/28] quote record-type-equals? ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) [R4/28] quote record-type-equals? [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) [R4/28] quote record-type-equals? ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) [R4/28] (quote record-type-equals?) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) (quote record-type-equals?) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) (quote record-type-equals?) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) (quote record-type-equals?) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) (quote record-type-equals?) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-type-equals? (lambda (rec type) (= (record-get-type rec) type))) (quote record-type-equals?)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-type-equals? rec type) (= (record-get-type rec) type)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((= (record-get-type rec) type))
	2	GLOBAL_SET	record-type-equals?
	3	STACK_POP
	4	PUSH_CONST	record-type-equals?
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((= (record-get-type rec) type))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-type-equals?
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-type-equals?
                                      1: [ record-type-equals? ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (record-field-count rec) (- (vector-length rec) 1))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-field-count rec) (- (vector-length rec) 1) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-field-count rec) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-field-count rec) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-field-count rec) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-field-count rec) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-field-count rec) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-field-count rec) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-field-count ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-field-count ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-field-count ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-field-count [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-field-count [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-field-count [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-field-count [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-field-count [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-field-count [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-field-count [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-field-count [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-field-count [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-field-count [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-field-count [R6/56] (lambda) [R8/52] [R9/49] (record-field-count rec) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-field-count [R6/56] (lambda) [R8/52] [R9/49] (record-field-count rec) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-field-count [R6/56] (lambda) [R8/52] [R9/49] (record-field-count rec) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-field-count [R6/56] (lambda) [R8/52] [R9/49] (rec) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-field-count [R6/56] (lambda) [R8/52] (rec) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-field-count [R6/56] (lambda) [R8/52] (rec) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-field-count [R6/56] (lambda) [R8/52] (rec) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-field-count [R6/56] (lambda) [R8/52] (rec) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-field-count [R6/56] (lambda) [R8/52] ((rec)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-field-count [R6/56] (lambda) ((rec)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-field-count [R6/56] (lambda) ((rec)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-field-count [R6/56] (lambda) ((rec)) ((- (vector-length rec) 1)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-field-count [R6/56] (lambda) ((rec)) ((- (vector-length rec) 1)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-field-count [R6/56] (lambda) ((rec)) ((- (vector-length rec) 1)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-field-count [R6/56] (lambda (rec) (- (vector-length rec) 1)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-field-count (lambda (rec) (- (vector-length rec) 1)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-field-count (lambda (rec) (- (vector-length rec) 1)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-field-count (lambda (rec) (- (vector-length rec) 1)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-field-count (lambda (rec) (- (vector-length rec) 1)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-field-count (lambda (rec) (- (vector-length rec) 1))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-field-count (lambda (rec) (- (vector-length rec) 1)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-field-count ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-field-count [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-field-count ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-field-count ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-field-count [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-field-count ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-field-count) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-field-count) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-field-count) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-field-count) ((lambda (rec) (- (vector-length rec) 1))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-field-count) ((lambda (rec) (- (vector-length rec) 1))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-field-count) ((lambda (rec) (- (vector-length rec) 1))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) [R4/28] quote record-field-count ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) [R4/28] quote record-field-count [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) [R4/28] quote record-field-count ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) [R4/28] (quote record-field-count) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) (quote record-field-count) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) (quote record-field-count) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) (quote record-field-count) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) (quote record-field-count) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-field-count (lambda (rec) (- (vector-length rec) 1))) (quote record-field-count)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-field-count rec) (- (vector-length rec) 1)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((- (vector-length rec) 1))
	2	GLOBAL_SET	record-field-count
	3	STACK_POP
	4	PUSH_CONST	record-field-count
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((- (vector-length rec) 1))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-field-count
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-field-count
                                      1: [ record-field-count ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (record-get rec i) (vector-get rec (+ i 1)))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-get rec i) (vector-get rec (+ i 1)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-get rec i) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-get rec i) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-get rec i) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-get rec i) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-get rec i) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-get rec i) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-get ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-get ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-get ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-get [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-get [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-get [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-get [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-get [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-get [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-get [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-get [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-get [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-get [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-get [R6/56] (lambda) [R8/52] [R9/49] (record-get rec i) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-get [R6/56] (lambda) [R8/52] [R9/49] (record-get rec i) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-get [R6/56] (lambda) [R8/52] [R9/49] (record-get rec i) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-get [R6/56] (lambda) [R8/52] [R9/49] (rec i) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-get [R6/56] (lambda) [R8/52] (rec i) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-get [R6/56] (lambda) [R8/52] (rec i) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-get [R6/56] (lambda) [R8/52] (rec i) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-get [R6/56] (lambda) [R8/52] (rec i) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-get [R6/56] (lambda) [R8/52] ((rec i)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-get [R6/56] (lambda) ((rec i)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-get [R6/56] (lambda) ((rec i)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-get [R6/56] (lambda) ((rec i)) ((vector-get rec (+ i 1))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-get [R6/56] (lambda) ((rec i)) ((vector-get rec (+ i 1))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-get [R6/56] (lambda) ((rec i)) ((vector-get rec (+ i 1))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-get [R6/56] (lambda (rec i) (vector-get rec (+ i 1))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-get (lambda (rec i) (vector-get rec (+ i 1))) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-get (lambda (rec i) (vector-get rec (+ i 1))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-get (lambda (rec i) (vector-get rec (+ i 1))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-get (lambda (rec i) (vector-get rec (+ i 1))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-get (lambda (rec i) (vector-get rec (+ i 1)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-get (lambda (rec i) (vector-get rec (+ i 1))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-get ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-get [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-get ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-get ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-get [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-get ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-get) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-get) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-get) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-get) ((lambda (rec i) (vector-get rec (+ i 1)))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-get) ((lambda (rec i) (vector-get rec (+ i 1)))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-get) ((lambda (rec i) (vector-get rec (+ i 1)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) [R4/28] quote record-get ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) [R4/28] quote record-get [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) [R4/28] quote record-get ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) [R4/28] (quote record-get) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) (quote record-get) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) (quote record-get) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) (quote record-get) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) (quote record-get) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-get (lambda (rec i) (vector-get rec (+ i 1)))) (quote record-get)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-get rec i) (vector-get rec (+ i 1))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((vector-get rec (+ i 1)))
	2	GLOBAL_SET	record-get
	3	STACK_POP
	4	PUSH_CONST	record-get
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((vector-get rec (+ i 1)))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-get
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-get
                                      1: [ record-get ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (record-set! rec i value) (vector-set! rec (+ i 1) value))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (record-set! rec i value) (vector-set! rec (+ i 1) value) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (record-set! rec i value) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (record-set! rec i value) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (record-set! rec i value) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (record-set! rec i value) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (record-set! rec i value) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (record-set! rec i value) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] record-set! ]
[ 3]   1 : RETURN_VAL
                                      2: [ define record-set! ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define record-set! ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define record-set! [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define record-set! [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define record-set! [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define record-set! [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define record-set! [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define record-set! [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define record-set! [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define record-set! [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define record-set! [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define record-set! [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define record-set! [R6/56] (lambda) [R8/52] [R9/49] (record-set! rec i value) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define record-set! [R6/56] (lambda) [R8/52] [R9/49] (record-set! rec i value) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define record-set! [R6/56] (lambda) [R8/52] [R9/49] (record-set! rec i value) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define record-set! [R6/56] (lambda) [R8/52] [R9/49] (rec i value) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define record-set! [R6/56] (lambda) [R8/52] (rec i value) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define record-set! [R6/56] (lambda) [R8/52] (rec i value) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define record-set! [R6/56] (lambda) [R8/52] (rec i value) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define record-set! [R6/56] (lambda) [R8/52] (rec i value) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define record-set! [R6/56] (lambda) [R8/52] ((rec i value)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define record-set! [R6/56] (lambda) ((rec i value)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define record-set! [R6/56] (lambda) ((rec i value)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define record-set! [R6/56] (lambda) ((rec i value)) ((vector-set! rec (+ i 1) value)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define record-set! [R6/56] (lambda) ((rec i value)) ((vector-set! rec (+ i 1) value)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define record-set! [R6/56] (lambda) ((rec i value)) ((vector-set! rec (+ i 1) value)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define record-set! [R6/56] (lambda (rec i value) (vector-set! rec (+ i 1) value)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] record-set! ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] record-set! [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] record-set! ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] record-set! ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] record-set! [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] record-set! ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (record-set!) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (record-set!) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (record-set!) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (record-set!) ((lambda (rec i value) (vector-set! rec (+ i 1) value))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (record-set!) ((lambda (rec i value) (vector-set! rec (+ i 1) value))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (record-set!) ((lambda (rec i value) (vector-set! rec (+ i 1) value))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) [R4/28] quote record-set! ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) [R4/28] quote record-set! [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) [R4/28] quote record-set! ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) [R4/28] (quote record-set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) (quote record-set!) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) (quote record-set!) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) (quote record-set!) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) (quote record-set!) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! record-set! (lambda (rec i value) (vector-set! rec (+ i 1) value))) (quote record-set!)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (record-set! rec i value) (vector-set! rec (+ i 1) value)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((vector-set! rec (+ i 1) value))
	2	GLOBAL_SET	record-set!
	3	STACK_POP
	4	PUSH_CONST	record-set!
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((vector-set! rec (+ i 1) value))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	record-set!
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	record-set!
                                      1: [ record-set! ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (make-record type) (letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (make-record type) (letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (make-record type) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (make-record type) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (make-record type) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (make-record type) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (make-record type) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (make-record type) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] make-record ]
[ 3]   1 : RETURN_VAL
                                      2: [ define make-record ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define make-record ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define make-record [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define make-record [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define make-record [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define make-record [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define make-record [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define make-record [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define make-record [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define make-record [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define make-record [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define make-record [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define make-record [R6/56] (lambda) [R8/52] [R9/49] (make-record type) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define make-record [R6/56] (lambda) [R8/52] [R9/49] (make-record type) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define make-record [R6/56] (lambda) [R8/52] [R9/49] (make-record type) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define make-record [R6/56] (lambda) [R8/52] [R9/49] (type) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define make-record [R6/56] (lambda) [R8/52] (type) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define make-record [R6/56] (lambda) [R8/52] (type) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define make-record [R6/56] (lambda) [R8/52] (type) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define make-record [R6/56] (lambda) [R8/52] (type) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define make-record [R6/56] (lambda) [R8/52] ((type)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define make-record [R6/56] (lambda) ((type)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define make-record [R6/56] (lambda) ((type)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define make-record [R6/56] (lambda) ((type)) ((letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define make-record [R6/56] (lambda) ((type)) ((letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define make-record [R6/56] (lambda) ((type)) ((letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define make-record [R6/56] (lambda (type) (letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define make-record (lambda (type) (letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define make-record (lambda (type) (letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define make-record (lambda (type) (letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define make-record (lambda (type) (letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define make-record (lambda (type) (letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	15
	7	SAVE_RETURN	"R2"	12
	8	MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
	9	LOCAL_GET	0	0	; bindings
	10	GLOBAL_GET	map
	11	JMP_CLOSURE	2
12	LABEL	"R2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	LABEL	"R1"
	16	SAVE_RETURN	"R4"	21
	17	MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
	18	LOCAL_GET	0	0	; bindings
	19	GLOBAL_GET	map
	20	JMP_CLOSURE	2
21	LABEL	"R4"
	22	LOCAL_GET	0	1	; body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      3: [ ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	let
                                      2: [ [R0/5] let ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R0/5] let [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] let ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/5] (let) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (let) ]
[ 1]   5 : LABEL	"R0"
                                      1: [ (let) ]
[ 1]   6 : SAVE_RETURN	"R1"	15
                                      2: [ (let) [R1/15] ]
[ 2]   7 : SAVE_RETURN	"R2"	12
                                      3: [ (let) [R1/15] [R2/12] ]
[ 3]   8 : MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
                                      4: [ (let) [R1/15] [R2/12] [Closure] ]
[ 4]   9 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) ]
[ 5]  10 : GLOBAL_GET	map
                                      6: [ (let) [R1/15] [R2/12] [Closure] ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) [Closure/core:map] ]
[ 6]  11 : JMP_CLOSURE	2
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (field-count (record-type-field-count type)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (field-count (record-type-field-count type)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (field-count (record-type-field-count type)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (field-count (record-type-field-count type)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] field-count ]
[ 2]   1 : RETURN_VAL
                                      1: [ field-count ]
[ 1]   5 : LABEL	"R3"
                                      1: [ field-count ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ field-count () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ field-count () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ field-count () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (field-count ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (rec (make-vector (+ field-count 1))) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (rec (make-vector (+ field-count 1))) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (rec (make-vector (+ field-count 1))) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (rec (make-vector (+ field-count 1))) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] rec ]
[ 2]   1 : RETURN_VAL
                                      1: [ rec ]
[ 1]   5 : LABEL	"R3"
                                      1: [ rec ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ rec () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ rec () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ rec () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (rec ()) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) [R1/15] [R2/12] ((field-count ()) (rec ())) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) [R1/15] ((field-count ()) (rec ())) ]
[ 3]  12 : LABEL	"R2"
                                      3: [ (let) [R1/15] ((field-count ()) (rec ())) ]
[ 3]  13 : GLOBAL_GET	list
                                      4: [ (let) [R1/15] ((field-count ()) (rec ())) [Closure/core:list] ]
[ 4]  14 : JMP_CLOSURE	1
                                      3: [ (let) [R1/15] ((field-count ()) (rec ())) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (let) [R1/15] (((field-count ()) (rec ()))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (let) (((field-count ()) (rec ()))) ]
[ 2]  15 : LABEL	"R1"
                                      2: [ (let) (((field-count ()) (rec ()))) ]
[ 2]  16 : SAVE_RETURN	"R4"	21
                                      3: [ (let) (((field-count ()) (rec ()))) [R4/21] ]
[ 3]  17 : MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
                                      4: [ (let) (((field-count ()) (rec ()))) [R4/21] [Closure] ]
[ 4]  18 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) (((field-count ()) (rec ()))) [R4/21] [Closure] ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) ]
[ 5]  19 : GLOBAL_GET	map
                                      6: [ (let) (((field-count ()) (rec ()))) [R4/21] [Closure] ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) [Closure/core:map] ]
[ 6]  20 : JMP_CLOSURE	2
                                      5: [ (let) (((field-count ()) (rec ()))) [R4/21] [Closure] ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (field-count (record-type-field-count type)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (field-count (record-type-field-count type)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (field-count (record-type-field-count type)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (field-count (record-type-field-count type)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! field-count (record-type-field-count type)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (rec (make-vector (+ field-count 1))) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (rec (make-vector (+ field-count 1))) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (rec (make-vector (+ field-count 1))) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (rec (make-vector (+ field-count 1))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! rec (make-vector (+ field-count 1))) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) (((field-count ()) (rec ()))) [R4/21] ((set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) (((field-count ()) (rec ()))) ((set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1)))) ]
[ 3]  21 : LABEL	"R4"
                                      3: [ (let) (((field-count ()) (rec ()))) ((set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1)))) ]
[ 3]  22 : LOCAL_GET	0	1	; body
                                      4: [ (let) (((field-count ()) (rec ()))) ((set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1)))) ((vector-set! rec 0 (lambda () type)) rec) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (let) (((field-count ()) (rec ()))) ((set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1)))) ((vector-set! rec 0 (lambda () type)) rec) [Closure/core:append] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (let) (((field-count ()) (rec ()))) ((set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1)))) ((vector-set! rec 0 (lambda () type)) rec) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] make-record ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] make-record [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] make-record ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] make-record ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] make-record [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] make-record ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (make-record) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (make-record) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (make-record) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (make-record) ((lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (make-record) ((lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (make-record) ((lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) [R4/28] quote make-record ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) [R4/28] quote make-record [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) [R4/28] quote make-record ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) [R4/28] (quote make-record) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) (quote make-record) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) (quote make-record) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) (quote make-record) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) (quote make-record) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! make-record (lambda (type) (let ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec))) (quote make-record)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      5: [ ((field-count ()) (rec ())) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec ]
[ 5]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((field-count ()) (rec ())) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((field-count ()) (rec ())) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((field-count ()) (rec ())) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (field-count ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ field-count ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (rec ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ rec ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (field-count rec) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (field-count rec) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (field-count rec) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (field-count rec) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (field-count rec) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((field-count rec)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((field-count rec)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((field-count rec)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((field-count rec)) ((set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((field-count rec)) ((set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((field-count rec)) ((set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) [R5/30] [Closure/core:cadr] ((field-count ()) (rec ())) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) [R5/30] [Closure/core:cadr] ((field-count ()) (rec ())) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) [R5/30] [Closure/core:cadr] ((field-count ()) (rec ())) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (field-count ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (rec ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) [R5/30] (() ()) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) (() ()) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) (() ()) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) (() ()) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec)) (() ()) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) () ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (make-record type) (letrec ((field-count (record-type-field-count type)) (rec (make-vector (+ field-count 1)))) (vector-set! rec 0 (lambda () type)) rec)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; (((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) () ()))
	2	GLOBAL_SET	make-record
	3	STACK_POP
	4	PUSH_CONST	make-record
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; (((lambda (field-count rec) (set! field-count (record-type-field-count type)) (set! rec (make-vector (+ field-count 1))) (vector-set! rec 0 (lambda () type)) rec) () ()))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	make-record
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	make-record
                                      1: [ make-record ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (make-record-filled type values) (letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (make-record-filled type values) (letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (make-record-filled type values) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (make-record-filled type values) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (make-record-filled type values) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (make-record-filled type values) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (make-record-filled type values) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (make-record-filled type values) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] make-record-filled ]
[ 3]   1 : RETURN_VAL
                                      2: [ define make-record-filled ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define make-record-filled ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define make-record-filled [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define make-record-filled [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define make-record-filled [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define make-record-filled [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define make-record-filled [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define make-record-filled [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define make-record-filled [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define make-record-filled [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define make-record-filled [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define make-record-filled [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define make-record-filled [R6/56] (lambda) [R8/52] [R9/49] (make-record-filled type values) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define make-record-filled [R6/56] (lambda) [R8/52] [R9/49] (make-record-filled type values) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define make-record-filled [R6/56] (lambda) [R8/52] [R9/49] (make-record-filled type values) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define make-record-filled [R6/56] (lambda) [R8/52] [R9/49] (type values) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define make-record-filled [R6/56] (lambda) [R8/52] (type values) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define make-record-filled [R6/56] (lambda) [R8/52] (type values) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define make-record-filled [R6/56] (lambda) [R8/52] (type values) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define make-record-filled [R6/56] (lambda) [R8/52] (type values) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define make-record-filled [R6/56] (lambda) [R8/52] ((type values)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define make-record-filled [R6/56] (lambda) ((type values)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define make-record-filled [R6/56] (lambda) ((type values)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define make-record-filled [R6/56] (lambda) ((type values)) ((letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define make-record-filled [R6/56] (lambda) ((type values)) ((letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define make-record-filled [R6/56] (lambda) ((type values)) ((letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define make-record-filled [R6/56] (lambda (type values) (letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define make-record-filled (lambda (type values) (letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define make-record-filled (lambda (type values) (letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define make-record-filled (lambda (type values) (letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define make-record-filled (lambda (type values) (letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define make-record-filled (lambda (type values) (letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	15
	7	SAVE_RETURN	"R2"	12
	8	MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
	9	LOCAL_GET	0	0	; bindings
	10	GLOBAL_GET	map
	11	JMP_CLOSURE	2
12	LABEL	"R2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	LABEL	"R1"
	16	SAVE_RETURN	"R4"	21
	17	MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
	18	LOCAL_GET	0	0	; bindings
	19	GLOBAL_GET	map
	20	JMP_CLOSURE	2
21	LABEL	"R4"
	22	LOCAL_GET	0	1	; body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      3: [ ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	let
                                      2: [ [R0/5] let ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R0/5] let [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] let ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/5] (let) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (let) ]
[ 1]   5 : LABEL	"R0"
                                      1: [ (let) ]
[ 1]   6 : SAVE_RETURN	"R1"	15
                                      2: [ (let) [R1/15] ]
[ 2]   7 : SAVE_RETURN	"R2"	12
                                      3: [ (let) [R1/15] [R2/12] ]
[ 3]   8 : MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
                                      4: [ (let) [R1/15] [R2/12] [Closure] ]
[ 4]   9 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((rec (make-record type)) (field-count (record-field-count rec))) ]
[ 5]  10 : GLOBAL_GET	map
                                      6: [ (let) [R1/15] [R2/12] [Closure] ((rec (make-record type)) (field-count (record-field-count rec))) [Closure/core:map] ]
[ 6]  11 : JMP_CLOSURE	2
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((rec (make-record type)) (field-count (record-field-count rec))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (rec (make-record type)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (rec (make-record type)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (rec (make-record type)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (rec (make-record type)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] rec ]
[ 2]   1 : RETURN_VAL
                                      1: [ rec ]
[ 1]   5 : LABEL	"R3"
                                      1: [ rec ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ rec () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ rec () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ rec () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (rec ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (field-count (record-field-count rec)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (field-count (record-field-count rec)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (field-count (record-field-count rec)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (field-count (record-field-count rec)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] field-count ]
[ 2]   1 : RETURN_VAL
                                      1: [ field-count ]
[ 1]   5 : LABEL	"R3"
                                      1: [ field-count ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ field-count () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ field-count () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ field-count () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (field-count ()) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) [R1/15] [R2/12] ((rec ()) (field-count ())) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) [R1/15] ((rec ()) (field-count ())) ]
[ 3]  12 : LABEL	"R2"
                                      3: [ (let) [R1/15] ((rec ()) (field-count ())) ]
[ 3]  13 : GLOBAL_GET	list
                                      4: [ (let) [R1/15] ((rec ()) (field-count ())) [Closure/core:list] ]
[ 4]  14 : JMP_CLOSURE	1
                                      3: [ (let) [R1/15] ((rec ()) (field-count ())) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (let) [R1/15] (((rec ()) (field-count ()))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (let) (((rec ()) (field-count ()))) ]
[ 2]  15 : LABEL	"R1"
                                      2: [ (let) (((rec ()) (field-count ()))) ]
[ 2]  16 : SAVE_RETURN	"R4"	21
                                      3: [ (let) (((rec ()) (field-count ()))) [R4/21] ]
[ 3]  17 : MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
                                      4: [ (let) (((rec ()) (field-count ()))) [R4/21] [Closure] ]
[ 4]  18 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) (((rec ()) (field-count ()))) [R4/21] [Closure] ((rec (make-record type)) (field-count (record-field-count rec))) ]
[ 5]  19 : GLOBAL_GET	map
                                      6: [ (let) (((rec ()) (field-count ()))) [R4/21] [Closure] ((rec (make-record type)) (field-count (record-field-count rec))) [Closure/core:map] ]
[ 6]  20 : JMP_CLOSURE	2
                                      5: [ (let) (((rec ()) (field-count ()))) [R4/21] [Closure] ((rec (make-record type)) (field-count (record-field-count rec))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (rec (make-record type)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (rec (make-record type)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (rec (make-record type)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (rec (make-record type)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! rec (make-record type)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (field-count (record-field-count rec)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (field-count (record-field-count rec)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (field-count (record-field-count rec)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (field-count (record-field-count rec)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! field-count (record-field-count rec)) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) (((rec ()) (field-count ()))) [R4/21] ((set! rec (make-record type)) (set! field-count (record-field-count rec))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) (((rec ()) (field-count ()))) ((set! rec (make-record type)) (set! field-count (record-field-count rec))) ]
[ 3]  21 : LABEL	"R4"
                                      3: [ (let) (((rec ()) (field-count ()))) ((set! rec (make-record type)) (set! field-count (record-field-count rec))) ]
[ 3]  22 : LOCAL_GET	0	1	; body
                                      4: [ (let) (((rec ()) (field-count ()))) ((set! rec (make-record type)) (set! field-count (record-field-count rec))) ((dotimes (i field-count) (record-set! rec i (nth values i))) rec) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (let) (((rec ()) (field-count ()))) ((set! rec (make-record type)) (set! field-count (record-field-count rec))) ((dotimes (i field-count) (record-set! rec i (nth values i))) rec) [Closure/core:append] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (let) (((rec ()) (field-count ()))) ((set! rec (make-record type)) (set! field-count (record-field-count rec))) ((dotimes (i field-count) (record-set! rec i (nth values i))) rec) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (dotimes (i field-count) (record-set! rec i (nth values i))) rec) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (pars body) => ((let ((varname (car pars)) (count (cadr pars))) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)))
	0	MAKE_ENVDOT	1	; (pars body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; pars
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	10
	7	LOCAL_GET	0	0	; pars
	8	GLOBAL_GET	cadr
	9	JMP_CLOSURE	1
10	LABEL	"R1"
	11	MAKE_CLOSURE	[Closure]	; ((append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))
	12	JMP_CLOSURE	2

                                      2: [ (i field-count) (record-set! rec i (nth values i)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (pars body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; pars
                                      2: [ [R0/5] (i field-count) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R0/5] (i field-count) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (i field-count) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R0/5] i ]
[ 2]   1 : RETURN_VAL
                                      1: [ i ]
[ 1]   5 : LABEL	"R0"
                                      1: [ i ]
[ 1]   6 : SAVE_RETURN	"R1"	10
                                      2: [ i [R1/10] ]
[ 2]   7 : LOCAL_GET	0	0	; pars
                                      3: [ i [R1/10] (i field-count) ]
[ 3]   8 : GLOBAL_GET	cadr
                                      4: [ i [R1/10] (i field-count) [Closure/core:cadr] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ i [R1/10] (i field-count) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ i [R1/10] field-count ]
[ 3]   1 : RETURN_VAL
                                      2: [ i field-count ]
[ 2]  10 : LABEL	"R1"
                                      2: [ i field-count ]
[ 2]  11 : MAKE_CLOSURE	[Closure]	; ((append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))
                                      3: [ i field-count [Closure] ]
[ 3]  12 : JMP_CLOSURE	2
                                      2: [ i field-count ]
[ 2]   0 : MAKE_ENV	2	; (varname count)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R2"	5
                                      1: [ [R2/5] ]
[ 1]   2 : PUSH_CONST	for
                                      2: [ [R2/5] for ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R2/5] for [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R2/5] for ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R2/5] (for) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (for) ]
[ 1]   5 : LABEL	"R2"
                                      1: [ (for) ]
[ 1]   6 : SAVE_RETURN	"R3"	29
                                      2: [ (for) [R3/29] ]
[ 2]   7 : SAVE_RETURN	"R4"	26
                                      3: [ (for) [R3/29] [R4/26] ]
[ 3]   8 : LOCAL_GET	0	0	; varname
                                      4: [ (for) [R3/29] [R4/26] i ]
[ 4]   9 : PUSH_CONST	0
                                      5: [ (for) [R3/29] [R4/26] i 0 ]
[ 5]  10 : SAVE_RETURN	"R5"	16
                                      6: [ (for) [R3/29] [R4/26] i 0 [R5/16] ]
[ 6]  11 : PUSH_CONST	<
                                      7: [ (for) [R3/29] [R4/26] i 0 [R5/16] < ]
[ 7]  12 : LOCAL_GET	0	0	; varname
                                      8: [ (for) [R3/29] [R4/26] i 0 [R5/16] < i ]
[ 8]  13 : LOCAL_GET	0	1	; count
                                      9: [ (for) [R3/29] [R4/26] i 0 [R5/16] < i field-count ]
[ 9]  14 : GLOBAL_GET	list
                                     10: [ (for) [R3/29] [R4/26] i 0 [R5/16] < i field-count [Closure/core:list] ]
[10]  15 : JMP_CLOSURE	3
                                      9: [ (for) [R3/29] [R4/26] i 0 [R5/16] < i field-count ]
[ 9]   0 : CALL_PRIMOP	"list"
                                      7: [ (for) [R3/29] [R4/26] i 0 [R5/16] (< i field-count) ]
[ 7]   1 : RETURN_VAL
                                      6: [ (for) [R3/29] [R4/26] i 0 (< i field-count) ]
[ 6]  16 : LABEL	"R5"
                                      6: [ (for) [R3/29] [R4/26] i 0 (< i field-count) ]
[ 6]  17 : SAVE_RETURN	"R6"	23
                                      7: [ (for) [R3/29] [R4/26] i 0 (< i field-count) [R6/23] ]
[ 7]  18 : PUSH_CONST	+
                                      8: [ (for) [R3/29] [R4/26] i 0 (< i field-count) [R6/23] + ]
[ 8]  19 : LOCAL_GET	0	0	; varname
                                      9: [ (for) [R3/29] [R4/26] i 0 (< i field-count) [R6/23] + i ]
[ 9]  20 : PUSH_CONST	1
                                     10: [ (for) [R3/29] [R4/26] i 0 (< i field-count) [R6/23] + i 1 ]
[10]  21 : GLOBAL_GET	list
                                     11: [ (for) [R3/29] [R4/26] i 0 (< i field-count) [R6/23] + i 1 [Closure/core:list] ]
[11]  22 : JMP_CLOSURE	3
                                     10: [ (for) [R3/29] [R4/26] i 0 (< i field-count) [R6/23] + i 1 ]
[10]   0 : CALL_PRIMOP	"list"
                                      8: [ (for) [R3/29] [R4/26] i 0 (< i field-count) [R6/23] (+ i 1) ]
[ 8]   1 : RETURN_VAL
                                      7: [ (for) [R3/29] [R4/26] i 0 (< i field-count) (+ i 1) ]
[ 7]  23 : LABEL	"R6"
                                      7: [ (for) [R3/29] [R4/26] i 0 (< i field-count) (+ i 1) ]
[ 7]  24 : GLOBAL_GET	list
                                      8: [ (for) [R3/29] [R4/26] i 0 (< i field-count) (+ i 1) [Closure/core:list] ]
[ 8]  25 : JMP_CLOSURE	4
                                      7: [ (for) [R3/29] [R4/26] i 0 (< i field-count) (+ i 1) ]
[ 7]   0 : CALL_PRIMOP	"list"
                                      4: [ (for) [R3/29] [R4/26] (i 0 (< i field-count) (+ i 1)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (for) [R3/29] (i 0 (< i field-count) (+ i 1)) ]
[ 3]  26 : LABEL	"R4"
                                      3: [ (for) [R3/29] (i 0 (< i field-count) (+ i 1)) ]
[ 3]  27 : GLOBAL_GET	list
                                      4: [ (for) [R3/29] (i 0 (< i field-count) (+ i 1)) [Closure/core:list] ]
[ 4]  28 : JMP_CLOSURE	1
                                      3: [ (for) [R3/29] (i 0 (< i field-count) (+ i 1)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (for) [R3/29] ((i 0 (< i field-count) (+ i 1))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (for) ((i 0 (< i field-count) (+ i 1))) ]
[ 2]  29 : LABEL	"R3"
                                      2: [ (for) ((i 0 (< i field-count) (+ i 1))) ]
[ 2]  30 : LOCAL_GET	1	1	; body
                                      3: [ (for) ((i 0 (< i field-count) (+ i 1))) ((record-set! rec i (nth values i))) ]
[ 3]  31 : GLOBAL_GET	append
                                      4: [ (for) ((i 0 (< i field-count) (+ i 1))) ((record-set! rec i (nth values i))) [Closure/core:append] ]
[ 4]  32 : JMP_CLOSURE	3
                                      3: [ (for) ((i 0 (< i field-count) (+ i 1))) ((record-set! rec i (nth values i))) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] make-record-filled ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] make-record-filled [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] make-record-filled ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] make-record-filled ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] make-record-filled [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] make-record-filled ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (make-record-filled) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (make-record-filled) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (make-record-filled) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (make-record-filled) ((lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (make-record-filled) ((lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (make-record-filled) ((lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) [R4/28] quote make-record-filled ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) [R4/28] quote make-record-filled [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) [R4/28] quote make-record-filled ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) [R4/28] (quote make-record-filled) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) (quote make-record-filled) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) (quote make-record-filled) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) (quote make-record-filled) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) (quote make-record-filled) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! make-record-filled (lambda (type values) (let ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec))) (quote make-record-filled)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      5: [ ((rec ()) (field-count ())) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec ]
[ 5]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((rec ()) (field-count ())) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((rec ()) (field-count ())) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((rec ()) (field-count ())) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (rec ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ rec ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (field-count ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ field-count ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (rec field-count) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (rec field-count) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (rec field-count) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (rec field-count) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (rec field-count) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((rec field-count)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((rec field-count)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((rec field-count)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((rec field-count)) ((set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((rec field-count)) ((set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((rec field-count)) ((set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) [R5/30] [Closure/core:cadr] ((rec ()) (field-count ())) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) [R5/30] [Closure/core:cadr] ((rec ()) (field-count ())) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) [R5/30] [Closure/core:cadr] ((rec ()) (field-count ())) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (rec ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (field-count ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) [R5/30] (() ()) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) (() ()) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) (() ()) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) (() ()) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec)) (() ()) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) () ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (test body) => ((let ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))))
	0	MAKE_ENVDOT	1	; (test body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; test
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	10
	7	LOCAL_GET	0	0	; test
	8	GLOBAL_GET	cadr
	9	JMP_CLOSURE	1
10	LABEL	"R1"
	11	SAVE_RETURN	"R2"	15
	12	LOCAL_GET	0	0	; test
	13	GLOBAL_GET	caddr
	14	JMP_CLOSURE	1
15	LABEL	"R2"
	16	SAVE_RETURN	"R3"	24
	17	SAVE_RETURN	"R4"	21
	18	LOCAL_GET	0	0	; test
	19	GLOBAL_GET	cdddr
	20	JMP_CLOSURE	1
21	LABEL	"R4"
	22	GLOBAL_GET	car
	23	JMP_CLOSURE	1
24	LABEL	"R3"
	25	MAKE_CLOSURE	[Closure]	; ((list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))
	26	JMP_CLOSURE	4

                                      2: [ (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (test body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; test
                                      2: [ [R0/5] (i 0 (< i field-count) (+ i 1)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R0/5] (i 0 (< i field-count) (+ i 1)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (i 0 (< i field-count) (+ i 1)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R0/5] i ]
[ 2]   1 : RETURN_VAL
                                      1: [ i ]
[ 1]   5 : LABEL	"R0"
                                      1: [ i ]
[ 1]   6 : SAVE_RETURN	"R1"	10
                                      2: [ i [R1/10] ]
[ 2]   7 : LOCAL_GET	0	0	; test
                                      3: [ i [R1/10] (i 0 (< i field-count) (+ i 1)) ]
[ 3]   8 : GLOBAL_GET	cadr
                                      4: [ i [R1/10] (i 0 (< i field-count) (+ i 1)) [Closure/core:cadr] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ i [R1/10] (i 0 (< i field-count) (+ i 1)) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ i [R1/10] 0 ]
[ 3]   1 : RETURN_VAL
                                      2: [ i 0 ]
[ 2]  10 : LABEL	"R1"
                                      2: [ i 0 ]
[ 2]  11 : SAVE_RETURN	"R2"	15
                                      3: [ i 0 [R2/15] ]
[ 3]  12 : LOCAL_GET	0	0	; test
                                      4: [ i 0 [R2/15] (i 0 (< i field-count) (+ i 1)) ]
[ 4]  13 : GLOBAL_GET	caddr
                                      5: [ i 0 [R2/15] (i 0 (< i field-count) (+ i 1)) [Closure/core:caddr] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ i 0 [R2/15] (i 0 (< i field-count) (+ i 1)) ]
[ 4]   0 : CALL_PRIMOP	"caddr"
                                      4: [ i 0 [R2/15] (< i field-count) ]
[ 4]   1 : RETURN_VAL
                                      3: [ i 0 (< i field-count) ]
[ 3]  15 : LABEL	"R2"
                                      3: [ i 0 (< i field-count) ]
[ 3]  16 : SAVE_RETURN	"R3"	24
                                      4: [ i 0 (< i field-count) [R3/24] ]
[ 4]  17 : SAVE_RETURN	"R4"	21
                                      5: [ i 0 (< i field-count) [R3/24] [R4/21] ]
[ 5]  18 : LOCAL_GET	0	0	; test
                                      6: [ i 0 (< i field-count) [R3/24] [R4/21] (i 0 (< i field-count) (+ i 1)) ]
[ 6]  19 : GLOBAL_GET	cdddr
                                      7: [ i 0 (< i field-count) [R3/24] [R4/21] (i 0 (< i field-count) (+ i 1)) [Closure/core:cdddr] ]
[ 7]  20 : JMP_CLOSURE	1
                                      6: [ i 0 (< i field-count) [R3/24] [R4/21] (i 0 (< i field-count) (+ i 1)) ]
[ 6]   0 : CALL_PRIMOP	"cdddr"
                                      6: [ i 0 (< i field-count) [R3/24] [R4/21] ((+ i 1)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ i 0 (< i field-count) [R3/24] ((+ i 1)) ]
[ 5]  21 : LABEL	"R4"
                                      5: [ i 0 (< i field-count) [R3/24] ((+ i 1)) ]
[ 5]  22 : GLOBAL_GET	car
                                      6: [ i 0 (< i field-count) [R3/24] ((+ i 1)) [Closure/core:car] ]
[ 6]  23 : JMP_CLOSURE	1
                                      5: [ i 0 (< i field-count) [R3/24] ((+ i 1)) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ i 0 (< i field-count) [R3/24] (+ i 1) ]
[ 5]   1 : RETURN_VAL
                                      4: [ i 0 (< i field-count) (+ i 1) ]
[ 4]  24 : LABEL	"R3"
                                      4: [ i 0 (< i field-count) (+ i 1) ]
[ 4]  25 : MAKE_CLOSURE	[Closure]	; ((list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))
                                      5: [ i 0 (< i field-count) (+ i 1) [Closure] ]
[ 5]  26 : JMP_CLOSURE	4
                                      4: [ i 0 (< i field-count) (+ i 1) ]
[ 4]   0 : MAKE_ENV	4	; (varname init-value predicate step-value)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	let
                                      1: [ let ]
[ 1]   2 : SAVE_RETURN	"R5"	11
                                      2: [ let [R5/11] ]
[ 2]   3 : SAVE_RETURN	"R6"	8
                                      3: [ let [R5/11] [R6/8] ]
[ 3]   4 : LOCAL_GET	0	0	; varname
                                      4: [ let [R5/11] [R6/8] i ]
[ 4]   5 : LOCAL_GET	0	1	; init-value
                                      5: [ let [R5/11] [R6/8] i 0 ]
[ 5]   6 : GLOBAL_GET	list
                                      6: [ let [R5/11] [R6/8] i 0 [Closure/core:list] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ let [R5/11] [R6/8] i 0 ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ let [R5/11] [R6/8] (i 0) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R5/11] (i 0) ]
[ 3]   8 : LABEL	"R6"
                                      3: [ let [R5/11] (i 0) ]
[ 3]   9 : GLOBAL_GET	list
                                      4: [ let [R5/11] (i 0) [Closure/core:list] ]
[ 4]  10 : JMP_CLOSURE	1
                                      3: [ let [R5/11] (i 0) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R5/11] ((i 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((i 0)) ]
[ 2]  11 : LABEL	"R5"
                                      2: [ let ((i 0)) ]
[ 2]  12 : SAVE_RETURN	"R7"	37
                                      3: [ let ((i 0)) [R7/37] ]
[ 3]  13 : SAVE_RETURN	"R8"	17
                                      4: [ let ((i 0)) [R7/37] [R8/17] ]
[ 4]  14 : PUSH_CONST	while
                                      5: [ let ((i 0)) [R7/37] [R8/17] while ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ let ((i 0)) [R7/37] [R8/17] while [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ let ((i 0)) [R7/37] [R8/17] while ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((i 0)) [R7/37] [R8/17] (while) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((i 0)) [R7/37] (while) ]
[ 4]  17 : LABEL	"R8"
                                      4: [ let ((i 0)) [R7/37] (while) ]
[ 4]  18 : SAVE_RETURN	"R9"	22
                                      5: [ let ((i 0)) [R7/37] (while) [R9/22] ]
[ 5]  19 : LOCAL_GET	0	2	; predicate
                                      6: [ let ((i 0)) [R7/37] (while) [R9/22] (< i field-count) ]
[ 6]  20 : GLOBAL_GET	list
                                      7: [ let ((i 0)) [R7/37] (while) [R9/22] (< i field-count) [Closure/core:list] ]
[ 7]  21 : JMP_CLOSURE	1
                                      6: [ let ((i 0)) [R7/37] (while) [R9/22] (< i field-count) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((i 0)) [R7/37] (while) [R9/22] ((< i field-count)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ]
[ 5]  22 : LABEL	"R9"
                                      5: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ]
[ 5]  23 : LOCAL_GET	1	1	; body
                                      6: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) ]
[ 6]  24 : SAVE_RETURN	"R10"	34
                                      7: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] ]
[ 7]  25 : SAVE_RETURN	"R11"	31
                                      8: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] [R11/31] ]
[ 8]  26 : PUSH_CONST	set!
                                      9: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] [R11/31] set! ]
[ 9]  27 : LOCAL_GET	0	0	; varname
                                     10: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] [R11/31] set! i ]
[10]  28 : LOCAL_GET	0	3	; step-value
                                     11: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] [R11/31] set! i (+ i 1) ]
[11]  29 : GLOBAL_GET	list
                                     12: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] [R11/31] set! i (+ i 1) [Closure/core:list] ]
[12]  30 : JMP_CLOSURE	3
                                     11: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] [R11/31] set! i (+ i 1) ]
[11]   0 : CALL_PRIMOP	"list"
                                      9: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] [R11/31] (set! i (+ i 1)) ]
[ 9]   1 : RETURN_VAL
                                      8: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] (set! i (+ i 1)) ]
[ 8]  31 : LABEL	"R11"
                                      8: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] (set! i (+ i 1)) ]
[ 8]  32 : GLOBAL_GET	list
                                      9: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] (set! i (+ i 1)) [Closure/core:list] ]
[ 9]  33 : JMP_CLOSURE	1
                                      8: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] (set! i (+ i 1)) ]
[ 8]   0 : CALL_PRIMOP	"list"
                                      8: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) [R10/34] ((set! i (+ i 1))) ]
[ 8]   1 : RETURN_VAL
                                      7: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) ((set! i (+ i 1))) ]
[ 7]  34 : LABEL	"R10"
                                      7: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) ((set! i (+ i 1))) ]
[ 7]  35 : GLOBAL_GET	append
                                      8: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) ((set! i (+ i 1))) [Closure/core:append] ]
[ 8]  36 : JMP_CLOSURE	4
                                      7: [ let ((i 0)) [R7/37] (while) ((< i field-count)) ((record-set! rec i (nth values i))) ((set! i (+ i 1))) ]
[ 7]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((i 0)) [R7/37] (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((i 0)) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))) ]
[ 3]  37 : LABEL	"R7"
                                      3: [ let ((i 0)) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))) ]
[ 3]  38 : GLOBAL_GET	list
                                      4: [ let ((i 0)) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))) [Closure/core:list] ]
[ 4]  39 : JMP_CLOSURE	3
                                      3: [ let ((i 0)) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((i 0)) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((i 0)) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((i 0)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((i 0)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((i 0)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (i 0) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ i ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (i) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (i) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (i) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (i) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (i) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((i)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((i)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((i)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((i)) ((while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((i)) ((while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((i)) ((while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ((i 0)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ((i 0)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ((i 0)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (i 0) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 0 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) [R5/30] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) (0) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) (0) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) (0) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1))))) (0) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (i) (while (< i field-count) (record-set! rec i (nth values i)) (set! i (+ i 1)))) 0) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (make-record-filled type values) (letrec ((rec (make-record type)) (field-count (record-field-count rec))) (dotimes (i field-count) (record-set! rec i (nth values i))) rec)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; (((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) () ()))
	2	GLOBAL_SET	make-record-filled
	3	STACK_POP
	4	PUSH_CONST	make-record-filled
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; (((lambda (rec field-count) (set! rec (make-record type)) (set! field-count (record-field-count rec)) (for (i 0 (< i field-count) (+ i 1)) (record-set! rec i (nth values i))) rec) () ()))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	make-record-filled
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	make-record-filled
                                      1: [ make-record-filled ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (make-getter-defs type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (make-getter-defs type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (make-getter-defs type args) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (make-getter-defs type args) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (make-getter-defs type args) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (make-getter-defs type args) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (make-getter-defs type args) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (make-getter-defs type args) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] make-getter-defs ]
[ 3]   1 : RETURN_VAL
                                      2: [ define make-getter-defs ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define make-getter-defs ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define make-getter-defs [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define make-getter-defs [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define make-getter-defs [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define make-getter-defs [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define make-getter-defs [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define make-getter-defs [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define make-getter-defs [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define make-getter-defs [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define make-getter-defs [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define make-getter-defs [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define make-getter-defs [R6/56] (lambda) [R8/52] [R9/49] (make-getter-defs type args) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define make-getter-defs [R6/56] (lambda) [R8/52] [R9/49] (make-getter-defs type args) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define make-getter-defs [R6/56] (lambda) [R8/52] [R9/49] (make-getter-defs type args) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define make-getter-defs [R6/56] (lambda) [R8/52] [R9/49] (type args) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define make-getter-defs [R6/56] (lambda) [R8/52] (type args) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define make-getter-defs [R6/56] (lambda) [R8/52] (type args) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define make-getter-defs [R6/56] (lambda) [R8/52] (type args) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define make-getter-defs [R6/56] (lambda) [R8/52] (type args) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define make-getter-defs [R6/56] (lambda) [R8/52] ((type args)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define make-getter-defs [R6/56] (lambda) ((type args)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define make-getter-defs [R6/56] (lambda) ((type args)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define make-getter-defs [R6/56] (lambda) ((type args)) ((map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define make-getter-defs [R6/56] (lambda) ((type args)) ((map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define make-getter-defs [R6/56] (lambda) ((type args)) ((map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define make-getter-defs [R6/56] (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (letrec ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	15
	7	SAVE_RETURN	"R2"	12
	8	MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
	9	LOCAL_GET	0	0	; bindings
	10	GLOBAL_GET	map
	11	JMP_CLOSURE	2
12	LABEL	"R2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	LABEL	"R1"
	16	SAVE_RETURN	"R4"	21
	17	MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
	18	LOCAL_GET	0	0	; bindings
	19	GLOBAL_GET	map
	20	JMP_CLOSURE	2
21	LABEL	"R4"
	22	LOCAL_GET	0	1	; body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      2: [ ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	let
                                      2: [ [R0/5] let ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R0/5] let [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] let ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/5] (let) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (let) ]
[ 1]   5 : LABEL	"R0"
                                      1: [ (let) ]
[ 1]   6 : SAVE_RETURN	"R1"	15
                                      2: [ (let) [R1/15] ]
[ 2]   7 : SAVE_RETURN	"R2"	12
                                      3: [ (let) [R1/15] [R2/12] ]
[ 3]   8 : MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
                                      4: [ (let) [R1/15] [R2/12] [Closure] ]
[ 4]   9 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) ]
[ 5]  10 : GLOBAL_GET	map
                                      6: [ (let) [R1/15] [R2/12] [Closure] ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) [Closure/core:map] ]
[ 6]  11 : JMP_CLOSURE	2
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (field-name (first def)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (field-name (first def)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (field-name (first def)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (field-name (first def)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] field-name ]
[ 2]   1 : RETURN_VAL
                                      1: [ field-name ]
[ 1]   5 : LABEL	"R3"
                                      1: [ field-name ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ field-name () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ field-name () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ field-name () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (field-name ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (getter-name (second def)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (getter-name (second def)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (getter-name (second def)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (getter-name (second def)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] getter-name ]
[ 2]   1 : RETURN_VAL
                                      1: [ getter-name ]
[ 1]   5 : LABEL	"R3"
                                      1: [ getter-name ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ getter-name () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ getter-name () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ getter-name () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (getter-name ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (index (+ 1 (record-type-field-index type field-name))) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (index (+ 1 (record-type-field-index type field-name))) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (index (+ 1 (record-type-field-index type field-name))) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (index (+ 1 (record-type-field-index type field-name))) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] index ]
[ 2]   1 : RETURN_VAL
                                      1: [ index ]
[ 1]   5 : LABEL	"R3"
                                      1: [ index ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ index () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ index () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ index () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (index ()) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) [R1/15] [R2/12] ((field-name ()) (getter-name ()) (index ())) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) [R1/15] ((field-name ()) (getter-name ()) (index ())) ]
[ 3]  12 : LABEL	"R2"
                                      3: [ (let) [R1/15] ((field-name ()) (getter-name ()) (index ())) ]
[ 3]  13 : GLOBAL_GET	list
                                      4: [ (let) [R1/15] ((field-name ()) (getter-name ()) (index ())) [Closure/core:list] ]
[ 4]  14 : JMP_CLOSURE	1
                                      3: [ (let) [R1/15] ((field-name ()) (getter-name ()) (index ())) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (let) [R1/15] (((field-name ()) (getter-name ()) (index ()))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (let) (((field-name ()) (getter-name ()) (index ()))) ]
[ 2]  15 : LABEL	"R1"
                                      2: [ (let) (((field-name ()) (getter-name ()) (index ()))) ]
[ 2]  16 : SAVE_RETURN	"R4"	21
                                      3: [ (let) (((field-name ()) (getter-name ()) (index ()))) [R4/21] ]
[ 3]  17 : MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
                                      4: [ (let) (((field-name ()) (getter-name ()) (index ()))) [R4/21] [Closure] ]
[ 4]  18 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) (((field-name ()) (getter-name ()) (index ()))) [R4/21] [Closure] ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) ]
[ 5]  19 : GLOBAL_GET	map
                                      6: [ (let) (((field-name ()) (getter-name ()) (index ()))) [R4/21] [Closure] ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) [Closure/core:map] ]
[ 6]  20 : JMP_CLOSURE	2
                                      5: [ (let) (((field-name ()) (getter-name ()) (index ()))) [R4/21] [Closure] ((field-name (first def)) (getter-name (second def)) (index (+ 1 (record-type-field-index type field-name)))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (field-name (first def)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (field-name (first def)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (field-name (first def)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (field-name (first def)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! field-name (first def)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (getter-name (second def)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (getter-name (second def)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (getter-name (second def)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (getter-name (second def)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! getter-name (second def)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (index (+ 1 (record-type-field-index type field-name))) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (index (+ 1 (record-type-field-index type field-name))) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (index (+ 1 (record-type-field-index type field-name))) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (index (+ 1 (record-type-field-index type field-name))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! index (+ 1 (record-type-field-index type field-name))) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) (((field-name ()) (getter-name ()) (index ()))) [R4/21] ((set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) (((field-name ()) (getter-name ()) (index ()))) ((set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name)))) ]
[ 3]  21 : LABEL	"R4"
                                      3: [ (let) (((field-name ()) (getter-name ()) (index ()))) ((set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name)))) ]
[ 3]  22 : LOCAL_GET	0	1	; body
                                      4: [ (let) (((field-name ()) (getter-name ()) (index ()))) ((set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name)))) ((list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (let) (((field-name ()) (getter-name ()) (index ()))) ((set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name)))) ((list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) [Closure/core:append] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (let) (((field-name ()) (getter-name ()) (index ()))) ((set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name)))) ((list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] make-getter-defs ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] make-getter-defs [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] make-getter-defs ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] make-getter-defs ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] make-getter-defs [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] make-getter-defs ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (make-getter-defs) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (make-getter-defs) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (make-getter-defs) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (make-getter-defs) ((lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (make-getter-defs) ((lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (make-getter-defs) ((lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) [R4/28] quote make-getter-defs ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) [R4/28] quote make-getter-defs [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) [R4/28] quote make-getter-defs ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) [R4/28] (quote make-getter-defs) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) (quote make-getter-defs) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) (quote make-getter-defs) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) (quote make-getter-defs) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) (quote make-getter-defs) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! make-getter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 2) (quote ()) (let ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))))) args))) (quote make-getter-defs)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      5: [ ((field-name ()) (getter-name ()) (index ())) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)) ]
[ 5]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((field-name ()) (getter-name ()) (index ())) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((field-name ()) (getter-name ()) (index ())) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((field-name ()) (getter-name ()) (index ())) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (field-name ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ field-name ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (getter-name ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ getter-name ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (index ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ index ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (field-name getter-name index) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (field-name getter-name index) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (field-name getter-name index) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (field-name getter-name index) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (field-name getter-name index) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((field-name getter-name index)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((field-name getter-name index)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((field-name getter-name index)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((field-name getter-name index)) ((set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((field-name getter-name index)) ((set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((field-name getter-name index)) ((set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) [R5/30] [Closure/core:cadr] ((field-name ()) (getter-name ()) (index ())) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) [R5/30] [Closure/core:cadr] ((field-name ()) (getter-name ()) (index ())) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) [R5/30] [Closure/core:cadr] ((field-name ()) (getter-name ()) (index ())) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (field-name ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (getter-name ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (index ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) [R5/30] (() () ()) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) (() () ()) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) (() () ()) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) (() () ()) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index)))) (() () ()) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) () () ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (make-getter-defs type args) (map (lambda (def) (if (< (length def) 2) (quote ()) ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) () () ()))) args)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((map (lambda (def) (if (< (length def) 2) (quote ()) ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) () () ()))) args))
	2	GLOBAL_SET	make-getter-defs
	3	STACK_POP
	4	PUSH_CONST	make-getter-defs
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((map (lambda (def) (if (< (length def) 2) (quote ()) ((lambda (field-name getter-name index) (set! field-name (first def)) (set! getter-name (second def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list getter-name (quote rec)) (list (quote vector-get) (quote rec) index))) () () ()))) args))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	make-getter-defs
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	make-getter-defs
                                      1: [ make-getter-defs ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (make-setter-defs type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (make-setter-defs type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (make-setter-defs type args) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (make-setter-defs type args) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (make-setter-defs type args) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (make-setter-defs type args) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (make-setter-defs type args) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (make-setter-defs type args) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] make-setter-defs ]
[ 3]   1 : RETURN_VAL
                                      2: [ define make-setter-defs ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define make-setter-defs ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define make-setter-defs [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define make-setter-defs [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define make-setter-defs [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define make-setter-defs [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define make-setter-defs [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define make-setter-defs [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define make-setter-defs [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define make-setter-defs [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define make-setter-defs [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define make-setter-defs [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define make-setter-defs [R6/56] (lambda) [R8/52] [R9/49] (make-setter-defs type args) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define make-setter-defs [R6/56] (lambda) [R8/52] [R9/49] (make-setter-defs type args) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define make-setter-defs [R6/56] (lambda) [R8/52] [R9/49] (make-setter-defs type args) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define make-setter-defs [R6/56] (lambda) [R8/52] [R9/49] (type args) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define make-setter-defs [R6/56] (lambda) [R8/52] (type args) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define make-setter-defs [R6/56] (lambda) [R8/52] (type args) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define make-setter-defs [R6/56] (lambda) [R8/52] (type args) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define make-setter-defs [R6/56] (lambda) [R8/52] (type args) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define make-setter-defs [R6/56] (lambda) [R8/52] ((type args)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define make-setter-defs [R6/56] (lambda) ((type args)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define make-setter-defs [R6/56] (lambda) ((type args)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define make-setter-defs [R6/56] (lambda) ((type args)) ((map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define make-setter-defs [R6/56] (lambda) ((type args)) ((map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define make-setter-defs [R6/56] (lambda) ((type args)) ((map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define make-setter-defs [R6/56] (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (letrec ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	15
	7	SAVE_RETURN	"R2"	12
	8	MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
	9	LOCAL_GET	0	0	; bindings
	10	GLOBAL_GET	map
	11	JMP_CLOSURE	2
12	LABEL	"R2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	LABEL	"R1"
	16	SAVE_RETURN	"R4"	21
	17	MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
	18	LOCAL_GET	0	0	; bindings
	19	GLOBAL_GET	map
	20	JMP_CLOSURE	2
21	LABEL	"R4"
	22	LOCAL_GET	0	1	; body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      2: [ ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	let
                                      2: [ [R0/5] let ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R0/5] let [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] let ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/5] (let) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (let) ]
[ 1]   5 : LABEL	"R0"
                                      1: [ (let) ]
[ 1]   6 : SAVE_RETURN	"R1"	15
                                      2: [ (let) [R1/15] ]
[ 2]   7 : SAVE_RETURN	"R2"	12
                                      3: [ (let) [R1/15] [R2/12] ]
[ 3]   8 : MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
                                      4: [ (let) [R1/15] [R2/12] [Closure] ]
[ 4]   9 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) ]
[ 5]  10 : GLOBAL_GET	map
                                      6: [ (let) [R1/15] [R2/12] [Closure] ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) [Closure/core:map] ]
[ 6]  11 : JMP_CLOSURE	2
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (field-name (first def)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (field-name (first def)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (field-name (first def)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (field-name (first def)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] field-name ]
[ 2]   1 : RETURN_VAL
                                      1: [ field-name ]
[ 1]   5 : LABEL	"R3"
                                      1: [ field-name ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ field-name () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ field-name () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ field-name () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (field-name ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (setter-name (third def)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (setter-name (third def)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (setter-name (third def)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (setter-name (third def)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] setter-name ]
[ 2]   1 : RETURN_VAL
                                      1: [ setter-name ]
[ 1]   5 : LABEL	"R3"
                                      1: [ setter-name ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ setter-name () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ setter-name () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ setter-name () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (setter-name ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (index (+ 1 (record-type-field-index type field-name))) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (index (+ 1 (record-type-field-index type field-name))) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (index (+ 1 (record-type-field-index type field-name))) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (index (+ 1 (record-type-field-index type field-name))) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] index ]
[ 2]   1 : RETURN_VAL
                                      1: [ index ]
[ 1]   5 : LABEL	"R3"
                                      1: [ index ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ index () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ index () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ index () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (index ()) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) [R1/15] [R2/12] ((field-name ()) (setter-name ()) (index ())) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) [R1/15] ((field-name ()) (setter-name ()) (index ())) ]
[ 3]  12 : LABEL	"R2"
                                      3: [ (let) [R1/15] ((field-name ()) (setter-name ()) (index ())) ]
[ 3]  13 : GLOBAL_GET	list
                                      4: [ (let) [R1/15] ((field-name ()) (setter-name ()) (index ())) [Closure/core:list] ]
[ 4]  14 : JMP_CLOSURE	1
                                      3: [ (let) [R1/15] ((field-name ()) (setter-name ()) (index ())) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (let) [R1/15] (((field-name ()) (setter-name ()) (index ()))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (let) (((field-name ()) (setter-name ()) (index ()))) ]
[ 2]  15 : LABEL	"R1"
                                      2: [ (let) (((field-name ()) (setter-name ()) (index ()))) ]
[ 2]  16 : SAVE_RETURN	"R4"	21
                                      3: [ (let) (((field-name ()) (setter-name ()) (index ()))) [R4/21] ]
[ 3]  17 : MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
                                      4: [ (let) (((field-name ()) (setter-name ()) (index ()))) [R4/21] [Closure] ]
[ 4]  18 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) (((field-name ()) (setter-name ()) (index ()))) [R4/21] [Closure] ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) ]
[ 5]  19 : GLOBAL_GET	map
                                      6: [ (let) (((field-name ()) (setter-name ()) (index ()))) [R4/21] [Closure] ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) [Closure/core:map] ]
[ 6]  20 : JMP_CLOSURE	2
                                      5: [ (let) (((field-name ()) (setter-name ()) (index ()))) [R4/21] [Closure] ((field-name (first def)) (setter-name (third def)) (index (+ 1 (record-type-field-index type field-name)))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (field-name (first def)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (field-name (first def)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (field-name (first def)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (field-name (first def)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! field-name (first def)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (setter-name (third def)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (setter-name (third def)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (setter-name (third def)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (setter-name (third def)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! setter-name (third def)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (index (+ 1 (record-type-field-index type field-name))) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (index (+ 1 (record-type-field-index type field-name))) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (index (+ 1 (record-type-field-index type field-name))) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (index (+ 1 (record-type-field-index type field-name))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! index (+ 1 (record-type-field-index type field-name))) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) (((field-name ()) (setter-name ()) (index ()))) [R4/21] ((set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) (((field-name ()) (setter-name ()) (index ()))) ((set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name)))) ]
[ 3]  21 : LABEL	"R4"
                                      3: [ (let) (((field-name ()) (setter-name ()) (index ()))) ((set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name)))) ]
[ 3]  22 : LOCAL_GET	0	1	; body
                                      4: [ (let) (((field-name ()) (setter-name ()) (index ()))) ((set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name)))) ((list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (let) (((field-name ()) (setter-name ()) (index ()))) ((set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name)))) ((list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) [Closure/core:append] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (let) (((field-name ()) (setter-name ()) (index ()))) ((set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name)))) ((list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] make-setter-defs ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] make-setter-defs [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] make-setter-defs ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] make-setter-defs ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] make-setter-defs [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] make-setter-defs ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (make-setter-defs) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (make-setter-defs) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (make-setter-defs) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (make-setter-defs) ((lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (make-setter-defs) ((lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (make-setter-defs) ((lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) [R4/28] quote make-setter-defs ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) [R4/28] quote make-setter-defs [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) [R4/28] quote make-setter-defs ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) [R4/28] (quote make-setter-defs) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) (quote make-setter-defs) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) (quote make-setter-defs) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) (quote make-setter-defs) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) (quote make-setter-defs) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! make-setter-defs (lambda (type args) (map (lambda (def) (if (< (length def) 3) (quote ()) (let ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))))) args))) (quote make-setter-defs)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      5: [ ((field-name ()) (setter-name ()) (index ())) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))) ]
[ 5]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((field-name ()) (setter-name ()) (index ())) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((field-name ()) (setter-name ()) (index ())) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((field-name ()) (setter-name ()) (index ())) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (field-name ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ field-name ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (setter-name ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ setter-name ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (index ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ index ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (field-name setter-name index) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (field-name setter-name index) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (field-name setter-name index) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (field-name setter-name index) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (field-name setter-name index) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((field-name setter-name index)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((field-name setter-name index)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((field-name setter-name index)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((field-name setter-name index)) ((set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((field-name setter-name index)) ((set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((field-name setter-name index)) ((set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) [R5/30] [Closure/core:cadr] ((field-name ()) (setter-name ()) (index ())) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) [R5/30] [Closure/core:cadr] ((field-name ()) (setter-name ()) (index ())) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) [R5/30] [Closure/core:cadr] ((field-name ()) (setter-name ()) (index ())) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (field-name ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (setter-name ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (index ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) [R5/30] (() () ()) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) (() () ()) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) (() () ()) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) (() () ()) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val))))) (() () ()) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) () () ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((define (make-setter-defs type args) (map (lambda (def) (if (< (length def) 3) (quote ()) ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) () () ()))) args)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; ((map (lambda (def) (if (< (length def) 3) (quote ()) ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) () () ()))) args))
	2	GLOBAL_SET	make-setter-defs
	3	STACK_POP
	4	PUSH_CONST	make-setter-defs
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((map (lambda (def) (if (< (length def) 3) (quote ()) ((lambda (field-name setter-name index) (set! field-name (first def)) (set! setter-name (third def)) (set! index (+ 1 (record-type-field-index type field-name))) (list (quote define) (list setter-name (quote rec) (quote val)) (list (quote vector-set!) (quote rec) index (quote val)))) () () ()))) args))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	make-setter-defs
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	make-setter-defs
                                      1: [ make-setter-defs ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (defmacro define-record-type (name constructor predicate . args) (letrec ((constructor-name (first constructor)) (fields (rest constructor)) (type (make-record-type name fields))) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	15
	7	SAVE_RETURN	"R2"	12
	8	MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
	9	LOCAL_GET	0	0	; bindings
	10	GLOBAL_GET	map
	11	JMP_CLOSURE	2
12	LABEL	"R2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	LABEL	"R1"
	16	SAVE_RETURN	"R4"	21
	17	MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
	18	LOCAL_GET	0	0	; bindings
	19	GLOBAL_GET	map
	20	JMP_CLOSURE	2
21	LABEL	"R4"
	22	LOCAL_GET	0	1	; body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      2: [ ((constructor-name (first constructor)) (fields (rest constructor)) (type (make-record-type name fields))) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	let
                                      2: [ [R0/5] let ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R0/5] let [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] let ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/5] (let) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (let) ]
[ 1]   5 : LABEL	"R0"
                                      1: [ (let) ]
[ 1]   6 : SAVE_RETURN	"R1"	15
                                      2: [ (let) [R1/15] ]
[ 2]   7 : SAVE_RETURN	"R2"	12
                                      3: [ (let) [R1/15] [R2/12] ]
[ 3]   8 : MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
                                      4: [ (let) [R1/15] [R2/12] [Closure] ]
[ 4]   9 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((constructor-name (first constructor)) (fields (rest constructor)) (type (make-record-type name fields))) ]
[ 5]  10 : GLOBAL_GET	map
                                      6: [ (let) [R1/15] [R2/12] [Closure] ((constructor-name (first constructor)) (fields (rest constructor)) (type (make-record-type name fields))) [Closure/core:map] ]
[ 6]  11 : JMP_CLOSURE	2
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((constructor-name (first constructor)) (fields (rest constructor)) (type (make-record-type name fields))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (constructor-name (first constructor)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (constructor-name (first constructor)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (constructor-name (first constructor)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (constructor-name (first constructor)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] constructor-name ]
[ 2]   1 : RETURN_VAL
                                      1: [ constructor-name ]
[ 1]   5 : LABEL	"R3"
                                      1: [ constructor-name ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ constructor-name () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ constructor-name () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ constructor-name () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (constructor-name ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (fields (rest constructor)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (fields (rest constructor)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (fields (rest constructor)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (fields (rest constructor)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] fields ]
[ 2]   1 : RETURN_VAL
                                      1: [ fields ]
[ 1]   5 : LABEL	"R3"
                                      1: [ fields ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ fields () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ fields () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ fields () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (fields ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (type (make-record-type name fields)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (type (make-record-type name fields)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (type (make-record-type name fields)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (type (make-record-type name fields)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] type ]
[ 2]   1 : RETURN_VAL
                                      1: [ type ]
[ 1]   5 : LABEL	"R3"
                                      1: [ type ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ type () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ type () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ type () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (type ()) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) [R1/15] [R2/12] ((constructor-name ()) (fields ()) (type ())) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) [R1/15] ((constructor-name ()) (fields ()) (type ())) ]
[ 3]  12 : LABEL	"R2"
                                      3: [ (let) [R1/15] ((constructor-name ()) (fields ()) (type ())) ]
[ 3]  13 : GLOBAL_GET	list
                                      4: [ (let) [R1/15] ((constructor-name ()) (fields ()) (type ())) [Closure/core:list] ]
[ 4]  14 : JMP_CLOSURE	1
                                      3: [ (let) [R1/15] ((constructor-name ()) (fields ()) (type ())) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (let) [R1/15] (((constructor-name ()) (fields ()) (type ()))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (let) (((constructor-name ()) (fields ()) (type ()))) ]
[ 2]  15 : LABEL	"R1"
                                      2: [ (let) (((constructor-name ()) (fields ()) (type ()))) ]
[ 2]  16 : SAVE_RETURN	"R4"	21
                                      3: [ (let) (((constructor-name ()) (fields ()) (type ()))) [R4/21] ]
[ 3]  17 : MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
                                      4: [ (let) (((constructor-name ()) (fields ()) (type ()))) [R4/21] [Closure] ]
[ 4]  18 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) (((constructor-name ()) (fields ()) (type ()))) [R4/21] [Closure] ((constructor-name (first constructor)) (fields (rest constructor)) (type (make-record-type name fields))) ]
[ 5]  19 : GLOBAL_GET	map
                                      6: [ (let) (((constructor-name ()) (fields ()) (type ()))) [R4/21] [Closure] ((constructor-name (first constructor)) (fields (rest constructor)) (type (make-record-type name fields))) [Closure/core:map] ]
[ 6]  20 : JMP_CLOSURE	2
                                      5: [ (let) (((constructor-name ()) (fields ()) (type ()))) [R4/21] [Closure] ((constructor-name (first constructor)) (fields (rest constructor)) (type (make-record-type name fields))) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (constructor-name (first constructor)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (constructor-name (first constructor)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (constructor-name (first constructor)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (constructor-name (first constructor)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! constructor-name (first constructor)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (fields (rest constructor)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (fields (rest constructor)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (fields (rest constructor)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (fields (rest constructor)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! fields (rest constructor)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (type (make-record-type name fields)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (type (make-record-type name fields)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (type (make-record-type name fields)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (type (make-record-type name fields)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! type (make-record-type name fields)) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) (((constructor-name ()) (fields ()) (type ()))) [R4/21] ((set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) (((constructor-name ()) (fields ()) (type ()))) ((set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields))) ]
[ 3]  21 : LABEL	"R4"
                                      3: [ (let) (((constructor-name ()) (fields ()) (type ()))) ((set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields))) ]
[ 3]  22 : LOCAL_GET	0	1	; body
                                      4: [ (let) (((constructor-name ()) (fields ()) (type ()))) ((set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields))) ((append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (let) (((constructor-name ()) (fields ()) (type ()))) ((set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields))) ((append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) [Closure/core:append] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (let) (((constructor-name ()) (fields ()) (type ()))) ((set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields))) ((append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (let ((constructor-name ()) (fields ()) (type ())) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      5: [ ((constructor-name ()) (fields ()) (type ())) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))) ]
[ 5]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((constructor-name ()) (fields ()) (type ())) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((constructor-name ()) (fields ()) (type ())) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((constructor-name ()) (fields ()) (type ())) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (constructor-name ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ constructor-name ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (fields ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ fields ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (type ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ type ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (constructor-name fields type) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (constructor-name fields type) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (constructor-name fields type) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (constructor-name fields type) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (constructor-name fields type) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((constructor-name fields type)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((constructor-name fields type)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((constructor-name fields type)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((constructor-name fields type)) ((set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((constructor-name fields type)) ((set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((constructor-name fields type)) ((set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) [R5/30] [Closure/core:cadr] ((constructor-name ()) (fields ()) (type ())) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) [R5/30] [Closure/core:cadr] ((constructor-name ()) (fields ()) (type ())) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) [R5/30] [Closure/core:cadr] ((constructor-name ()) (fields ()) (type ())) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (constructor-name ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (fields ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (type ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) [R5/30] (() () ()) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) (() () ()) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) (() () ()) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) (() () ()) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))) (() () ()) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (constructor-name fields type) (set! constructor-name (first constructor)) (set! fields (rest constructor)) (set! type (make-record-type name fields)) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type)))) () () ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; () => ((defmacro define-record-type (name constructor predicate . args) (letrec ((constructor-name (first constructor)) (fields (rest constructor)) (type (make-record-type name fields))) (append (list (quote begin)) (list (list (quote define) constructor (list (quote make-record-filled) type (append (list (quote list)) fields)))) (list (list (quote define) (list predicate (quote rec)) (list (quote and) (list (quote record?) (quote rec)) (list (quote record-type-equals?) (quote rec) type)))) (make-getter-defs type args) (make-setter-defs type args) (list (quote type))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (package-set "user")
Executing:  
	CODE BLOCK ; () => ((package-set "user"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"user"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"user"
                                      1: [ "user" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "user" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "user" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "user" ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (package-import "core")
Executing:  
	CODE BLOCK ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "core" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (package-import "record")
Executing:  
	CODE BLOCK ; () => ((package-import "record"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"record"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"record"
                                      1: [ "record" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "record" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "record" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (map number? '(a 2 "foo"))
ParseNext ==>  (map number? (quote (a 2 "foo")))
Parsed:  (core:map core:number? (quote (core:a 2 "foo")))
Compiled:
	CODE BLOCK ; () => ((map number? (quote (a 2 "foo"))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	number?
	2	PUSH_CONST	(a 2 "foo")
	3	GLOBAL_GET	map
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((map number? (quote (a 2 "foo"))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	number?
	2	PUSH_CONST	(a 2 "foo")
	3	GLOBAL_GET	map
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	number?
                                      1: [ [Closure/core:number?] ]
[ 1]   2 : PUSH_CONST	(a 2 "foo")
                                      2: [ [Closure/core:number?] (a 2 "foo") ]
[ 2]   3 : GLOBAL_GET	map
                                      3: [ [Closure/core:number?] (a 2 "foo") [Closure/core:map] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ [Closure/core:number?] (a 2 "foo") ]
[ 2]   0 : CALL_PRIMOP	"map"
Executing:  core:number?
	CODE BLOCK ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ a ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
Executing:  core:number?
	CODE BLOCK ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ 2 ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #t ]
[ 1]   1 : RETURN_VAL
Executing:  core:number?
	CODE BLOCK ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
                                      1: [ (#f #t #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#f #t #f)"  - expected "(#f #t #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo")
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(let ((x 1)) x))
ParseNext ==>  (mx1 (quote (let ((x 1)) x)))
Parsed:  (core:mx1 (quote (core:let ((foo:x 1)) foo:x)))
Compiled:
	CODE BLOCK ; () => ((mx1 (quote (let ((x 1)) x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let ((x 1)) x)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((mx1 (quote (let ((x 1)) x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let ((x 1)) x)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(let ((x 1)) x)
                                      1: [ (let ((x 1)) x) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (let ((x 1)) x) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (let ((x 1)) x) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1)) x ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) (x) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((x)) (x) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) (x) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (x) x) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (x) x) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (x) x) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (x) x) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (x) x) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (x) x)) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) x)) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (x) x)) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (x) x)) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) x)) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) x)) [R5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) x)) [R5/30] [Closure/core:cadr] ((x 1)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) x)) [R5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) x)) [R5/30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) x)) (1) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (x) x)) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) x)) (1) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) x)) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) x) 1) ]
[ 1]   1 : RETURN_VAL
                                      1: [ ((lambda (x) x) 1) ]
[ 1]   1 : RETURN_VAL
test: got "((lambda (foo:x) foo:x) 1)"  - expected "((lambda (foo:x) foo:x) 1)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(let ((x 1) (y 2)) (set! y 42) (+ x y)))
ParseNext ==>  (mx1 (quote (let ((x 1) (y 2)) (set! y 42) (+ x y))))
Parsed:  (core:mx1 (quote (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))))
Compiled:
	CODE BLOCK ; () => ((mx1 (quote (let ((x 1) (y 2)) (set! y 42) (+ x y)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let ((x 1) (y 2)) (set! y 42) (+ x y))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((mx1 (quote (let ((x 1) (y 2)) (set! y 42) (+ x y)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let ((x 1) (y 2)) (set! y 42) (+ x y))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(let ((x 1) (y 2)) (set! y 42) (+ x y))
                                      1: [ (let ((x 1) (y 2)) (set! y 42) (+ x y)) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (let ((x 1) (y 2)) (set! y 42) (+ x y)) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (let ((x 1) (y 2)) (set! y 42) (+ x y)) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((x 1) (y 2)) (set! y 42) (+ x y) ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1) (y 2)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (x y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((x y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((x y)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((x y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (x y) (set! y 42) (+ x y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (x y) (set! y 42) (+ x y)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (x y) (set! y 42) (+ x y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (set! y 42) (+ x y))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (x y) (set! y 42) (+ x y))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] [Closure/core:cadr] ((x 1) (y 2)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x y) (set! y 42) (+ x y)) 1 2) ]
[ 1]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (set! y 42) (+ x y)) 1 2) ]
[ 1]   1 : RETURN_VAL
test: got "((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) 1 2)"  - expected "((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) 1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(let* ((x 1) (y 2)) (+ x y)))
ParseNext ==>  (mx1 (quote (let* ((x 1) (y 2)) (+ x y))))
Parsed:  (core:mx1 (quote (core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y))))
Compiled:
	CODE BLOCK ; () => ((mx1 (quote (let* ((x 1) (y 2)) (+ x y)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let* ((x 1) (y 2)) (+ x y))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((mx1 (quote (let* ((x 1) (y 2)) (+ x y)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let* ((x 1) (y 2)) (+ x y))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(let* ((x 1) (y 2)) (+ x y))
                                      1: [ (let* ((x 1) (y 2)) (+ x y)) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (let* ((x 1) (y 2)) (+ x y)) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (let* ((x 1) (y 2)) (+ x y)) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((x 1) (y 2)) (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] ((x 1) (y 2)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((x 1) (y 2)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((x 1) (y 2)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"R2"	25
                                      2: [ let [R2/25] ]
[ 2]  18 : SAVE_RETURN	"R3"	22
                                      3: [ let [R2/25] [R3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [R2/25] [R3/22] ((x 1) (y 2)) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [R2/25] [R3/22] ((x 1) (y 2)) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [R2/25] [R3/22] ((x 1) (y 2)) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [R2/25] [R3/22] (x 1) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R2/25] (x 1) ]
[ 3]  22 : LABEL	"R3"
                                      3: [ let [R2/25] (x 1) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [R2/25] (x 1) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [R2/25] (x 1) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R2/25] ((x 1)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((x 1)) ]
[ 2]  25 : LABEL	"R2"
                                      2: [ let ((x 1)) ]
[ 2]  26 : SAVE_RETURN	"R4"	44
                                      3: [ let ((x 1)) [R4/44] ]
[ 3]  27 : SAVE_RETURN	"R5"	31
                                      4: [ let ((x 1)) [R4/44] [R5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((x 1)) [R4/44] [R5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((x 1)) [R4/44] [R5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((x 1)) [R4/44] [R5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((x 1)) [R4/44] [R5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((x 1)) [R4/44] (let*) ]
[ 4]  31 : LABEL	"R5"
                                      4: [ let ((x 1)) [R4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"R6"	40
                                      5: [ let ((x 1)) [R4/44] (let*) [R6/40] ]
[ 5]  33 : SAVE_RETURN	"R7"	37
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ((x 1) (y 2)) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ((x 1) (y 2)) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ((x 1) (y 2)) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ((y 2)) ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] ((y 2)) ]
[ 6]  37 : LABEL	"R7"
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] ((y 2)) ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((x 1)) [R4/44] (let*) [R6/40] ((y 2)) [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] ((y 2)) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] (((y 2))) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((x 1)) [R4/44] (let*) (((y 2))) ]
[ 5]  40 : LABEL	"R6"
                                      5: [ let ((x 1)) [R4/44] (let*) (((y 2))) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((x 1)) [R4/44] (let*) (((y 2))) ((+ x y)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((x 1)) [R4/44] (let*) (((y 2))) ((+ x y)) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((x 1)) [R4/44] (let*) (((y 2))) ((+ x y)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((x 1)) [R4/44] (let* ((y 2)) (+ x y)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((x 1)) (let* ((y 2)) (+ x y)) ]
[ 3]  44 : LABEL	"R4"
                                      3: [ let ((x 1)) (let* ((y 2)) (+ x y)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((x 1)) (let* ((y 2)) (+ x y)) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((x 1)) (let* ((y 2)) (+ x y)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((x 1)) (let* ((y 2)) (+ x y))) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (let ((x 1)) (let* ((y 2)) (+ x y))) ]
[ 1]   1 : RETURN_VAL
test: got "(core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)))"  - expected "(core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(define x 5))
ParseNext ==>  (mx1 (quote (define x 5)))
Parsed:  (core:mx1 (quote (core:define foo:x 5)))
Compiled:
	CODE BLOCK ; () => ((mx1 (quote (define x 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(define x 5)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((mx1 (quote (define x 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(define x 5)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(define x 5)
                                      1: [ (define x 5) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (define x 5) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (define x 5) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ x 5 ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] x ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] x [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] x ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] x ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] x [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (x) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (x) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (x) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (x) (5) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (x) (5) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (x) (5) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! x 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! x 5) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! x 5) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! x 5) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! x 5) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! x 5) [R4/28] quote x ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! x 5) [R4/28] quote x [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! x 5) [R4/28] quote x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! x 5) [R4/28] (quote x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! x 5) (quote x) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! x 5) (quote x)) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (begin (set! x 5) (quote x)) ]
[ 1]   1 : RETURN_VAL
test: got "(begin (set! foo:x 5) (quote foo:x))"  - expected "(begin (set! foo:x 5) (quote foo:x))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(define (x y) 5))
ParseNext ==>  (mx1 (quote (define (x y) 5)))
Parsed:  (core:mx1 (quote (core:define (foo:x foo:y) 5)))
Compiled:
	CODE BLOCK ; () => ((mx1 (quote (define (x y) 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(define (x y) 5)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((mx1 (quote (define (x y) 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(define (x y) 5)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(define (x y) 5)
                                      1: [ (define (x y) 5) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (define (x y) 5) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (define (x y) 5) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (x y) 5 ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (x y) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (x y) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (x y) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (x y) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (x y) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (x y) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] x ]
[ 3]   1 : RETURN_VAL
                                      2: [ define x ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define x ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define x [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define x [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define x [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define x [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define x [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define x [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define x [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define x [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define x [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define x [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define x [R6/56] (lambda) [R8/52] [R9/49] (x y) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define x [R6/56] (lambda) [R8/52] [R9/49] (x y) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define x [R6/56] (lambda) [R8/52] [R9/49] (x y) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define x [R6/56] (lambda) [R8/52] [R9/49] (y) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define x [R6/56] (lambda) [R8/52] (y) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define x [R6/56] (lambda) [R8/52] (y) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define x [R6/56] (lambda) [R8/52] (y) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define x [R6/56] (lambda) [R8/52] (y) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define x [R6/56] (lambda) [R8/52] ((y)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define x [R6/56] (lambda) ((y)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define x [R6/56] (lambda) ((y)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define x [R6/56] (lambda) ((y)) (5) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define x [R6/56] (lambda) ((y)) (5) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define x [R6/56] (lambda) ((y)) (5) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define x [R6/56] (lambda (y) 5) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define x (lambda (y) 5) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define x (lambda (y) 5) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define x (lambda (y) 5) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define x (lambda (y) 5) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define x (lambda (y) 5)) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (define x (lambda (y) 5)) ]
[ 1]   1 : RETURN_VAL
test: got "(core:define foo:x (lambda (foo:y) 5))"  - expected "(core:define foo:x (lambda (foo:y) 5))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (gensym) (gensym) (gensym "bar_"))
ParseNext ==>  (list (gensym) (gensym) (gensym "bar_"))
Parsed:  (core:list (core:gensym) (core:gensym) (core:gensym "bar_"))
Compiled:
	CODE BLOCK ; () => ((list (gensym) (gensym) (gensym "bar_")))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	4
	2	GLOBAL_GET	gensym
	3	JMP_CLOSURE	0
4	LABEL	"R0"
	5	SAVE_RETURN	"R1"	8
	6	GLOBAL_GET	gensym
	7	JMP_CLOSURE	0
8	LABEL	"R1"
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	"bar_"
	11	GLOBAL_GET	gensym
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	GLOBAL_GET	list
	15	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK ; () => ((list (gensym) (gensym) (gensym "bar_")))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	4
	2	GLOBAL_GET	gensym
	3	JMP_CLOSURE	0
4	LABEL	"R0"
	5	SAVE_RETURN	"R1"	8
	6	GLOBAL_GET	gensym
	7	JMP_CLOSURE	0
8	LABEL	"R1"
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	"bar_"
	11	GLOBAL_GET	gensym
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	GLOBAL_GET	list
	15	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	4
                                      1: [ [R0/4] ]
[ 1]   2 : GLOBAL_GET	gensym
                                      2: [ [R0/4] [Closure/core:gensym] ]
[ 2]   3 : JMP_CLOSURE	0
                                      1: [ [R0/4] ]
[ 1]   0 : CALL_PRIMOP	"gensym"
                                      2: [ [R0/4] GENSYM-1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ GENSYM-1 ]
[ 1]   4 : LABEL	"R0"
                                      1: [ GENSYM-1 ]
[ 1]   5 : SAVE_RETURN	"R1"	8
                                      2: [ GENSYM-1 [R1/8] ]
[ 2]   6 : GLOBAL_GET	gensym
                                      3: [ GENSYM-1 [R1/8] [Closure/core:gensym] ]
[ 3]   7 : JMP_CLOSURE	0
                                      2: [ GENSYM-1 [R1/8] ]
[ 2]   0 : CALL_PRIMOP	"gensym"
                                      3: [ GENSYM-1 [R1/8] GENSYM-2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ GENSYM-1 GENSYM-2 ]
[ 2]   8 : LABEL	"R1"
                                      2: [ GENSYM-1 GENSYM-2 ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ GENSYM-1 GENSYM-2 [R2/13] ]
[ 3]  10 : PUSH_CONST	"bar_"
                                      4: [ GENSYM-1 GENSYM-2 [R2/13] "bar_" ]
[ 4]  11 : GLOBAL_GET	gensym
                                      5: [ GENSYM-1 GENSYM-2 [R2/13] "bar_" [Closure/core:gensym] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ GENSYM-1 GENSYM-2 [R2/13] "bar_" ]
[ 4]   0 : CALL_PRIMOP	"gensym"
                                      4: [ GENSYM-1 GENSYM-2 [R2/13] bar_3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ GENSYM-1 GENSYM-2 bar_3 ]
[ 3]  13 : LABEL	"R2"
                                      3: [ GENSYM-1 GENSYM-2 bar_3 ]
[ 3]  14 : GLOBAL_GET	list
                                      4: [ GENSYM-1 GENSYM-2 bar_3 [Closure/core:list] ]
[ 4]  15 : JMP_CLOSURE	3
                                      3: [ GENSYM-1 GENSYM-2 bar_3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (GENSYM-1 GENSYM-2 bar_3) ]
[ 1]   1 : RETURN_VAL
test: got "(foo:GENSYM-1 foo:GENSYM-2 foo:bar_3)"  - expected "(foo:GENSYM-1 foo:GENSYM-2 foo:bar_3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((x 1)) (+ x 1))
ParseNext ==>  (let ((x 1)) (+ x 1))
Parsed:  (core:let ((foo:x 1)) (core:+ foo:x 1))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1)) (+ x 1) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) ((+ x 1)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((x)) ((+ x 1)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) ((+ x 1)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (x) (+ x 1)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (x) (+ x 1)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (x) (+ x 1)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (x) (+ x 1)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (x) (+ x 1)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (x) (+ x 1))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) (+ x 1))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (x) (+ x 1))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (x) (+ x 1))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) (+ x 1))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) (+ x 1))) [R5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) (+ x 1))) [R5/30] [Closure/core:cadr] ((x 1)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) (+ x 1))) [R5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) (+ x 1))) [R5/30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) (+ x 1))) (1) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (x) (+ x 1))) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) (+ x 1))) (1) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) (+ x 1))) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) (+ x 1)) 1) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (x) => ((+ x 1))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	PUSH_CONST	1
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

	CODE BLOCK ; () => ((let ((x 1)) (+ x 1)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((+ x 1))
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((let ((x 1)) (+ x 1)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((+ x 1))
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((+ x 1))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 1 1 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((x 1) (y 2)) (set! y 42) (+ x y))
ParseNext ==>  (let ((x 1) (y 2)) (set! y 42) (+ x y))
Parsed:  (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((x 1) (y 2)) (set! y 42) (+ x y) ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1) (y 2)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (x y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((x y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((x y)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((x y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (x y) (set! y 42) (+ x y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (x y) (set! y 42) (+ x y)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (x y) (set! y 42) (+ x y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (set! y 42) (+ x y))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (x y) (set! y 42) (+ x y))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] [Closure/core:cadr] ((x 1) (y 2)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) [R5/30] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x y) (set! y 42) (+ x y)) 1 2) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (x y) => ((set! y 42) (+ x y))
	0	MAKE_ENV	2	; (x y)
	1	PUSH_CONST	42
	2	LOCAL_SET	0	1	; y
	3	STACK_POP
	4	LOCAL_GET	0	0	; x
	5	LOCAL_GET	0	1	; y
	6	GLOBAL_GET	+
	7	JMP_CLOSURE	2

	CODE BLOCK ; () => ((let ((x 1) (y 2)) (set! y 42) (+ x y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; ((set! y 42) (+ x y))
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((let ((x 1) (y 2)) (set! y 42) (+ x y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; ((set! y 42) (+ x y))
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((set! y 42) (+ x y))
                                      3: [ 1 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : MAKE_ENV	2	; (x y)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	42
                                      1: [ 42 ]
[ 1]   2 : LOCAL_SET	0	1	; y
                                      1: [ 42 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   5 : LOCAL_GET	0	1	; y
                                      2: [ 1 42 ]
[ 2]   6 : GLOBAL_GET	+
                                      3: [ 1 42 [Closure/core:+] ]
[ 3]   7 : JMP_CLOSURE	2
                                      2: [ 1 42 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 43 ]
[ 1]   1 : RETURN_VAL
test: got "43"  - expected "43"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let* ((x 1) (y x)) (+ x y))
ParseNext ==>  (let* ((x 1) (y x)) (+ x y))
Parsed:  (core:let* ((foo:x 1) (foo:y foo:x)) (core:+ foo:x foo:y))
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((x 1) (y x)) (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] ((x 1) (y x)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((x 1) (y x)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((x 1) (y x)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"R2"	25
                                      2: [ let [R2/25] ]
[ 2]  18 : SAVE_RETURN	"R3"	22
                                      3: [ let [R2/25] [R3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [R2/25] [R3/22] ((x 1) (y x)) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [R2/25] [R3/22] ((x 1) (y x)) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [R2/25] [R3/22] ((x 1) (y x)) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [R2/25] [R3/22] (x 1) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R2/25] (x 1) ]
[ 3]  22 : LABEL	"R3"
                                      3: [ let [R2/25] (x 1) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [R2/25] (x 1) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [R2/25] (x 1) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R2/25] ((x 1)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((x 1)) ]
[ 2]  25 : LABEL	"R2"
                                      2: [ let ((x 1)) ]
[ 2]  26 : SAVE_RETURN	"R4"	44
                                      3: [ let ((x 1)) [R4/44] ]
[ 3]  27 : SAVE_RETURN	"R5"	31
                                      4: [ let ((x 1)) [R4/44] [R5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((x 1)) [R4/44] [R5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((x 1)) [R4/44] [R5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((x 1)) [R4/44] [R5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((x 1)) [R4/44] [R5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((x 1)) [R4/44] (let*) ]
[ 4]  31 : LABEL	"R5"
                                      4: [ let ((x 1)) [R4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"R6"	40
                                      5: [ let ((x 1)) [R4/44] (let*) [R6/40] ]
[ 5]  33 : SAVE_RETURN	"R7"	37
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ((x 1) (y x)) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ((x 1) (y x)) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ((x 1) (y x)) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((x 1)) [R4/44] (let*) [R6/40] [R7/37] ((y x)) ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] ((y x)) ]
[ 6]  37 : LABEL	"R7"
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] ((y x)) ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((x 1)) [R4/44] (let*) [R6/40] ((y x)) [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] ((y x)) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((x 1)) [R4/44] (let*) [R6/40] (((y x))) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((x 1)) [R4/44] (let*) (((y x))) ]
[ 5]  40 : LABEL	"R6"
                                      5: [ let ((x 1)) [R4/44] (let*) (((y x))) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((x 1)) [R4/44] (let*) (((y x))) ((+ x y)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((x 1)) [R4/44] (let*) (((y x))) ((+ x y)) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((x 1)) [R4/44] (let*) (((y x))) ((+ x y)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((x 1)) [R4/44] (let* ((y x)) (+ x y)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((x 1)) (let* ((y x)) (+ x y)) ]
[ 3]  44 : LABEL	"R4"
                                      3: [ let ((x 1)) (let* ((y x)) (+ x y)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((x 1)) (let* ((y x)) (+ x y)) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((x 1)) (let* ((y x)) (+ x y)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((x 1)) (let* ((y x)) (+ x y))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((y x)) (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] ((y x)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((y x)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((y x)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"R2"	25
                                      2: [ let [R2/25] ]
[ 2]  18 : SAVE_RETURN	"R3"	22
                                      3: [ let [R2/25] [R3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [R2/25] [R3/22] ((y x)) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [R2/25] [R3/22] ((y x)) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [R2/25] [R3/22] ((y x)) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [R2/25] [R3/22] (y x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R2/25] (y x) ]
[ 3]  22 : LABEL	"R3"
                                      3: [ let [R2/25] (y x) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [R2/25] (y x) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [R2/25] (y x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R2/25] ((y x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((y x)) ]
[ 2]  25 : LABEL	"R2"
                                      2: [ let ((y x)) ]
[ 2]  26 : SAVE_RETURN	"R4"	44
                                      3: [ let ((y x)) [R4/44] ]
[ 3]  27 : SAVE_RETURN	"R5"	31
                                      4: [ let ((y x)) [R4/44] [R5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((y x)) [R4/44] [R5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((y x)) [R4/44] [R5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((y x)) [R4/44] [R5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((y x)) [R4/44] [R5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((y x)) [R4/44] (let*) ]
[ 4]  31 : LABEL	"R5"
                                      4: [ let ((y x)) [R4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"R6"	40
                                      5: [ let ((y x)) [R4/44] (let*) [R6/40] ]
[ 5]  33 : SAVE_RETURN	"R7"	37
                                      6: [ let ((y x)) [R4/44] (let*) [R6/40] [R7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((y x)) [R4/44] (let*) [R6/40] [R7/37] ((y x)) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((y x)) [R4/44] (let*) [R6/40] [R7/37] ((y x)) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((y x)) [R4/44] (let*) [R6/40] [R7/37] ((y x)) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((y x)) [R4/44] (let*) [R6/40] [R7/37] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((y x)) [R4/44] (let*) [R6/40] () ]
[ 6]  37 : LABEL	"R7"
                                      6: [ let ((y x)) [R4/44] (let*) [R6/40] () ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((y x)) [R4/44] (let*) [R6/40] () [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((y x)) [R4/44] (let*) [R6/40] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((y x)) [R4/44] (let*) [R6/40] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((y x)) [R4/44] (let*) (()) ]
[ 5]  40 : LABEL	"R6"
                                      5: [ let ((y x)) [R4/44] (let*) (()) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((y x)) [R4/44] (let*) (()) ((+ x y)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((y x)) [R4/44] (let*) (()) ((+ x y)) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((y x)) [R4/44] (let*) (()) ((+ x y)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((y x)) [R4/44] (let* () (+ x y)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((y x)) (let* () (+ x y)) ]
[ 3]  44 : LABEL	"R4"
                                      3: [ let ((y x)) (let* () (+ x y)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((y x)) (let* () (+ x y)) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((y x)) (let* () (+ x y)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((y x)) (let* () (+ x y))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"R2"	25
	18	SAVE_RETURN	"R3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"R3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"R2"
	26	SAVE_RETURN	"R4"	44
	27	SAVE_RETURN	"R5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"R5"
	32	SAVE_RETURN	"R6"	40
	33	SAVE_RETURN	"R7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"R7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"R6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"R4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ () (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R1"	11
                                      1: [ [R1/11] ]
[ 1]   8 : PUSH_CONST	begin
                                      2: [ [R1/11] begin ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [R1/11] begin [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [R1/11] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R1/11] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  11 : LABEL	"R1"
                                      1: [ (begin) ]
[ 1]  12 : LOCAL_GET	0	1	; body
                                      2: [ (begin) ((+ x y)) ]
[ 2]  13 : GLOBAL_GET	append
                                      3: [ (begin) ((+ x y)) [Closure/core:append] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (begin) ((+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (+ x y)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1)) (let ((y x)) (begin (+ x y))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) ((let ((y x)) (begin (+ x y)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((x)) ((let ((y x)) (begin (+ x y)))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) ((let ((y x)) (begin (+ x y)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (x) (let ((y x)) (begin (+ x y)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (x) (let ((y x)) (begin (+ x y)))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (x) (let ((y x)) (begin (+ x y)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (x) (let ((y x)) (begin (+ x y)))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (x) (let ((y x)) (begin (+ x y)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (x) (let ((y x)) (begin (+ x y))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [R5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [R5/30] [Closure/core:cadr] ((x 1)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [R5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [R5/30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) (1) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) (1) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) (let ((y x)) (begin (+ x y)))) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((y x)) (begin (+ x y)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((y x)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((y x)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((y x)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y x) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (y) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((y)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((y)) ((begin (+ x y))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((y)) ((begin (+ x y))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((y)) ((begin (+ x y))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (y) (begin (+ x y))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (y) (begin (+ x y))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (y) (begin (+ x y))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (y) (begin (+ x y))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (y) (begin (+ x y))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (y) (begin (+ x y)))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (y) (begin (+ x y)))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (y) (begin (+ x y)))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (y) (begin (+ x y)))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (y) (begin (+ x y)))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (y) (begin (+ x y)))) [R5/30] [Closure/core:cadr] ((y x)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (y) (begin (+ x y)))) [R5/30] [Closure/core:cadr] ((y x)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (y) (begin (+ x y)))) [R5/30] [Closure/core:cadr] ((y x)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y x) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (y) (begin (+ x y)))) [R5/30] (x) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (y) (begin (+ x y)))) (x) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (y) (begin (+ x y)))) (x) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (y) (begin (+ x y)))) (x) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (y) (begin (+ x y)))) (x) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (y) (begin (+ x y))) x) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (y) => ((begin (+ x y)))
	0	MAKE_ENV	1	; (y)
	1	LOCAL_GET	1	0	; x
	2	LOCAL_GET	0	0	; y
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

	CODE BLOCK ; (x) => ((let ((y x)) (begin (+ x y))))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	MAKE_CLOSURE	[Closure]	; ((begin (+ x y)))
	3	JMP_CLOSURE	1

	CODE BLOCK ; () => ((let* ((x 1) (y x)) (+ x y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((let ((y x)) (begin (+ x y))))
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((let* ((x 1) (y x)) (+ x y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((let ((y x)) (begin (+ x y))))
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((let ((y x)) (begin (+ x y))))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((begin (+ x y)))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (y)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	0	; x
                                      1: [ 1 ]
[ 1]   2 : LOCAL_GET	0	0	; y
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 1 1 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((x 1)) (let ((y x)) (+ x y)))
ParseNext ==>  (let ((x 1)) (let ((y x)) (+ x y)))
Parsed:  (core:let ((foo:x 1)) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1)) (let ((y x)) (+ x y)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) ((let ((y x)) (+ x y))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((x)) ((let ((y x)) (+ x y))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) ((let ((y x)) (+ x y))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (x) (let ((y x)) (+ x y))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (x) (let ((y x)) (+ x y))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (x) (let ((y x)) (+ x y))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (x) (let ((y x)) (+ x y))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (x) (let ((y x)) (+ x y))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (x) (let ((y x)) (+ x y)))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) (let ((y x)) (+ x y)))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (x) (let ((y x)) (+ x y)))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (x) (let ((y x)) (+ x y)))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) (let ((y x)) (+ x y)))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) (let ((y x)) (+ x y)))) [R5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) (let ((y x)) (+ x y)))) [R5/30] [Closure/core:cadr] ((x 1)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) (let ((y x)) (+ x y)))) [R5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) (let ((y x)) (+ x y)))) [R5/30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) (let ((y x)) (+ x y)))) (1) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (x) (let ((y x)) (+ x y)))) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) (let ((y x)) (+ x y)))) (1) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) (let ((y x)) (+ x y)))) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) (let ((y x)) (+ x y))) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((y x)) (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((y x)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((y x)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((y x)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y x) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (y) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((y)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((y)) ((+ x y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((y)) ((+ x y)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((y)) ((+ x y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (y) (+ x y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (y) (+ x y)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (y) (+ x y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (y) (+ x y)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (y) (+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (y) (+ x y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (y) (+ x y))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (y) (+ x y))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (y) (+ x y))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (y) (+ x y))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (y) (+ x y))) [R5/30] [Closure/core:cadr] ((y x)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (y) (+ x y))) [R5/30] [Closure/core:cadr] ((y x)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (y) (+ x y))) [R5/30] [Closure/core:cadr] ((y x)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y x) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (y) (+ x y))) [R5/30] (x) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (y) (+ x y))) (x) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (y) (+ x y))) (x) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (y) (+ x y))) (x) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (y) (+ x y))) (x) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (y) (+ x y)) x) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (y) => ((+ x y))
	0	MAKE_ENV	1	; (y)
	1	LOCAL_GET	1	0	; x
	2	LOCAL_GET	0	0	; y
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

	CODE BLOCK ; (x) => ((let ((y x)) (+ x y)))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	MAKE_CLOSURE	[Closure]	; ((+ x y))
	3	JMP_CLOSURE	1

	CODE BLOCK ; () => ((let ((x 1)) (let ((y x)) (+ x y))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((let ((y x)) (+ x y)))
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((let ((x 1)) (let ((y x)) (+ x y))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((let ((y x)) (+ x y)))
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((let ((y x)) (+ x y)))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((+ x y))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (y)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	0	; x
                                      1: [ 1 ]
[ 1]   2 : LOCAL_GET	0	0	; y
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 1 1 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (letrec ((x (lambda () y)) (y 1)) (x))
ParseNext ==>  (letrec ((x (lambda () y)) (y 1)) (x))
Parsed:  (core:letrec ((foo:x (lambda () foo:y)) (foo:y 1)) (foo:x))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	15
	7	SAVE_RETURN	"R2"	12
	8	MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
	9	LOCAL_GET	0	0	; bindings
	10	GLOBAL_GET	map
	11	JMP_CLOSURE	2
12	LABEL	"R2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	LABEL	"R1"
	16	SAVE_RETURN	"R4"	21
	17	MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
	18	LOCAL_GET	0	0	; bindings
	19	GLOBAL_GET	map
	20	JMP_CLOSURE	2
21	LABEL	"R4"
	22	LOCAL_GET	0	1	; body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      2: [ ((x (lambda () y)) (y 1)) (x) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	let
                                      2: [ [R0/5] let ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R0/5] let [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] let ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/5] (let) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (let) ]
[ 1]   5 : LABEL	"R0"
                                      1: [ (let) ]
[ 1]   6 : SAVE_RETURN	"R1"	15
                                      2: [ (let) [R1/15] ]
[ 2]   7 : SAVE_RETURN	"R2"	12
                                      3: [ (let) [R1/15] [R2/12] ]
[ 3]   8 : MAKE_CLOSURE	[Closure]	; ((list (car v) nil))
                                      4: [ (let) [R1/15] [R2/12] [Closure] ]
[ 4]   9 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((x (lambda () y)) (y 1)) ]
[ 5]  10 : GLOBAL_GET	map
                                      6: [ (let) [R1/15] [R2/12] [Closure] ((x (lambda () y)) (y 1)) [Closure/core:map] ]
[ 6]  11 : JMP_CLOSURE	2
                                      5: [ (let) [R1/15] [R2/12] [Closure] ((x (lambda () y)) (y 1)) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (x (lambda () y)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (x (lambda () y)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (x (lambda () y)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (x (lambda () y)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] x ]
[ 2]   1 : RETURN_VAL
                                      1: [ x ]
[ 1]   5 : LABEL	"R3"
                                      1: [ x ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ x () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ x () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ x () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (x ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (y 1) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	5
                                      1: [ [R3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R3/5] (y 1) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R3/5] (y 1) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R3/5] (y 1) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R3/5] y ]
[ 2]   1 : RETURN_VAL
                                      1: [ y ]
[ 1]   5 : LABEL	"R3"
                                      1: [ y ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ y () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ y () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ y () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (y ()) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) [R1/15] [R2/12] ((x ()) (y ())) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) [R1/15] ((x ()) (y ())) ]
[ 3]  12 : LABEL	"R2"
                                      3: [ (let) [R1/15] ((x ()) (y ())) ]
[ 3]  13 : GLOBAL_GET	list
                                      4: [ (let) [R1/15] ((x ()) (y ())) [Closure/core:list] ]
[ 4]  14 : JMP_CLOSURE	1
                                      3: [ (let) [R1/15] ((x ()) (y ())) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (let) [R1/15] (((x ()) (y ()))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (let) (((x ()) (y ()))) ]
[ 2]  15 : LABEL	"R1"
                                      2: [ (let) (((x ()) (y ()))) ]
[ 2]  16 : SAVE_RETURN	"R4"	21
                                      3: [ (let) (((x ()) (y ()))) [R4/21] ]
[ 3]  17 : MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) v))
                                      4: [ (let) (((x ()) (y ()))) [R4/21] [Closure] ]
[ 4]  18 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) (((x ()) (y ()))) [R4/21] [Closure] ((x (lambda () y)) (y 1)) ]
[ 5]  19 : GLOBAL_GET	map
                                      6: [ (let) (((x ()) (y ()))) [R4/21] [Closure] ((x (lambda () y)) (y 1)) [Closure/core:map] ]
[ 6]  20 : JMP_CLOSURE	2
                                      5: [ (let) (((x ()) (y ()))) [R4/21] [Closure] ((x (lambda () y)) (y 1)) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (x (lambda () y)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (x (lambda () y)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (x (lambda () y)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (x (lambda () y)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! x (lambda () y)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"R5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (y 1) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R5"	5
                                      1: [ [R5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [R5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"R5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (y 1) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (y 1) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (y 1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! y 1) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) (((x ()) (y ()))) [R4/21] ((set! x (lambda () y)) (set! y 1)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ]
[ 3]  21 : LABEL	"R4"
                                      3: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ]
[ 3]  22 : LOCAL_GET	0	1	; body
                                      4: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ((x)) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ((x)) [Closure/core:append] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ((x)) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (let ((x ()) (y ())) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      4: [ ((x ()) (y ())) (set! x (lambda () y)) (set! y 1) (x) ]
[ 4]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x ()) (y ())) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x ()) (y ())) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x ()) (y ())) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (x y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((x y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((x y)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((x y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((x y)) ((set! x (lambda () y)) (set! y 1) (x)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((x y)) ((set! x (lambda () y)) (set! y 1) (x)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((x y)) ((set! x (lambda () y)) (set! y 1) (x)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [R5/30] [Closure/core:cadr] ((x ()) (y ())) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [R5/30] [Closure/core:cadr] ((x ()) (y ())) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [R5/30] [Closure/core:cadr] ((x ()) (y ())) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [R5/30] (() ()) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) (() ()) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) (() ()) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) (() ()) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) (() ()) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) () ()) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => (y)
	0	MAKE_ENV	0	; ()
	1	LOCAL_GET	1	1	; y
	2	RETURN_VAL

	CODE BLOCK ; (x y) => ((set! x (lambda () y)) (set! y 1) (x))
	0	MAKE_ENV	2	; (x y)
	1	MAKE_CLOSURE	[Closure]	; (y)
	2	LOCAL_SET	0	0	; x
	3	STACK_POP
	4	PUSH_CONST	1
	5	LOCAL_SET	0	1	; y
	6	STACK_POP
	7	LOCAL_GET	0	0	; x
	8	JMP_CLOSURE	0

	CODE BLOCK ; () => ((letrec ((x (lambda () y)) (y 1)) (x)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	PUSH_CONST	()
	3	MAKE_CLOSURE	[Closure]	; ((set! x (lambda () y)) (set! y 1) (x))
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((letrec ((x (lambda () y)) (y 1)) (x)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	PUSH_CONST	()
	3	MAKE_CLOSURE	[Closure]	; ((set! x (lambda () y)) (set! y 1) (x))
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ () () ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((set! x (lambda () y)) (set! y 1) (x))
                                      3: [ () () [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ () () ]
[ 2]   0 : MAKE_ENV	2	; (x y)
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; (y)
                                      1: [ [Closure] ]
[ 1]   2 : LOCAL_SET	0	0	; x
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   5 : LOCAL_SET	0	1	; y
                                      1: [ 1 ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : LOCAL_GET	0	0	; x
                                      1: [ [Closure] ]
[ 1]   8 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	1	; y
                                      1: [ 1 ]
[ 1]   2 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (let ((x 0)) (define (set v) (set! x v)) (define (get) x)) (set 5) (get))
ParseNext ==>  (begin (let ((x 0)) (define (set v) (set! x v)) (define (get) x)) (set 5) (get))
Parsed:  (begin (core:let ((foo:x 0)) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) (foo:set 5) (foo:get))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((x 0)) (define (set v) (set! x v)) (define (get) x) ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 0)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 0)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((x 0)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 0) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) ((define (set v) (set! x v)) (define (get) x)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((x)) ((define (set v) (set! x v)) (define (get) x)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((x)) ((define (set v) (set! x v)) (define (get) x)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (x) (define (set v) (set! x v)) (define (get) x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (x) (define (set v) (set! x v)) (define (get) x)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (x) (define (set v) (set! x v)) (define (get) x)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (x) (define (set v) (set! x v)) (define (get) x)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (x) (define (set v) (set! x v)) (define (get) x)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (x) (define (set v) (set! x v)) (define (get) x))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [R5/30] [Closure/core:cadr] ((x 0)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [R5/30] [Closure/core:cadr] ((x 0)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [R5/30] [Closure/core:cadr] ((x 0)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 0) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 0 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [R5/30] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) (0) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) (0) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) (0) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) (0) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x)) 0) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (set v) (set! x v) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (set v) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (set v) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (set v) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (set v) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (set v) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (set v) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] set ]
[ 3]   1 : RETURN_VAL
                                      2: [ define set ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define set ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define set [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define set [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define set [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define set [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define set [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define set [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define set [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define set [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define set [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define set [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define set [R6/56] (lambda) [R8/52] [R9/49] (set v) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define set [R6/56] (lambda) [R8/52] [R9/49] (set v) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define set [R6/56] (lambda) [R8/52] [R9/49] (set v) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define set [R6/56] (lambda) [R8/52] [R9/49] (v) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define set [R6/56] (lambda) [R8/52] (v) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define set [R6/56] (lambda) [R8/52] (v) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define set [R6/56] (lambda) [R8/52] (v) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define set [R6/56] (lambda) [R8/52] (v) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define set [R6/56] (lambda) [R8/52] ((v)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define set [R6/56] (lambda) ((v)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define set [R6/56] (lambda) ((v)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define set [R6/56] (lambda) ((v)) ((set! x v)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define set [R6/56] (lambda) ((v)) ((set! x v)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define set [R6/56] (lambda) ((v)) ((set! x v)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define set [R6/56] (lambda (v) (set! x v)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define set (lambda (v) (set! x v)) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define set (lambda (v) (set! x v)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define set (lambda (v) (set! x v)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define set (lambda (v) (set! x v)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define set (lambda (v) (set! x v))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ set (lambda (v) (set! x v)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] set ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] set [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] set ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] set ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] set [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] set ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (set) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (set) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (set) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (set) ((lambda (v) (set! x v))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (set) ((lambda (v) (set! x v))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (set) ((lambda (v) (set! x v))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! set (lambda (v) (set! x v))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! set (lambda (v) (set! x v))) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! set (lambda (v) (set! x v))) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! set (lambda (v) (set! x v))) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! set (lambda (v) (set! x v))) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! set (lambda (v) (set! x v))) [R4/28] quote set ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! set (lambda (v) (set! x v))) [R4/28] quote set [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! set (lambda (v) (set! x v))) [R4/28] quote set ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! set (lambda (v) (set! x v))) [R4/28] (quote set) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! set (lambda (v) (set! x v))) (quote set) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! set (lambda (v) (set! x v))) (quote set) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! set (lambda (v) (set! x v))) (quote set) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! set (lambda (v) (set! x v))) (quote set) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! set (lambda (v) (set! x v))) (quote set)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (get) x ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (get) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (get) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (get) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (get) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (get) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (get) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] get ]
[ 3]   1 : RETURN_VAL
                                      2: [ define get ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define get ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define get [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define get [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define get [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define get [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define get [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define get [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define get [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define get [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define get [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define get [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define get [R6/56] (lambda) [R8/52] [R9/49] (get) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define get [R6/56] (lambda) [R8/52] [R9/49] (get) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define get [R6/56] (lambda) [R8/52] [R9/49] (get) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define get [R6/56] (lambda) [R8/52] [R9/49] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ define get [R6/56] (lambda) [R8/52] () ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define get [R6/56] (lambda) [R8/52] () ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define get [R6/56] (lambda) [R8/52] () [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define get [R6/56] (lambda) [R8/52] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define get [R6/56] (lambda) [R8/52] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define get [R6/56] (lambda) (()) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define get [R6/56] (lambda) (()) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define get [R6/56] (lambda) (()) (x) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define get [R6/56] (lambda) (()) (x) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define get [R6/56] (lambda) (()) (x) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define get [R6/56] (lambda () x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define get (lambda () x) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define get (lambda () x) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define get (lambda () x) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define get (lambda () x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define get (lambda () x)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ get (lambda () x) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] get ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] get [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] get ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] get ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] get [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] get ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (get) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (get) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (get) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (get) ((lambda () x)) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (get) ((lambda () x)) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (get) ((lambda () x)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! get (lambda () x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! get (lambda () x)) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! get (lambda () x)) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! get (lambda () x)) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! get (lambda () x)) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! get (lambda () x)) [R4/28] quote get ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! get (lambda () x)) [R4/28] quote get [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! get (lambda () x)) [R4/28] quote get ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! get (lambda () x)) [R4/28] (quote get) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! get (lambda () x)) (quote get) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! get (lambda () x)) (quote get) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! get (lambda () x)) (quote get) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! get (lambda () x)) (quote get) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! get (lambda () x)) (quote get)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (v) => ((set! x v))
	0	MAKE_ENV	1	; (v)
	1	LOCAL_GET	0	0	; v
	2	LOCAL_SET	1	0	; x
	3	RETURN_VAL

	CODE BLOCK ; () => (x)
	0	MAKE_ENV	0	; ()
	1	LOCAL_GET	1	0	; x
	2	RETURN_VAL

	CODE BLOCK ; (x) => ((define (set v) (set! x v)) (define (get) x))
	0	MAKE_ENV	1	; (x)
	1	MAKE_CLOSURE	[Closure]	; ((set! x v))
	2	GLOBAL_SET	set
	3	STACK_POP
	4	MAKE_CLOSURE	[Closure]	; (x)
	5	GLOBAL_SET	get
	6	STACK_POP
	7	PUSH_CONST	get
	8	RETURN_VAL

	CODE BLOCK ; () => ((begin (let ((x 0)) (define (set v) (set! x v)) (define (get) x)) (set 5) (get)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; ((define (set v) (set! x v)) (define (get) x))
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	STACK_POP
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	5
	9	GLOBAL_GET	set
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	STACK_POP
	13	GLOBAL_GET	get
	14	JMP_CLOSURE	0

Running...
Executing:  
	CODE BLOCK ; () => ((begin (let ((x 0)) (define (set v) (set! x v)) (define (get) x)) (set 5) (get)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; ((define (set v) (set! x v)) (define (get) x))
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	STACK_POP
	7	SAVE_RETURN	"R1"	11
	8	PUSH_CONST	5
	9	GLOBAL_GET	set
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	STACK_POP
	13	GLOBAL_GET	get
	14	JMP_CLOSURE	0

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	0
                                      2: [ [R0/5] 0 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((define (set v) (set! x v)) (define (get) x))
                                      3: [ [R0/5] 0 [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] 0 ]
[ 2]   0 : MAKE_ENV	1	; (x)
                                      1: [ [R0/5] ]
[ 1]   1 : MAKE_CLOSURE	[Closure]	; ((set! x v))
                                      2: [ [R0/5] [Closure] ]
[ 2]   2 : GLOBAL_SET	set
                                      2: [ [R0/5] [Closure] ]
[ 2]   3 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]   4 : MAKE_CLOSURE	[Closure]	; (x)
                                      2: [ [R0/5] [Closure] ]
[ 2]   5 : GLOBAL_SET	get
                                      2: [ [R0/5] [Closure] ]
[ 2]   6 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]   7 : PUSH_CONST	get
                                      2: [ [R0/5] get ]
[ 2]   8 : RETURN_VAL
                                      1: [ get ]
[ 1]   5 : LABEL	"R0"
                                      1: [ get ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R1"	11
                                      1: [ [R1/11] ]
[ 1]   8 : PUSH_CONST	5
                                      2: [ [R1/11] 5 ]
[ 2]   9 : GLOBAL_GET	set
                                      3: [ [R1/11] 5 [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [R1/11] 5 ]
[ 2]   0 : MAKE_ENV	1	; (v)
                                      1: [ [R1/11] ]
[ 1]   1 : LOCAL_GET	0	0	; v
                                      2: [ [R1/11] 5 ]
[ 2]   2 : LOCAL_SET	1	0	; x
                                      2: [ [R1/11] 5 ]
[ 2]   3 : RETURN_VAL
                                      1: [ 5 ]
[ 1]  11 : LABEL	"R1"
                                      1: [ 5 ]
[ 1]  12 : STACK_POP
                                      0: [  ]
[ 0]  13 : GLOBAL_GET	get
                                      1: [ [Closure] ]
[ 1]  14 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	0	; x
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (define x 5) x
ParseNext ==>  (define x 5)
Parsed:  (core:define foo:x 5)
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ x 5 ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] x ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] x [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] x ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] x ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] x [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (x) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (x) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (x) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (x) (5) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (x) (5) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (x) (5) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! x 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! x 5) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! x 5) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! x 5) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! x 5) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! x 5) [R4/28] quote x ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! x 5) [R4/28] quote x [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! x 5) [R4/28] quote x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! x 5) [R4/28] (quote x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! x 5) (quote x) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! x 5) (quote x)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((define x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	x
	5	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((define x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	x
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 5 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	x
                                      1: [ x ]
[ 1]   5 : RETURN_VAL
test: got "foo:x"  - expected "foo:x"
ParseNext ==>  x
Parsed:  foo:x
Compiled:
	CODE BLOCK ; () => (x)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => (x)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	x
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (define (x y) y) (x 5)
ParseNext ==>  (define (x y) y)
Parsed:  (core:define (foo:x foo:y) foo:y)
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (x y) y ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] (x y) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] (x y) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (x y) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"R5"	37
                                      2: [ define [R5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [R5/37] (x y) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [R5/37] (x y) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [R5/37] (x y) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [R5/37] x ]
[ 3]   1 : RETURN_VAL
                                      2: [ define x ]
[ 2]  37 : LABEL	"R5"
                                      2: [ define x ]
[ 2]  38 : SAVE_RETURN	"R6"	56
                                      3: [ define x [R6/56] ]
[ 3]  39 : SAVE_RETURN	"R7"	43
                                      4: [ define x [R6/56] [R7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define x [R6/56] [R7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define x [R6/56] [R7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define x [R6/56] [R7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define x [R6/56] [R7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define x [R6/56] (lambda) ]
[ 4]  43 : LABEL	"R7"
                                      4: [ define x [R6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"R8"	52
                                      5: [ define x [R6/56] (lambda) [R8/52] ]
[ 5]  45 : SAVE_RETURN	"R9"	49
                                      6: [ define x [R6/56] (lambda) [R8/52] [R9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define x [R6/56] (lambda) [R8/52] [R9/49] (x y) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define x [R6/56] (lambda) [R8/52] [R9/49] (x y) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define x [R6/56] (lambda) [R8/52] [R9/49] (x y) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define x [R6/56] (lambda) [R8/52] [R9/49] (y) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define x [R6/56] (lambda) [R8/52] (y) ]
[ 6]  49 : LABEL	"R9"
                                      6: [ define x [R6/56] (lambda) [R8/52] (y) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define x [R6/56] (lambda) [R8/52] (y) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define x [R6/56] (lambda) [R8/52] (y) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define x [R6/56] (lambda) [R8/52] ((y)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define x [R6/56] (lambda) ((y)) ]
[ 5]  52 : LABEL	"R8"
                                      5: [ define x [R6/56] (lambda) ((y)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define x [R6/56] (lambda) ((y)) (y) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define x [R6/56] (lambda) ((y)) (y) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define x [R6/56] (lambda) ((y)) (y) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define x [R6/56] (lambda (y) y) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define x (lambda (y) y) ]
[ 3]  56 : LABEL	"R6"
                                      3: [ define x (lambda (y) y) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define x (lambda (y) y) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define x (lambda (y) y) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define x (lambda (y) y)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"R1"	22
	9	SAVE_RETURN	"R2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"R2"
	14	SAVE_RETURN	"R3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"R3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"R1"
	23	SAVE_RETURN	"R4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"R4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"R5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"R5"
	38	SAVE_RETURN	"R6"	56
	39	SAVE_RETURN	"R7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"R7"
	44	SAVE_RETURN	"R8"	52
	45	SAVE_RETURN	"R9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"R9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"R6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ x (lambda (y) y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [R0/5] x ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [R0/5] x [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] x ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"R1"	22
                                      2: [ begin [R1/22] ]
[ 2]   9 : SAVE_RETURN	"R2"	13
                                      3: [ begin [R1/22] [R2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [R1/22] [R2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [R1/22] [R2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [R1/22] [R2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [R1/22] (set!) ]
[ 3]  13 : LABEL	"R2"
                                      3: [ begin [R1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"R3"	18
                                      4: [ begin [R1/22] (set!) [R3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [R1/22] (set!) [R3/18] x ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [R1/22] (set!) [R3/18] x [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [R1/22] (set!) [R3/18] x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [R1/22] (set!) [R3/18] (x) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [R1/22] (set!) (x) ]
[ 4]  18 : LABEL	"R3"
                                      4: [ begin [R1/22] (set!) (x) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [R1/22] (set!) (x) ((lambda (y) y)) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [R1/22] (set!) (x) ((lambda (y) y)) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [R1/22] (set!) (x) ((lambda (y) y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [R1/22] (set! x (lambda (y) y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! x (lambda (y) y)) ]
[ 2]  22 : LABEL	"R1"
                                      2: [ begin (set! x (lambda (y) y)) ]
[ 2]  23 : SAVE_RETURN	"R4"	28
                                      3: [ begin (set! x (lambda (y) y)) [R4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! x (lambda (y) y)) [R4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! x (lambda (y) y)) [R4/28] quote x ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! x (lambda (y) y)) [R4/28] quote x [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! x (lambda (y) y)) [R4/28] quote x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! x (lambda (y) y)) [R4/28] (quote x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! x (lambda (y) y)) (quote x) ]
[ 3]  28 : LABEL	"R4"
                                      3: [ begin (set! x (lambda (y) y)) (quote x) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! x (lambda (y) y)) (quote x) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! x (lambda (y) y)) (quote x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! x (lambda (y) y)) (quote x)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (y) => (y)
	0	MAKE_ENV	1	; (y)
	1	LOCAL_GET	0	0	; y
	2	RETURN_VAL

	CODE BLOCK ; () => ((define (x y) y))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; (y)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	x
	5	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((define (x y) y))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; (y)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	x
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; (y)
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	x
                                      1: [ x ]
[ 1]   5 : RETURN_VAL
test: got "foo:x"  - expected "foo:x"
ParseNext ==>  (x 5)
Parsed:  (foo:x 5)
Compiled:
	CODE BLOCK ; () => ((x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	x
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	x
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_GET	x
                                      2: [ 5 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1	; (y)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; y
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cons (first '(1 2 3)) (rest '(1 2 3)))
ParseNext ==>  (cons (first (quote (1 2 3))) (rest (quote (1 2 3))))
Parsed:  (core:cons (core:first (quote (1 2 3))) (core:rest (quote (1 2 3))))
Compiled:
	CODE BLOCK ; () => ((cons (first (quote (1 2 3))) (rest (quote (1 2 3)))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	(1 2 3)
	3	GLOBAL_GET	first
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	10
	7	PUSH_CONST	(1 2 3)
	8	GLOBAL_GET	rest
	9	JMP_CLOSURE	1
10	LABEL	"R1"
	11	GLOBAL_GET	cons
	12	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((cons (first (quote (1 2 3))) (rest (quote (1 2 3)))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	(1 2 3)
	3	GLOBAL_GET	first
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	10
	7	PUSH_CONST	(1 2 3)
	8	GLOBAL_GET	rest
	9	JMP_CLOSURE	1
10	LABEL	"R1"
	11	GLOBAL_GET	cons
	12	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	(1 2 3)
                                      2: [ [R0/5] (1 2 3) ]
[ 2]   3 : GLOBAL_GET	first
                                      3: [ [R0/5] (1 2 3) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (1 2 3) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R0/5] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]   5 : LABEL	"R0"
                                      1: [ 1 ]
[ 1]   6 : SAVE_RETURN	"R1"	10
                                      2: [ 1 [R1/10] ]
[ 2]   7 : PUSH_CONST	(1 2 3)
                                      3: [ 1 [R1/10] (1 2 3) ]
[ 3]   8 : GLOBAL_GET	rest
                                      4: [ 1 [R1/10] (1 2 3) [Closure/core:cdr] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ 1 [R1/10] (1 2 3) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ 1 [R1/10] (2 3) ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 (2 3) ]
[ 2]  10 : LABEL	"R1"
                                      2: [ 1 (2 3) ]
[ 2]  11 : GLOBAL_GET	cons
                                      3: [ 1 (2 3) [Closure/core:cons] ]
[ 3]  12 : JMP_CLOSURE	2
                                      2: [ 1 (2 3) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (and 1) (and 1 2) (and 1 2 3) (and 1 #f 2 3))
ParseNext ==>  (list (and 1) (and 1 2) (and 1 2 3) (and 1 #f 2 3))
Parsed:  (core:list (core:and 1) (core:and 1 2) (core:and 1 2 3) (core:and 1 #f 2 3))
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      1: [ 1 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R1"	11
                                      1: [ [R1/11] ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ [R1/11] 1 ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [R1/11] 1 [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [R1/11] 1 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R1/11] (1) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (1) ]
[ 1]  11 : LABEL	"R1"
                                      1: [ (1) ]
[ 1]  12 : GLOBAL_GET	car
                                      2: [ (1) [Closure/core:car] ]
[ 2]  13 : JMP_CLOSURE	1
                                      1: [ (1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ 1 2 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (2) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (2) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (2) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] (2) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] (2) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] (2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [R4/30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if) [R5/35] 1 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [R5/35] 1 [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [R5/35] 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [R5/35] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) (1) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if) (1) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if) (1) (2) ]
[ 3]  37 : SAVE_RETURN	"R6"	41
                                      4: [ (if) (1) (2) [R6/41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) (1) (2) [R6/41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) (1) (2) [R6/41] #f [Closure/core:list] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) (1) (2) [R6/41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) (1) (2) [R6/41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) (1) (2) (#f) ]
[ 4]  41 : LABEL	"R6"
                                      4: [ (if) (1) (2) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) (1) (2) (#f) [Closure/core:append] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) (1) (2) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if 1 2 #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      3: [ 1 2 3 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (2 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (2 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] (2 3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] (2 3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] (2 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 2 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 2 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 2 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; first
                                      2: [ if 1 ]
[ 2]  47 : SAVE_RETURN	"R7"	56
                                      3: [ if 1 [R7/56] ]
[ 3]  48 : SAVE_RETURN	"R8"	52
                                      4: [ if 1 [R7/56] [R8/52] ]
[ 4]  49 : PUSH_CONST	and
                                      5: [ if 1 [R7/56] [R8/52] and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if 1 [R7/56] [R8/52] and [Closure/core:list] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if 1 [R7/56] [R8/52] and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if 1 [R7/56] [R8/52] (and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if 1 [R7/56] (and) ]
[ 4]  52 : LABEL	"R8"
                                      4: [ if 1 [R7/56] (and) ]
[ 4]  53 : LOCAL_GET	0	1	; rest
                                      5: [ if 1 [R7/56] (and) (2 3) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if 1 [R7/56] (and) (2 3) [Closure/core:append] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if 1 [R7/56] (and) (2 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if 1 [R7/56] (and 2 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if 1 (and 2 3) ]
[ 3]  56 : LABEL	"R7"
                                      3: [ if 1 (and 2 3) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if 1 (and 2 3) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if 1 (and 2 3) #f [Closure/core:list] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if 1 (and 2 3) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if 1 (and 2 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ 2 3 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] (3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] (3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] (3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [R4/30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if) [R5/35] 2 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [R5/35] 2 [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [R5/35] 2 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [R5/35] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) (2) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if) (2) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if) (2) (3) ]
[ 3]  37 : SAVE_RETURN	"R6"	41
                                      4: [ (if) (2) (3) [R6/41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) (2) (3) [R6/41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) (2) (3) [R6/41] #f [Closure/core:list] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) (2) (3) [R6/41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) (2) (3) [R6/41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  41 : LABEL	"R6"
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) (2) (3) (#f) [Closure/core:append] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) (2) (3) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if 2 3 #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      4: [ 1 #f 2 3 ]
[ 4]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (#f 2 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (#f 2 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (#f 2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] (#f 2 3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] (#f 2 3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] (#f 2 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 3 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 3 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 3 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 3 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 3 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; first
                                      2: [ if 1 ]
[ 2]  47 : SAVE_RETURN	"R7"	56
                                      3: [ if 1 [R7/56] ]
[ 3]  48 : SAVE_RETURN	"R8"	52
                                      4: [ if 1 [R7/56] [R8/52] ]
[ 4]  49 : PUSH_CONST	and
                                      5: [ if 1 [R7/56] [R8/52] and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if 1 [R7/56] [R8/52] and [Closure/core:list] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if 1 [R7/56] [R8/52] and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if 1 [R7/56] [R8/52] (and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if 1 [R7/56] (and) ]
[ 4]  52 : LABEL	"R8"
                                      4: [ if 1 [R7/56] (and) ]
[ 4]  53 : LOCAL_GET	0	1	; rest
                                      5: [ if 1 [R7/56] (and) (#f 2 3) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if 1 [R7/56] (and) (#f 2 3) [Closure/core:append] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if 1 [R7/56] (and) (#f 2 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if 1 [R7/56] (and #f 2 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if 1 (and #f 2 3) ]
[ 3]  56 : LABEL	"R7"
                                      3: [ if 1 (and #f 2 3) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if 1 (and #f 2 3) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if 1 (and #f 2 3) #f [Closure/core:list] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if 1 (and #f 2 3) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if 1 (and #f 2 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      3: [ #f 2 3 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (2 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (2 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] (2 3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] (2 3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] (2 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 2 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 2 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 2 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; first
                                      2: [ if #f ]
[ 2]  47 : SAVE_RETURN	"R7"	56
                                      3: [ if #f [R7/56] ]
[ 3]  48 : SAVE_RETURN	"R8"	52
                                      4: [ if #f [R7/56] [R8/52] ]
[ 4]  49 : PUSH_CONST	and
                                      5: [ if #f [R7/56] [R8/52] and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if #f [R7/56] [R8/52] and [Closure/core:list] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if #f [R7/56] [R8/52] and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if #f [R7/56] [R8/52] (and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if #f [R7/56] (and) ]
[ 4]  52 : LABEL	"R8"
                                      4: [ if #f [R7/56] (and) ]
[ 4]  53 : LOCAL_GET	0	1	; rest
                                      5: [ if #f [R7/56] (and) (2 3) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if #f [R7/56] (and) (2 3) [Closure/core:append] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if #f [R7/56] (and) (2 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if #f [R7/56] (and 2 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if #f (and 2 3) ]
[ 3]  56 : LABEL	"R7"
                                      3: [ if #f (and 2 3) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if #f (and 2 3) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if #f (and 2 3) #f [Closure/core:list] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if #f (and 2 3) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if #f (and 2 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"R6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"R6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"R7"	56
	48	SAVE_RETURN	"R8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"R8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"R7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ 2 3 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] (3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] (3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] (3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [R4/30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if) [R5/35] 2 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [R5/35] 2 [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [R5/35] 2 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [R5/35] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) (2) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if) (2) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if) (2) (3) ]
[ 3]  37 : SAVE_RETURN	"R6"	41
                                      4: [ (if) (2) (3) [R6/41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) (2) (3) [R6/41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) (2) (3) [R6/41] #f [Closure/core:list] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) (2) (3) [R6/41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) (2) (3) [R6/41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  41 : LABEL	"R6"
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) (2) (3) (#f) [Closure/core:append] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) (2) (3) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if 2 3 #f) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((list (and 1) (and 1 2) (and 1 2 3) (and 1 #f 2 3)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	#f
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK ; () => ((list (and 1) (and 1 2) (and 1 2 3) (and 1 #f 2 3)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	#f
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]   4 : PUSH_CONST	#f
                                      4: [ 1 2 3 #f ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ 1 2 3 #f [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ 1 2 3 #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3 #f) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3 #f)"  - expected "(1 2 3 #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (or 1) (or 2 1) (or (< 1 0) (< 2 0) 3) (or (< 1 0) (< 2 0)))
ParseNext ==>  (list (or 1) (or 2 1) (or (< 1 0) (< 2 0) 3) (or (< 1 0) (< 2 0)))
Parsed:  (core:list (core:or 1) (core:or 2 1) (core:or (core:< 1 0) (core:< 2 0) 3) (core:or (core:< 1 0) (core:< 2 0)))
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"R6"	51
	43	SAVE_RETURN	"R7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"R7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"R6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      1: [ 1 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R1"	11
                                      1: [ [R1/11] ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ [R1/11] 1 ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [R1/11] 1 [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [R1/11] 1 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R1/11] (1) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (1) ]
[ 1]  11 : LABEL	"R1"
                                      1: [ (1) ]
[ 1]  12 : GLOBAL_GET	car
                                      2: [ (1) [Closure/core:car] ]
[ 2]  13 : JMP_CLOSURE	1
                                      1: [ (1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"R6"	51
	43	SAVE_RETURN	"R7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"R7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"R6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ 2 1 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (1) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (1) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (1) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] (1) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] (1) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] (1) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [R4/30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if* [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if*) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if*) [R5/35] 2 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [R5/35] 2 [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [R5/35] 2 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [R5/35] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) (2) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if*) (2) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if*) (2) (1) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) (2) (1) [Closure/core:append] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) (2) (1) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* 2 1) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"R6"	51
	43	SAVE_RETURN	"R7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"R7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"R6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      3: [ (< 1 0) (< 2 0) 3 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] ((< 2 0) 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((< 2 0) 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((< 2 0) 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] ((< 2 0) 3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] ((< 2 0) 3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] ((< 2 0) 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 2 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 2 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 2 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  39 : LABEL	"L8"
                                      0: [  ]
[ 0]  40 : PUSH_CONST	if*
                                      1: [ if* ]
[ 1]  41 : LOCAL_GET	0	0	; first
                                      2: [ if* (< 1 0) ]
[ 2]  42 : SAVE_RETURN	"R6"	51
                                      3: [ if* (< 1 0) [R6/51] ]
[ 3]  43 : SAVE_RETURN	"R7"	47
                                      4: [ if* (< 1 0) [R6/51] [R7/47] ]
[ 4]  44 : PUSH_CONST	or
                                      5: [ if* (< 1 0) [R6/51] [R7/47] or ]
[ 5]  45 : GLOBAL_GET	list
                                      6: [ if* (< 1 0) [R6/51] [R7/47] or [Closure/core:list] ]
[ 6]  46 : JMP_CLOSURE	1
                                      5: [ if* (< 1 0) [R6/51] [R7/47] or ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if* (< 1 0) [R6/51] [R7/47] (or) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if* (< 1 0) [R6/51] (or) ]
[ 4]  47 : LABEL	"R7"
                                      4: [ if* (< 1 0) [R6/51] (or) ]
[ 4]  48 : LOCAL_GET	0	1	; rest
                                      5: [ if* (< 1 0) [R6/51] (or) ((< 2 0) 3) ]
[ 5]  49 : GLOBAL_GET	append
                                      6: [ if* (< 1 0) [R6/51] (or) ((< 2 0) 3) [Closure/core:append] ]
[ 6]  50 : JMP_CLOSURE	2
                                      5: [ if* (< 1 0) [R6/51] (or) ((< 2 0) 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if* (< 1 0) [R6/51] (or (< 2 0) 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if* (< 1 0) (or (< 2 0) 3) ]
[ 3]  51 : LABEL	"R6"
                                      3: [ if* (< 1 0) (or (< 2 0) 3) ]
[ 3]  52 : GLOBAL_GET	list
                                      4: [ if* (< 1 0) (or (< 2 0) 3) [Closure/core:list] ]
[ 4]  53 : JMP_CLOSURE	3
                                      3: [ if* (< 1 0) (or (< 2 0) 3) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (if* (< 1 0) (or (< 2 0) 3)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"R6"	51
	43	SAVE_RETURN	"R7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"R7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"R6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ (< 2 0) 3 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] (3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] (3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] (3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [R4/30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if* [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if*) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if*) [R5/35] (< 2 0) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [R5/35] (< 2 0) [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [R5/35] (< 2 0) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [R5/35] ((< 2 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) ((< 2 0)) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if*) ((< 2 0)) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if*) ((< 2 0)) (3) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) ((< 2 0)) (3) [Closure/core:append] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) ((< 2 0)) (3) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* (< 2 0) 3) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"R1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"R1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"R2"	24
	16	SAVE_RETURN	"R3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"R3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"R2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"R4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"R4"
	31	SAVE_RETURN	"R5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"R5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"R6"	51
	43	SAVE_RETURN	"R7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"R7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"R6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ (< 1 0) (< 2 0) ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] ((< 2 0)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((< 2 0)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((< 2 0)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	24
                                      1: [ [R2/24] ]
[ 1]  16 : SAVE_RETURN	"R3"	20
                                      2: [ [R2/24] [R3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [R2/24] [R3/20] ((< 2 0)) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [R2/24] [R3/20] ((< 2 0)) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [R2/24] [R3/20] ((< 2 0)) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R2/24] [R3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R2/24] 1 ]
[ 2]  20 : LABEL	"R3"
                                      2: [ [R2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [R2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [R2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [R2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"R4"	30
                                      1: [ [R4/30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [R4/30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [R4/30] if* [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [R4/30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R4/30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : LABEL	"R4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"R5"	35
                                      2: [ (if*) [R5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if*) [R5/35] (< 1 0) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [R5/35] (< 1 0) [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [R5/35] (< 1 0) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [R5/35] ((< 1 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) ((< 1 0)) ]
[ 2]  35 : LABEL	"R5"
                                      2: [ (if*) ((< 1 0)) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if*) ((< 1 0)) ((< 2 0)) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) ((< 1 0)) ((< 2 0)) [Closure/core:append] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) ((< 1 0)) ((< 2 0)) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* (< 1 0) (< 2 0)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((list (or 1) (or 2 1) (or (< 1 0) (< 2 0) 3) (or (< 1 0) (< 2 0))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	DUPLICATE
	4	JMP_IF_TRUE	"L0"	7
	5	STACK_POP
	6	PUSH_CONST	1
7	LABEL	"L0"
	8	SAVE_RETURN	"R1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	0
	11	GLOBAL_GET	<
	12	JMP_CLOSURE	2
13	LABEL	"R1"
	14	DUPLICATE
	15	JMP_IF_TRUE	"L4"	28
	16	STACK_POP
	17	SAVE_RETURN	"R2"	22
	18	PUSH_CONST	2
	19	PUSH_CONST	0
	20	GLOBAL_GET	<
	21	JMP_CLOSURE	2
22	LABEL	"R2"
	23	DUPLICATE
	24	JMP_IF_TRUE	"L3"	27
	25	STACK_POP
	26	PUSH_CONST	3
27	LABEL	"L3"
28	LABEL	"L4"
	29	SAVE_RETURN	"R5"	34
	30	PUSH_CONST	1
	31	PUSH_CONST	0
	32	GLOBAL_GET	<
	33	JMP_CLOSURE	2
34	LABEL	"R5"
	35	DUPLICATE
	36	JMP_IF_TRUE	"L7"	44
	37	STACK_POP
	38	SAVE_RETURN	"R6"	43
	39	PUSH_CONST	2
	40	PUSH_CONST	0
	41	GLOBAL_GET	<
	42	JMP_CLOSURE	2
43	LABEL	"R6"
44	LABEL	"L7"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK ; () => ((list (or 1) (or 2 1) (or (< 1 0) (< 2 0) 3) (or (< 1 0) (< 2 0))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	DUPLICATE
	4	JMP_IF_TRUE	"L0"	7
	5	STACK_POP
	6	PUSH_CONST	1
7	LABEL	"L0"
	8	SAVE_RETURN	"R1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	0
	11	GLOBAL_GET	<
	12	JMP_CLOSURE	2
13	LABEL	"R1"
	14	DUPLICATE
	15	JMP_IF_TRUE	"L4"	28
	16	STACK_POP
	17	SAVE_RETURN	"R2"	22
	18	PUSH_CONST	2
	19	PUSH_CONST	0
	20	GLOBAL_GET	<
	21	JMP_CLOSURE	2
22	LABEL	"R2"
	23	DUPLICATE
	24	JMP_IF_TRUE	"L3"	27
	25	STACK_POP
	26	PUSH_CONST	3
27	LABEL	"L3"
28	LABEL	"L4"
	29	SAVE_RETURN	"R5"	34
	30	PUSH_CONST	1
	31	PUSH_CONST	0
	32	GLOBAL_GET	<
	33	JMP_CLOSURE	2
34	LABEL	"R5"
	35	DUPLICATE
	36	JMP_IF_TRUE	"L7"	44
	37	STACK_POP
	38	SAVE_RETURN	"R6"	43
	39	PUSH_CONST	2
	40	PUSH_CONST	0
	41	GLOBAL_GET	<
	42	JMP_CLOSURE	2
43	LABEL	"R6"
44	LABEL	"L7"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : DUPLICATE
                                      3: [ 1 2 2 ]
[ 3]   4 : JMP_IF_TRUE	"L0"	7
                                      2: [ 1 2 ]
[ 2]   7 : LABEL	"L0"
                                      2: [ 1 2 ]
[ 2]   8 : SAVE_RETURN	"R1"	13
                                      3: [ 1 2 [R1/13] ]
[ 3]   9 : PUSH_CONST	1
                                      4: [ 1 2 [R1/13] 1 ]
[ 4]  10 : PUSH_CONST	0
                                      5: [ 1 2 [R1/13] 1 0 ]
[ 5]  11 : GLOBAL_GET	<
                                      6: [ 1 2 [R1/13] 1 0 [Closure/core:<] ]
[ 6]  12 : JMP_CLOSURE	2
                                      5: [ 1 2 [R1/13] 1 0 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ 1 2 [R1/13] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 #f ]
[ 3]  13 : LABEL	"R1"
                                      3: [ 1 2 #f ]
[ 3]  14 : DUPLICATE
                                      4: [ 1 2 #f #f ]
[ 4]  15 : JMP_IF_TRUE	"L4"	28
                                      3: [ 1 2 #f ]
[ 3]  16 : STACK_POP
                                      2: [ 1 2 ]
[ 2]  17 : SAVE_RETURN	"R2"	22
                                      3: [ 1 2 [R2/22] ]
[ 3]  18 : PUSH_CONST	2
                                      4: [ 1 2 [R2/22] 2 ]
[ 4]  19 : PUSH_CONST	0
                                      5: [ 1 2 [R2/22] 2 0 ]
[ 5]  20 : GLOBAL_GET	<
                                      6: [ 1 2 [R2/22] 2 0 [Closure/core:<] ]
[ 6]  21 : JMP_CLOSURE	2
                                      5: [ 1 2 [R2/22] 2 0 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ 1 2 [R2/22] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 #f ]
[ 3]  22 : LABEL	"R2"
                                      3: [ 1 2 #f ]
[ 3]  23 : DUPLICATE
                                      4: [ 1 2 #f #f ]
[ 4]  24 : JMP_IF_TRUE	"L3"	27
                                      3: [ 1 2 #f ]
[ 3]  25 : STACK_POP
                                      2: [ 1 2 ]
[ 2]  26 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]  27 : LABEL	"L3"
                                      3: [ 1 2 3 ]
[ 3]  28 : LABEL	"L4"
                                      3: [ 1 2 3 ]
[ 3]  29 : SAVE_RETURN	"R5"	34
                                      4: [ 1 2 3 [R5/34] ]
[ 4]  30 : PUSH_CONST	1
                                      5: [ 1 2 3 [R5/34] 1 ]
[ 5]  31 : PUSH_CONST	0
                                      6: [ 1 2 3 [R5/34] 1 0 ]
[ 6]  32 : GLOBAL_GET	<
                                      7: [ 1 2 3 [R5/34] 1 0 [Closure/core:<] ]
[ 7]  33 : JMP_CLOSURE	2
                                      6: [ 1 2 3 [R5/34] 1 0 ]
[ 6]   0 : CALL_PRIMOP	"<"
                                      5: [ 1 2 3 [R5/34] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ 1 2 3 #f ]
[ 4]  34 : LABEL	"R5"
                                      4: [ 1 2 3 #f ]
[ 4]  35 : DUPLICATE
                                      5: [ 1 2 3 #f #f ]
[ 5]  36 : JMP_IF_TRUE	"L7"	44
                                      4: [ 1 2 3 #f ]
[ 4]  37 : STACK_POP
                                      3: [ 1 2 3 ]
[ 3]  38 : SAVE_RETURN	"R6"	43
                                      4: [ 1 2 3 [R6/43] ]
[ 4]  39 : PUSH_CONST	2
                                      5: [ 1 2 3 [R6/43] 2 ]
[ 5]  40 : PUSH_CONST	0
                                      6: [ 1 2 3 [R6/43] 2 0 ]
[ 6]  41 : GLOBAL_GET	<
                                      7: [ 1 2 3 [R6/43] 2 0 [Closure/core:<] ]
[ 7]  42 : JMP_CLOSURE	2
                                      6: [ 1 2 3 [R6/43] 2 0 ]
[ 6]   0 : CALL_PRIMOP	"<"
                                      5: [ 1 2 3 [R6/43] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ 1 2 3 #f ]
[ 4]  43 : LABEL	"R6"
                                      4: [ 1 2 3 #f ]
[ 4]  44 : LABEL	"L7"
                                      4: [ 1 2 3 #f ]
[ 4]  45 : GLOBAL_GET	list
                                      5: [ 1 2 3 #f [Closure/core:list] ]
[ 5]  46 : JMP_CLOSURE	4
                                      4: [ 1 2 3 #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3 #f) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3 #f)"  - expected "(1 2 3 #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cond ((= 1 2) 2) ((= 1 4) 4) 0)
ParseNext ==>  (cond ((= 1 2) 2) ((= 1 4) 4) 0)
Parsed:  (core:cond ((core:= 1 2) 2) ((core:= 1 4) 4) 0)
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      3: [ ((= 1 2) 2) ((= 1 4) 4) 0 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (((= 1 4) 4) 0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (((= 1 4) 4) 0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (((= 1 4) 4) 0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((= 1 2) 2) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((= 1 2) 2) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((= 1 2) 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (= 1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 1 2) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (= 1 2) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (= 1 2) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (= 1 2) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (= 1 2) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (= 1 2) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (= 1 2) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 1 2) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 2) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (= 1 2) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (= 1 2) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (= 1 2) [R2/31] (begin) [R4/28] ((= 1 2) 2) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (= 1 2) [R2/31] (begin) [R4/28] ((= 1 2) 2) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (= 1 2) [R2/31] (begin) [R4/28] ((= 1 2) 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 1 2) [R2/31] (begin) [R4/28] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 2) [R2/31] (begin) (2) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (= 1 2) [R2/31] (begin) (2) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (= 1 2) [R2/31] (begin) (2) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (= 1 2) [R2/31] (begin) (2) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 1 2) [R2/31] (begin 2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 1 2) (begin 2) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (= 1 2) (begin 2) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (= 1 2) (begin 2) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (= 1 2) (begin 2) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (= 1 2) (begin 2) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (= 1 2) (begin 2) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (= 1 2) (begin 2) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 1 2) (begin 2) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 2) (begin 2) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (= 1 2) (begin 2) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 1 2) (begin 2) [R5/41] (cond) (((= 1 4) 4) 0) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (= 1 2) (begin 2) [R5/41] (cond) (((= 1 4) 4) 0) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (= 1 2) (begin 2) [R5/41] (cond) (((= 1 4) 4) 0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 1 2) (begin 2) [R5/41] (cond ((= 1 4) 4) 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      2: [ ((= 1 4) 4) 0 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((= 1 4) 4) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((= 1 4) 4) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((= 1 4) 4) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (= 1 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 1 4) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (= 1 4) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (= 1 4) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (= 1 4) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (= 1 4) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (= 1 4) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (= 1 4) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 1 4) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 4) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (= 1 4) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (= 1 4) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (= 1 4) [R2/31] (begin) [R4/28] ((= 1 4) 4) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (= 1 4) [R2/31] (begin) [R4/28] ((= 1 4) 4) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (= 1 4) [R2/31] (begin) [R4/28] ((= 1 4) 4) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 1 4) [R2/31] (begin) [R4/28] (4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 4) [R2/31] (begin) (4) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (= 1 4) [R2/31] (begin) (4) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (= 1 4) [R2/31] (begin) (4) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (= 1 4) [R2/31] (begin) (4) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 1 4) [R2/31] (begin 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 1 4) (begin 4) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (= 1 4) (begin 4) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (= 1 4) (begin 4) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (= 1 4) (begin 4) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (= 1 4) (begin 4) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (= 1 4) (begin 4) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (= 1 4) (begin 4) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 1 4) (begin 4) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 4) (begin 4) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (= 1 4) (begin 4) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 1 4) (begin 4) [R5/41] (cond) (0) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (= 1 4) (begin 4) [R5/41] (cond) (0) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (= 1 4) (begin 4) [R5/41] (cond) (0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 1 4) (begin 4) [R5/41] (cond 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (= 1 4) (begin 4) (cond 0) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 1 4) (begin 4) (cond 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      1: [ 0 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ begin 0 ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ begin 0 [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	2
                                      2: [ begin 0 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((cond ((= 1 2) 2) ((= 1 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"R1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"R1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((cond ((= 1 2) 2) ((= 1 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"R1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"R1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [R0/6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [R0/6] 1 2 ]
[ 3]   4 : GLOBAL_GET	=
                                      4: [ [R0/6] 1 2 [Closure/core:=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"R1"	16
                                      1: [ [R1/16] ]
[ 1]  12 : PUSH_CONST	1
                                      2: [ [R1/16] 1 ]
[ 2]  13 : PUSH_CONST	4
                                      3: [ [R1/16] 1 4 ]
[ 3]  14 : GLOBAL_GET	=
                                      4: [ [R1/16] 1 4 [Closure/core:=] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [R1/16] 1 4 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/16] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  16 : LABEL	"R1"
                                      1: [ #f ]
[ 1]  17 : JMP_IF_FALSE	"L2"	20
                                      0: [  ]
[ 0]  20 : LABEL	"L2"
                                      0: [  ]
[ 0]  21 : PUSH_CONST	0
                                      1: [ 0 ]
[ 1]  22 : RETURN_VAL
test: got "0"  - expected "0"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cond ((= 2 2) 2) ((= 1 4) 4) 0)
ParseNext ==>  (cond ((= 2 2) 2) ((= 1 4) 4) 0)
Parsed:  (core:cond ((core:= 2 2) 2) ((core:= 1 4) 4) 0)
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      3: [ ((= 2 2) 2) ((= 1 4) 4) 0 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (((= 1 4) 4) 0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (((= 1 4) 4) 0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (((= 1 4) 4) 0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((= 2 2) 2) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((= 2 2) 2) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((= 2 2) 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (= 2 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 2 2) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (= 2 2) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (= 2 2) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (= 2 2) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (= 2 2) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (= 2 2) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (= 2 2) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 2 2) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 2 2) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (= 2 2) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (= 2 2) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (= 2 2) [R2/31] (begin) [R4/28] ((= 2 2) 2) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (= 2 2) [R2/31] (begin) [R4/28] ((= 2 2) 2) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (= 2 2) [R2/31] (begin) [R4/28] ((= 2 2) 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 2 2) [R2/31] (begin) [R4/28] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 2 2) [R2/31] (begin) (2) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (= 2 2) [R2/31] (begin) (2) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (= 2 2) [R2/31] (begin) (2) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (= 2 2) [R2/31] (begin) (2) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 2 2) [R2/31] (begin 2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 2 2) (begin 2) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (= 2 2) (begin 2) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (= 2 2) (begin 2) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (= 2 2) (begin 2) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (= 2 2) (begin 2) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (= 2 2) (begin 2) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (= 2 2) (begin 2) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 2 2) (begin 2) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 2 2) (begin 2) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (= 2 2) (begin 2) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 2 2) (begin 2) [R5/41] (cond) (((= 1 4) 4) 0) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (= 2 2) (begin 2) [R5/41] (cond) (((= 1 4) 4) 0) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (= 2 2) (begin 2) [R5/41] (cond) (((= 1 4) 4) 0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 2 2) (begin 2) [R5/41] (cond ((= 1 4) 4) 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      2: [ ((= 1 4) 4) 0 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((= 1 4) 4) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((= 1 4) 4) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((= 1 4) 4) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (= 1 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 1 4) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (= 1 4) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (= 1 4) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (= 1 4) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (= 1 4) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (= 1 4) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (= 1 4) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 1 4) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 4) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (= 1 4) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (= 1 4) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (= 1 4) [R2/31] (begin) [R4/28] ((= 1 4) 4) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (= 1 4) [R2/31] (begin) [R4/28] ((= 1 4) 4) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (= 1 4) [R2/31] (begin) [R4/28] ((= 1 4) 4) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 1 4) [R2/31] (begin) [R4/28] (4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 4) [R2/31] (begin) (4) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (= 1 4) [R2/31] (begin) (4) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (= 1 4) [R2/31] (begin) (4) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (= 1 4) [R2/31] (begin) (4) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 1 4) [R2/31] (begin 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 1 4) (begin 4) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (= 1 4) (begin 4) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (= 1 4) (begin 4) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (= 1 4) (begin 4) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (= 1 4) (begin 4) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (= 1 4) (begin 4) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (= 1 4) (begin 4) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 1 4) (begin 4) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 4) (begin 4) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (= 1 4) (begin 4) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 1 4) (begin 4) [R5/41] (cond) (0) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (= 1 4) (begin 4) [R5/41] (cond) (0) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (= 1 4) (begin 4) [R5/41] (cond) (0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 1 4) (begin 4) [R5/41] (cond 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (= 1 4) (begin 4) (cond 0) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 1 4) (begin 4) (cond 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      1: [ 0 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ begin 0 ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ begin 0 [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	2
                                      2: [ begin 0 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((cond ((= 2 2) 2) ((= 1 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	2
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"R1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"R1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((cond ((= 2 2) 2) ((= 1 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	2
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"R1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"R1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ [R0/6] 2 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [R0/6] 2 2 ]
[ 3]   4 : GLOBAL_GET	=
                                      4: [ [R0/6] 2 2 [Closure/core:=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 2 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R0/6] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   6 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]   8 : PUSH_CONST	2
                                      1: [ 2 ]
[ 1]   9 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cond ((= 1 2) 2) ((= 4 4) 4) 0)
ParseNext ==>  (cond ((= 1 2) 2) ((= 4 4) 4) 0)
Parsed:  (core:cond ((core:= 1 2) 2) ((core:= 4 4) 4) 0)
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      3: [ ((= 1 2) 2) ((= 4 4) 4) 0 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (((= 4 4) 4) 0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (((= 4 4) 4) 0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (((= 4 4) 4) 0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((= 1 2) 2) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((= 1 2) 2) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((= 1 2) 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (= 1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 1 2) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (= 1 2) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (= 1 2) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (= 1 2) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (= 1 2) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (= 1 2) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (= 1 2) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 1 2) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 2) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (= 1 2) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (= 1 2) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (= 1 2) [R2/31] (begin) [R4/28] ((= 1 2) 2) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (= 1 2) [R2/31] (begin) [R4/28] ((= 1 2) 2) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (= 1 2) [R2/31] (begin) [R4/28] ((= 1 2) 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 1 2) [R2/31] (begin) [R4/28] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 2) [R2/31] (begin) (2) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (= 1 2) [R2/31] (begin) (2) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (= 1 2) [R2/31] (begin) (2) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (= 1 2) [R2/31] (begin) (2) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 1 2) [R2/31] (begin 2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 1 2) (begin 2) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (= 1 2) (begin 2) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (= 1 2) (begin 2) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (= 1 2) (begin 2) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (= 1 2) (begin 2) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (= 1 2) (begin 2) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (= 1 2) (begin 2) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 1 2) (begin 2) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 2) (begin 2) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (= 1 2) (begin 2) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 1 2) (begin 2) [R5/41] (cond) (((= 4 4) 4) 0) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (= 1 2) (begin 2) [R5/41] (cond) (((= 4 4) 4) 0) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (= 1 2) (begin 2) [R5/41] (cond) (((= 4 4) 4) 0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 1 2) (begin 2) [R5/41] (cond ((= 4 4) 4) 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      2: [ ((= 4 4) 4) 0 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((= 4 4) 4) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((= 4 4) 4) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((= 4 4) 4) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (= 4 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 4 4) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (= 4 4) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (= 4 4) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (= 4 4) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (= 4 4) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (= 4 4) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (= 4 4) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 4 4) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 4 4) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (= 4 4) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (= 4 4) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (= 4 4) [R2/31] (begin) [R4/28] ((= 4 4) 4) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (= 4 4) [R2/31] (begin) [R4/28] ((= 4 4) 4) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (= 4 4) [R2/31] (begin) [R4/28] ((= 4 4) 4) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 4 4) [R2/31] (begin) [R4/28] (4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 4 4) [R2/31] (begin) (4) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (= 4 4) [R2/31] (begin) (4) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (= 4 4) [R2/31] (begin) (4) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (= 4 4) [R2/31] (begin) (4) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 4 4) [R2/31] (begin 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 4 4) (begin 4) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (= 4 4) (begin 4) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (= 4 4) (begin 4) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (= 4 4) (begin 4) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (= 4 4) (begin 4) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (= 4 4) (begin 4) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (= 4 4) (begin 4) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 4 4) (begin 4) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 4 4) (begin 4) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (= 4 4) (begin 4) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 4 4) (begin 4) [R5/41] (cond) (0) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (= 4 4) (begin 4) [R5/41] (cond) (0) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (= 4 4) (begin 4) [R5/41] (cond) (0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 4 4) (begin 4) [R5/41] (cond 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 4 4) (begin 4) (cond 0) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (= 4 4) (begin 4) (cond 0) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (= 4 4) (begin 4) (cond 0) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (= 4 4) (begin 4) (cond 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 4 4) (begin 4) (cond 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      1: [ 0 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ begin 0 ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ begin 0 [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	2
                                      2: [ begin 0 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((cond ((= 1 2) 2) ((= 4 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"R1"	16
	12	PUSH_CONST	4
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"R1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((cond ((= 1 2) 2) ((= 4 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"R1"	16
	12	PUSH_CONST	4
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"R1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [R0/6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [R0/6] 1 2 ]
[ 3]   4 : GLOBAL_GET	=
                                      4: [ [R0/6] 1 2 [Closure/core:=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"R1"	16
                                      1: [ [R1/16] ]
[ 1]  12 : PUSH_CONST	4
                                      2: [ [R1/16] 4 ]
[ 2]  13 : PUSH_CONST	4
                                      3: [ [R1/16] 4 4 ]
[ 3]  14 : GLOBAL_GET	=
                                      4: [ [R1/16] 4 4 [Closure/core:=] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [R1/16] 4 4 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/16] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  16 : LABEL	"R1"
                                      1: [ #t ]
[ 1]  17 : JMP_IF_FALSE	"L2"	20
                                      0: [  ]
[ 0]  18 : PUSH_CONST	4
                                      1: [ 4 ]
[ 1]  19 : RETURN_VAL
test: got "4"  - expected "4"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (case (+ 1 2) (2 #f) (3 #t) 'error)
ParseNext ==>  (case (+ 1 2) (2 #f) (3 #t) (quote error))
Parsed:  (core:case (core:+ 1 2) (2 #f) (3 #t) (quote core:error))
Executing:  
	CODE BLOCK ; (key rest) => ((let* ((keyval (gensym "CASE"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
	0	MAKE_ENVDOT	1	; (key rest)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	"CASE"
	3	GLOBAL_GET	gensym
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	MAKE_CLOSURE	[Closure]	; ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
	7	JMP_CLOSURE	1

                                      4: [ (+ 1 2) (2 #f) (3 #t) (quote error) ]
[ 4]   0 : MAKE_ENVDOT	1	; (key rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	"CASE"
                                      2: [ [R0/5] "CASE" ]
[ 2]   3 : GLOBAL_GET	gensym
                                      3: [ [R0/5] "CASE" [Closure/core:gensym] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] "CASE" ]
[ 2]   0 : CALL_PRIMOP	"gensym"
                                      2: [ [R0/5] CASE4 ]
[ 2]   1 : RETURN_VAL
                                      1: [ CASE4 ]
[ 1]   5 : LABEL	"R0"
                                      1: [ CASE4 ]
[ 1]   6 : MAKE_CLOSURE	[Closure]	; ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
                                      2: [ CASE4 [Closure] ]
[ 2]   7 : JMP_CLOSURE	1
                                      1: [ CASE4 ]
[ 1]   0 : MAKE_ENV	1	; (keyval)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	let
                                      1: [ let ]
[ 1]   2 : SAVE_RETURN	"R1"	11
                                      2: [ let [R1/11] ]
[ 2]   3 : SAVE_RETURN	"R2"	8
                                      3: [ let [R1/11] [R2/8] ]
[ 3]   4 : LOCAL_GET	0	0	; keyval
                                      4: [ let [R1/11] [R2/8] CASE4 ]
[ 4]   5 : LOCAL_GET	1	0	; key
                                      5: [ let [R1/11] [R2/8] CASE4 (+ 1 2) ]
[ 5]   6 : GLOBAL_GET	list
                                      6: [ let [R1/11] [R2/8] CASE4 (+ 1 2) [Closure/core:list] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ let [R1/11] [R2/8] CASE4 (+ 1 2) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ let [R1/11] [R2/8] (CASE4 (+ 1 2)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R1/11] (CASE4 (+ 1 2)) ]
[ 3]   8 : LABEL	"R2"
                                      3: [ let [R1/11] (CASE4 (+ 1 2)) ]
[ 3]   9 : GLOBAL_GET	list
                                      4: [ let [R1/11] (CASE4 (+ 1 2)) [Closure/core:list] ]
[ 4]  10 : JMP_CLOSURE	1
                                      3: [ let [R1/11] (CASE4 (+ 1 2)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R1/11] ((CASE4 (+ 1 2))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((CASE4 (+ 1 2))) ]
[ 2]  11 : LABEL	"R1"
                                      2: [ let ((CASE4 (+ 1 2))) ]
[ 2]  12 : SAVE_RETURN	"R3"	26
                                      3: [ let ((CASE4 (+ 1 2))) [R3/26] ]
[ 3]  13 : SAVE_RETURN	"R4"	17
                                      4: [ let ((CASE4 (+ 1 2))) [R3/26] [R4/17] ]
[ 4]  14 : PUSH_CONST	cond
                                      5: [ let ((CASE4 (+ 1 2))) [R3/26] [R4/17] cond ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ let ((CASE4 (+ 1 2))) [R3/26] [R4/17] cond [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ let ((CASE4 (+ 1 2))) [R3/26] [R4/17] cond ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((CASE4 (+ 1 2))) [R3/26] [R4/17] (cond) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) ]
[ 4]  17 : LABEL	"R4"
                                      4: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) ]
[ 4]  18 : SAVE_RETURN	"R5"	23
                                      5: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) [R5/23] ]
[ 5]  19 : MAKE_CLOSURE	[Closure]	; ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
                                      6: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) [R5/23] [Closure] ]
[ 6]  20 : LOCAL_GET	1	1	; rest
                                      7: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) [R5/23] [Closure] ((2 #f) (3 #t) (quote error)) ]
[ 7]  21 : GLOBAL_GET	map
                                      8: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) [R5/23] [Closure] ((2 #f) (3 #t) (quote error)) [Closure/core:map] ]
[ 8]  22 : JMP_CLOSURE	2
                                      7: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) [R5/23] [Closure] ((2 #f) (3 #t) (quote error)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK ; (elt) => ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
	0	MAKE_ENV	1	; (elt)
	1	SAVE_RETURN	"R6"	5
	2	LOCAL_GET	0	0	; elt
	3	GLOBAL_GET	cons?
	4	JMP_CLOSURE	1
5	LABEL	"R6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"R7"	17
	8	PUSH_CONST	=
	9	LOCAL_GET	1	0	; keyval
	10	SAVE_RETURN	"R8"	14
	11	LOCAL_GET	0	0	; elt
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"R8"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	3
17	LABEL	"R7"
	18	SAVE_RETURN	"R9"	22
	19	LOCAL_GET	0	0	; elt
	20	GLOBAL_GET	cdr
	21	JMP_CLOSURE	1
22	LABEL	"R9"
	23	GLOBAL_GET	cons
	24	JMP_CLOSURE	2
25	LABEL	"L10"
	26	LOCAL_GET	0	0	; elt
	27	RETURN_VAL

                                      1: [ (2 #f) ]
[ 1]   0 : MAKE_ENV	1	; (elt)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R6"	5
                                      1: [ [R6/5] ]
[ 1]   2 : LOCAL_GET	0	0	; elt
                                      2: [ [R6/5] (2 #f) ]
[ 2]   3 : GLOBAL_GET	cons?
                                      3: [ [R6/5] (2 #f) [Closure/core:cons?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R6/5] (2 #f) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [R6/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R6"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	25
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R7"	17
                                      1: [ [R7/17] ]
[ 1]   8 : PUSH_CONST	=
                                      2: [ [R7/17] = ]
[ 2]   9 : LOCAL_GET	1	0	; keyval
                                      3: [ [R7/17] = CASE4 ]
[ 3]  10 : SAVE_RETURN	"R8"	14
                                      4: [ [R7/17] = CASE4 [R8/14] ]
[ 4]  11 : LOCAL_GET	0	0	; elt
                                      5: [ [R7/17] = CASE4 [R8/14] (2 #f) ]
[ 5]  12 : GLOBAL_GET	car
                                      6: [ [R7/17] = CASE4 [R8/14] (2 #f) [Closure/core:car] ]
[ 6]  13 : JMP_CLOSURE	1
                                      5: [ [R7/17] = CASE4 [R8/14] (2 #f) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [R7/17] = CASE4 [R8/14] 2 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R7/17] = CASE4 2 ]
[ 4]  14 : LABEL	"R8"
                                      4: [ [R7/17] = CASE4 2 ]
[ 4]  15 : GLOBAL_GET	list
                                      5: [ [R7/17] = CASE4 2 [Closure/core:list] ]
[ 5]  16 : JMP_CLOSURE	3
                                      4: [ [R7/17] = CASE4 2 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [R7/17] (= CASE4 2) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (= CASE4 2) ]
[ 1]  17 : LABEL	"R7"
                                      1: [ (= CASE4 2) ]
[ 1]  18 : SAVE_RETURN	"R9"	22
                                      2: [ (= CASE4 2) [R9/22] ]
[ 2]  19 : LOCAL_GET	0	0	; elt
                                      3: [ (= CASE4 2) [R9/22] (2 #f) ]
[ 3]  20 : GLOBAL_GET	cdr
                                      4: [ (= CASE4 2) [R9/22] (2 #f) [Closure/core:cdr] ]
[ 4]  21 : JMP_CLOSURE	1
                                      3: [ (= CASE4 2) [R9/22] (2 #f) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ (= CASE4 2) [R9/22] (#f) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (= CASE4 2) (#f) ]
[ 2]  22 : LABEL	"R9"
                                      2: [ (= CASE4 2) (#f) ]
[ 2]  23 : GLOBAL_GET	cons
                                      3: [ (= CASE4 2) (#f) [Closure/core:cons] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ (= CASE4 2) (#f) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((= CASE4 2) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (elt) => ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
	0	MAKE_ENV	1	; (elt)
	1	SAVE_RETURN	"R6"	5
	2	LOCAL_GET	0	0	; elt
	3	GLOBAL_GET	cons?
	4	JMP_CLOSURE	1
5	LABEL	"R6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"R7"	17
	8	PUSH_CONST	=
	9	LOCAL_GET	1	0	; keyval
	10	SAVE_RETURN	"R8"	14
	11	LOCAL_GET	0	0	; elt
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"R8"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	3
17	LABEL	"R7"
	18	SAVE_RETURN	"R9"	22
	19	LOCAL_GET	0	0	; elt
	20	GLOBAL_GET	cdr
	21	JMP_CLOSURE	1
22	LABEL	"R9"
	23	GLOBAL_GET	cons
	24	JMP_CLOSURE	2
25	LABEL	"L10"
	26	LOCAL_GET	0	0	; elt
	27	RETURN_VAL

                                      1: [ (3 #t) ]
[ 1]   0 : MAKE_ENV	1	; (elt)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R6"	5
                                      1: [ [R6/5] ]
[ 1]   2 : LOCAL_GET	0	0	; elt
                                      2: [ [R6/5] (3 #t) ]
[ 2]   3 : GLOBAL_GET	cons?
                                      3: [ [R6/5] (3 #t) [Closure/core:cons?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R6/5] (3 #t) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [R6/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R6"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	25
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R7"	17
                                      1: [ [R7/17] ]
[ 1]   8 : PUSH_CONST	=
                                      2: [ [R7/17] = ]
[ 2]   9 : LOCAL_GET	1	0	; keyval
                                      3: [ [R7/17] = CASE4 ]
[ 3]  10 : SAVE_RETURN	"R8"	14
                                      4: [ [R7/17] = CASE4 [R8/14] ]
[ 4]  11 : LOCAL_GET	0	0	; elt
                                      5: [ [R7/17] = CASE4 [R8/14] (3 #t) ]
[ 5]  12 : GLOBAL_GET	car
                                      6: [ [R7/17] = CASE4 [R8/14] (3 #t) [Closure/core:car] ]
[ 6]  13 : JMP_CLOSURE	1
                                      5: [ [R7/17] = CASE4 [R8/14] (3 #t) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [R7/17] = CASE4 [R8/14] 3 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R7/17] = CASE4 3 ]
[ 4]  14 : LABEL	"R8"
                                      4: [ [R7/17] = CASE4 3 ]
[ 4]  15 : GLOBAL_GET	list
                                      5: [ [R7/17] = CASE4 3 [Closure/core:list] ]
[ 5]  16 : JMP_CLOSURE	3
                                      4: [ [R7/17] = CASE4 3 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [R7/17] (= CASE4 3) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (= CASE4 3) ]
[ 1]  17 : LABEL	"R7"
                                      1: [ (= CASE4 3) ]
[ 1]  18 : SAVE_RETURN	"R9"	22
                                      2: [ (= CASE4 3) [R9/22] ]
[ 2]  19 : LOCAL_GET	0	0	; elt
                                      3: [ (= CASE4 3) [R9/22] (3 #t) ]
[ 3]  20 : GLOBAL_GET	cdr
                                      4: [ (= CASE4 3) [R9/22] (3 #t) [Closure/core:cdr] ]
[ 4]  21 : JMP_CLOSURE	1
                                      3: [ (= CASE4 3) [R9/22] (3 #t) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ (= CASE4 3) [R9/22] (#t) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (= CASE4 3) (#t) ]
[ 2]  22 : LABEL	"R9"
                                      2: [ (= CASE4 3) (#t) ]
[ 2]  23 : GLOBAL_GET	cons
                                      3: [ (= CASE4 3) (#t) [Closure/core:cons] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ (= CASE4 3) (#t) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((= CASE4 3) #t) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (elt) => ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
	0	MAKE_ENV	1	; (elt)
	1	SAVE_RETURN	"R6"	5
	2	LOCAL_GET	0	0	; elt
	3	GLOBAL_GET	cons?
	4	JMP_CLOSURE	1
5	LABEL	"R6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"R7"	17
	8	PUSH_CONST	=
	9	LOCAL_GET	1	0	; keyval
	10	SAVE_RETURN	"R8"	14
	11	LOCAL_GET	0	0	; elt
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"R8"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	3
17	LABEL	"R7"
	18	SAVE_RETURN	"R9"	22
	19	LOCAL_GET	0	0	; elt
	20	GLOBAL_GET	cdr
	21	JMP_CLOSURE	1
22	LABEL	"R9"
	23	GLOBAL_GET	cons
	24	JMP_CLOSURE	2
25	LABEL	"L10"
	26	LOCAL_GET	0	0	; elt
	27	RETURN_VAL

                                      1: [ (quote error) ]
[ 1]   0 : MAKE_ENV	1	; (elt)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R6"	5
                                      1: [ [R6/5] ]
[ 1]   2 : LOCAL_GET	0	0	; elt
                                      2: [ [R6/5] (quote error) ]
[ 2]   3 : GLOBAL_GET	cons?
                                      3: [ [R6/5] (quote error) [Closure/core:cons?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R6/5] (quote error) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [R6/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R6"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	25
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"R7"	17
                                      1: [ [R7/17] ]
[ 1]   8 : PUSH_CONST	=
                                      2: [ [R7/17] = ]
[ 2]   9 : LOCAL_GET	1	0	; keyval
                                      3: [ [R7/17] = CASE4 ]
[ 3]  10 : SAVE_RETURN	"R8"	14
                                      4: [ [R7/17] = CASE4 [R8/14] ]
[ 4]  11 : LOCAL_GET	0	0	; elt
                                      5: [ [R7/17] = CASE4 [R8/14] (quote error) ]
[ 5]  12 : GLOBAL_GET	car
                                      6: [ [R7/17] = CASE4 [R8/14] (quote error) [Closure/core:car] ]
[ 6]  13 : JMP_CLOSURE	1
                                      5: [ [R7/17] = CASE4 [R8/14] (quote error) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [R7/17] = CASE4 [R8/14] quote ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R7/17] = CASE4 quote ]
[ 4]  14 : LABEL	"R8"
                                      4: [ [R7/17] = CASE4 quote ]
[ 4]  15 : GLOBAL_GET	list
                                      5: [ [R7/17] = CASE4 quote [Closure/core:list] ]
[ 5]  16 : JMP_CLOSURE	3
                                      4: [ [R7/17] = CASE4 quote ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [R7/17] (= CASE4 quote) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (= CASE4 quote) ]
[ 1]  17 : LABEL	"R7"
                                      1: [ (= CASE4 quote) ]
[ 1]  18 : SAVE_RETURN	"R9"	22
                                      2: [ (= CASE4 quote) [R9/22] ]
[ 2]  19 : LOCAL_GET	0	0	; elt
                                      3: [ (= CASE4 quote) [R9/22] (quote error) ]
[ 3]  20 : GLOBAL_GET	cdr
                                      4: [ (= CASE4 quote) [R9/22] (quote error) [Closure/core:cdr] ]
[ 4]  21 : JMP_CLOSURE	1
                                      3: [ (= CASE4 quote) [R9/22] (quote error) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ (= CASE4 quote) [R9/22] (error) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (= CASE4 quote) (error) ]
[ 2]  22 : LABEL	"R9"
                                      2: [ (= CASE4 quote) (error) ]
[ 2]  23 : GLOBAL_GET	cons
                                      3: [ (= CASE4 quote) (error) [Closure/core:cons] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ (= CASE4 quote) (error) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((= CASE4 quote) error) ]
[ 1]   1 : RETURN_VAL
                                      6: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) [R5/23] (((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) (((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 5]  23 : LABEL	"R5"
                                      5: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) (((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 5]  24 : GLOBAL_GET	append
                                      6: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) (((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) [Closure/core:append] ]
[ 6]  25 : JMP_CLOSURE	2
                                      5: [ let ((CASE4 (+ 1 2))) [R3/26] (cond) (((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((CASE4 (+ 1 2))) [R3/26] (cond ((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((CASE4 (+ 1 2))) (cond ((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 3]  26 : LABEL	"R3"
                                      3: [ let ((CASE4 (+ 1 2))) (cond ((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 3]  27 : GLOBAL_GET	list
                                      4: [ let ((CASE4 (+ 1 2))) (cond ((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) [Closure/core:list] ]
[ 4]  28 : JMP_CLOSURE	3
                                      3: [ let ((CASE4 (+ 1 2))) (cond ((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((CASE4 (+ 1 2))) (cond ((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      3: [ ((= CASE4 2) #f) ((= CASE4 3) #t) ((= CASE4 quote) error) ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (((= CASE4 3) #t) ((= CASE4 quote) error)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((= CASE4 2) #f) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((= CASE4 2) #f) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((= CASE4 2) #f) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (= CASE4 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= CASE4 2) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (= CASE4 2) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (= CASE4 2) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (= CASE4 2) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (= CASE4 2) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (= CASE4 2) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (= CASE4 2) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= CASE4 2) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= CASE4 2) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (= CASE4 2) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (= CASE4 2) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (= CASE4 2) [R2/31] (begin) [R4/28] ((= CASE4 2) #f) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (= CASE4 2) [R2/31] (begin) [R4/28] ((= CASE4 2) #f) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (= CASE4 2) [R2/31] (begin) [R4/28] ((= CASE4 2) #f) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= CASE4 2) [R2/31] (begin) [R4/28] (#f) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= CASE4 2) [R2/31] (begin) (#f) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (= CASE4 2) [R2/31] (begin) (#f) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (= CASE4 2) [R2/31] (begin) (#f) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (= CASE4 2) [R2/31] (begin) (#f) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= CASE4 2) [R2/31] (begin #f) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= CASE4 2) (begin #f) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (= CASE4 2) (begin #f) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (= CASE4 2) (begin #f) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (= CASE4 2) (begin #f) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (= CASE4 2) (begin #f) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (= CASE4 2) (begin #f) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (= CASE4 2) (begin #f) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= CASE4 2) (begin #f) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= CASE4 2) (begin #f) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (= CASE4 2) (begin #f) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (= CASE4 2) (begin #f) [R5/41] (cond) (((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (= CASE4 2) (begin #f) [R5/41] (cond) (((= CASE4 3) #t) ((= CASE4 quote) error)) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (= CASE4 2) (begin #f) [R5/41] (cond) (((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= CASE4 2) (begin #f) [R5/41] (cond ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= CASE4 2) (begin #f) (cond ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (= CASE4 2) (begin #f) (cond ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (= CASE4 2) (begin #f) (cond ((= CASE4 3) #t) ((= CASE4 quote) error)) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (= CASE4 2) (begin #f) (cond ((= CASE4 3) #t) ((= CASE4 quote) error)) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= CASE4 2) (begin #f) (cond ((= CASE4 3) #t) ((= CASE4 quote) error))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      2: [ ((= CASE4 3) #t) ((= CASE4 quote) error) ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] (((= CASE4 quote) error)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (((= CASE4 quote) error)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (((= CASE4 quote) error)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]  11 : LABEL	"L7"
                                      0: [  ]
[ 0]  12 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  13 : SAVE_RETURN	"R1"	17
                                      2: [ if [R1/17] ]
[ 2]  14 : LOCAL_GET	0	0	; first
                                      3: [ if [R1/17] ((= CASE4 3) #t) ]
[ 3]  15 : GLOBAL_GET	car
                                      4: [ if [R1/17] ((= CASE4 3) #t) [Closure/core:car] ]
[ 4]  16 : JMP_CLOSURE	1
                                      3: [ if [R1/17] ((= CASE4 3) #t) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [R1/17] (= CASE4 3) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= CASE4 3) ]
[ 2]  17 : LABEL	"R1"
                                      2: [ if (= CASE4 3) ]
[ 2]  18 : SAVE_RETURN	"R2"	31
                                      3: [ if (= CASE4 3) [R2/31] ]
[ 3]  19 : SAVE_RETURN	"R3"	23
                                      4: [ if (= CASE4 3) [R2/31] [R3/23] ]
[ 4]  20 : PUSH_CONST	begin
                                      5: [ if (= CASE4 3) [R2/31] [R3/23] begin ]
[ 5]  21 : GLOBAL_GET	list
                                      6: [ if (= CASE4 3) [R2/31] [R3/23] begin [Closure/core:list] ]
[ 6]  22 : JMP_CLOSURE	1
                                      5: [ if (= CASE4 3) [R2/31] [R3/23] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= CASE4 3) [R2/31] [R3/23] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= CASE4 3) [R2/31] (begin) ]
[ 4]  23 : LABEL	"R3"
                                      4: [ if (= CASE4 3) [R2/31] (begin) ]
[ 4]  24 : SAVE_RETURN	"R4"	28
                                      5: [ if (= CASE4 3) [R2/31] (begin) [R4/28] ]
[ 5]  25 : LOCAL_GET	0	0	; first
                                      6: [ if (= CASE4 3) [R2/31] (begin) [R4/28] ((= CASE4 3) #t) ]
[ 6]  26 : GLOBAL_GET	cdr
                                      7: [ if (= CASE4 3) [R2/31] (begin) [R4/28] ((= CASE4 3) #t) [Closure/core:cdr] ]
[ 7]  27 : JMP_CLOSURE	1
                                      6: [ if (= CASE4 3) [R2/31] (begin) [R4/28] ((= CASE4 3) #t) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= CASE4 3) [R2/31] (begin) [R4/28] (#t) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= CASE4 3) [R2/31] (begin) (#t) ]
[ 5]  28 : LABEL	"R4"
                                      5: [ if (= CASE4 3) [R2/31] (begin) (#t) ]
[ 5]  29 : GLOBAL_GET	append
                                      6: [ if (= CASE4 3) [R2/31] (begin) (#t) [Closure/core:append] ]
[ 6]  30 : JMP_CLOSURE	2
                                      5: [ if (= CASE4 3) [R2/31] (begin) (#t) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= CASE4 3) [R2/31] (begin #t) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= CASE4 3) (begin #t) ]
[ 3]  31 : LABEL	"R2"
                                      3: [ if (= CASE4 3) (begin #t) ]
[ 3]  32 : SAVE_RETURN	"R5"	41
                                      4: [ if (= CASE4 3) (begin #t) [R5/41] ]
[ 4]  33 : SAVE_RETURN	"R6"	37
                                      5: [ if (= CASE4 3) (begin #t) [R5/41] [R6/37] ]
[ 5]  34 : PUSH_CONST	cond
                                      6: [ if (= CASE4 3) (begin #t) [R5/41] [R6/37] cond ]
[ 6]  35 : GLOBAL_GET	list
                                      7: [ if (= CASE4 3) (begin #t) [R5/41] [R6/37] cond [Closure/core:list] ]
[ 7]  36 : JMP_CLOSURE	1
                                      6: [ if (= CASE4 3) (begin #t) [R5/41] [R6/37] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= CASE4 3) (begin #t) [R5/41] [R6/37] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= CASE4 3) (begin #t) [R5/41] (cond) ]
[ 5]  37 : LABEL	"R6"
                                      5: [ if (= CASE4 3) (begin #t) [R5/41] (cond) ]
[ 5]  38 : LOCAL_GET	0	1	; rest
                                      6: [ if (= CASE4 3) (begin #t) [R5/41] (cond) (((= CASE4 quote) error)) ]
[ 6]  39 : GLOBAL_GET	append
                                      7: [ if (= CASE4 3) (begin #t) [R5/41] (cond) (((= CASE4 quote) error)) [Closure/core:append] ]
[ 7]  40 : JMP_CLOSURE	2
                                      6: [ if (= CASE4 3) (begin #t) [R5/41] (cond) (((= CASE4 quote) error)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= CASE4 3) (begin #t) [R5/41] (cond ((= CASE4 quote) error)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= CASE4 3) (begin #t) (cond ((= CASE4 quote) error)) ]
[ 4]  41 : LABEL	"R5"
                                      4: [ if (= CASE4 3) (begin #t) (cond ((= CASE4 quote) error)) ]
[ 4]  42 : GLOBAL_GET	list
                                      5: [ if (= CASE4 3) (begin #t) (cond ((= CASE4 quote) error)) [Closure/core:list] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ if (= CASE4 3) (begin #t) (cond ((= CASE4 quote) error)) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= CASE4 3) (begin #t) (cond ((= CASE4 quote) error))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (first rest) => ((if (null? rest) (list (quote begin) first) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	JMP_IF_FALSE	"L7"	11
	7	PUSH_CONST	begin
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	2
11	LABEL	"L7"
	12	PUSH_CONST	if
	13	SAVE_RETURN	"R1"	17
	14	LOCAL_GET	0	0	; first
	15	GLOBAL_GET	car
	16	JMP_CLOSURE	1
17	LABEL	"R1"
	18	SAVE_RETURN	"R2"	31
	19	SAVE_RETURN	"R3"	23
	20	PUSH_CONST	begin
	21	GLOBAL_GET	list
	22	JMP_CLOSURE	1
23	LABEL	"R3"
	24	SAVE_RETURN	"R4"	28
	25	LOCAL_GET	0	0	; first
	26	GLOBAL_GET	cdr
	27	JMP_CLOSURE	1
28	LABEL	"R4"
	29	GLOBAL_GET	append
	30	JMP_CLOSURE	2
31	LABEL	"R2"
	32	SAVE_RETURN	"R5"	41
	33	SAVE_RETURN	"R6"	37
	34	PUSH_CONST	cond
	35	GLOBAL_GET	list
	36	JMP_CLOSURE	1
37	LABEL	"R6"
	38	LOCAL_GET	0	1	; rest
	39	GLOBAL_GET	append
	40	JMP_CLOSURE	2
41	LABEL	"R5"
	42	GLOBAL_GET	list
	43	JMP_CLOSURE	4

                                      1: [ ((= CASE4 quote) error) ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L7"	11
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ begin ((= CASE4 quote) error) ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ begin ((= CASE4 quote) error) [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	2
                                      2: [ begin ((= CASE4 quote) error) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin ((= CASE4 quote) error)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((CASE4 (+ 1 2))) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((CASE4 (+ 1 2))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((CASE4 (+ 1 2))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((CASE4 (+ 1 2))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (CASE4 (+ 1 2)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ CASE4 ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (CASE4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (CASE4) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (CASE4) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (CASE4) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (CASE4) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((CASE4)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((CASE4)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((CASE4)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((CASE4)) ((if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error))))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((CASE4)) ((if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error))))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((CASE4)) ((if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error))))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error))))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error))))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error))))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) [R5/30] [Closure/core:cadr] ((CASE4 (+ 1 2))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) [R5/30] [Closure/core:cadr] ((CASE4 (+ 1 2))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) [R5/30] [Closure/core:cadr] ((CASE4 (+ 1 2))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (CASE4 (+ 1 2)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (+ 1 2) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) [R5/30] ((+ 1 2)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) ((+ 1 2)) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) ((+ 1 2)) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) ((+ 1 2)) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))) ((+ 1 2)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (CASE4) (if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error))))) (+ 1 2)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (CASE4) => ((if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))
	0	MAKE_ENV	1	; (CASE4)
	1	SAVE_RETURN	"R1"	6
	2	LOCAL_GET	0	0	; CASE4
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"R1"
	7	JMP_IF_FALSE	"L5"	10
	8	PUSH_CONST	#f
	9	RETURN_VAL
10	LABEL	"L5"
	11	SAVE_RETURN	"R2"	16
	12	LOCAL_GET	0	0	; CASE4
	13	PUSH_CONST	3
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"R2"
	17	JMP_IF_FALSE	"L4"	20
	18	PUSH_CONST	#t
	19	RETURN_VAL
20	LABEL	"L4"
	21	GLOBAL_GET	error
	22	SAVE_RETURN	"R3"	27
	23	LOCAL_GET	0	0	; CASE4
	24	GLOBAL_GET	quote
	25	GLOBAL_GET	=
	26	JMP_CLOSURE	2
27	LABEL	"R3"
	28	JMP_CLOSURE	1

	CODE BLOCK ; () => ((case (+ 1 2) (2 #f) (3 #t) (quote error)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	MAKE_CLOSURE	[Closure]	; ((if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))
	8	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((case (+ 1 2) (2 #f) (3 #t) (quote error)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"R0"
	7	MAKE_CLOSURE	[Closure]	; ((if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))
	8	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	6
                                      1: [ [R0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [R0/6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [R0/6] 1 2 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [R0/6] 1 2 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R0/6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [R0/6] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   6 : LABEL	"R0"
                                      1: [ 3 ]
[ 1]   7 : MAKE_CLOSURE	[Closure]	; ((if (= CASE4 2) (begin #f) (if (= CASE4 3) (begin #t) (begin ((= CASE4 quote) error)))))
                                      2: [ 3 [Closure] ]
[ 2]   8 : JMP_CLOSURE	1
                                      1: [ 3 ]
[ 1]   0 : MAKE_ENV	1	; (CASE4)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R1"	6
                                      1: [ [R1/6] ]
[ 1]   2 : LOCAL_GET	0	0	; CASE4
                                      2: [ [R1/6] 3 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [R1/6] 3 2 ]
[ 3]   4 : GLOBAL_GET	=
                                      4: [ [R1/6] 3 2 [Closure/core:=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R1/6] 3 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"R1"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L5"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L5"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"R2"	16
                                      1: [ [R2/16] ]
[ 1]  12 : LOCAL_GET	0	0	; CASE4
                                      2: [ [R2/16] 3 ]
[ 2]  13 : PUSH_CONST	3
                                      3: [ [R2/16] 3 3 ]
[ 3]  14 : GLOBAL_GET	=
                                      4: [ [R2/16] 3 3 [Closure/core:=] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [R2/16] 3 3 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R2/16] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  16 : LABEL	"R2"
                                      1: [ #t ]
[ 1]  17 : JMP_IF_FALSE	"L4"	20
                                      0: [  ]
[ 0]  18 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]  19 : RETURN_VAL
test: got "#t"  - expected "#t"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((r '())) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)
ParseNext ==>  (let ((r (quote ()))) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)
Parsed:  (core:let ((foo:r (quote ()))) (core:for (core:i 0 (core:< core:i 3) (core:+ core:i 1)) (set! foo:r (core:cons core:i foo:r))) foo:r)
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((r (quote ()))) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((r (quote ()))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((r (quote ()))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((r (quote ()))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (r (quote ())) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ r ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (r) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (r) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (r) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (r) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (r) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((r)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((r)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((r)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((r)) ((for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((r)) ((for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((r)) ((for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) [R5/30] [Closure/core:cadr] ((r (quote ()))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) [R5/30] [Closure/core:cadr] ((r (quote ()))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) [R5/30] [Closure/core:cadr] ((r (quote ()))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (r (quote ())) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (quote ()) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) [R5/30] ((quote ())) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) ((quote ())) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) ((quote ())) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) ((quote ())) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)) ((quote ())) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (r) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r) (quote ())) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (test body) => ((let ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))))
	0	MAKE_ENVDOT	1	; (test body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; test
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	10
	7	LOCAL_GET	0	0	; test
	8	GLOBAL_GET	cadr
	9	JMP_CLOSURE	1
10	LABEL	"R1"
	11	SAVE_RETURN	"R2"	15
	12	LOCAL_GET	0	0	; test
	13	GLOBAL_GET	caddr
	14	JMP_CLOSURE	1
15	LABEL	"R2"
	16	SAVE_RETURN	"R3"	24
	17	SAVE_RETURN	"R4"	21
	18	LOCAL_GET	0	0	; test
	19	GLOBAL_GET	cdddr
	20	JMP_CLOSURE	1
21	LABEL	"R4"
	22	GLOBAL_GET	car
	23	JMP_CLOSURE	1
24	LABEL	"R3"
	25	MAKE_CLOSURE	[Closure]	; ((list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))
	26	JMP_CLOSURE	4

                                      2: [ (i 0 (< i 3) (+ i 1)) (set! r (cons i r)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (test body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; test
                                      2: [ [R0/5] (i 0 (< i 3) (+ i 1)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R0/5] (i 0 (< i 3) (+ i 1)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (i 0 (< i 3) (+ i 1)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R0/5] i ]
[ 2]   1 : RETURN_VAL
                                      1: [ i ]
[ 1]   5 : LABEL	"R0"
                                      1: [ i ]
[ 1]   6 : SAVE_RETURN	"R1"	10
                                      2: [ i [R1/10] ]
[ 2]   7 : LOCAL_GET	0	0	; test
                                      3: [ i [R1/10] (i 0 (< i 3) (+ i 1)) ]
[ 3]   8 : GLOBAL_GET	cadr
                                      4: [ i [R1/10] (i 0 (< i 3) (+ i 1)) [Closure/core:cadr] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ i [R1/10] (i 0 (< i 3) (+ i 1)) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ i [R1/10] 0 ]
[ 3]   1 : RETURN_VAL
                                      2: [ i 0 ]
[ 2]  10 : LABEL	"R1"
                                      2: [ i 0 ]
[ 2]  11 : SAVE_RETURN	"R2"	15
                                      3: [ i 0 [R2/15] ]
[ 3]  12 : LOCAL_GET	0	0	; test
                                      4: [ i 0 [R2/15] (i 0 (< i 3) (+ i 1)) ]
[ 4]  13 : GLOBAL_GET	caddr
                                      5: [ i 0 [R2/15] (i 0 (< i 3) (+ i 1)) [Closure/core:caddr] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ i 0 [R2/15] (i 0 (< i 3) (+ i 1)) ]
[ 4]   0 : CALL_PRIMOP	"caddr"
                                      4: [ i 0 [R2/15] (< i 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ i 0 (< i 3) ]
[ 3]  15 : LABEL	"R2"
                                      3: [ i 0 (< i 3) ]
[ 3]  16 : SAVE_RETURN	"R3"	24
                                      4: [ i 0 (< i 3) [R3/24] ]
[ 4]  17 : SAVE_RETURN	"R4"	21
                                      5: [ i 0 (< i 3) [R3/24] [R4/21] ]
[ 5]  18 : LOCAL_GET	0	0	; test
                                      6: [ i 0 (< i 3) [R3/24] [R4/21] (i 0 (< i 3) (+ i 1)) ]
[ 6]  19 : GLOBAL_GET	cdddr
                                      7: [ i 0 (< i 3) [R3/24] [R4/21] (i 0 (< i 3) (+ i 1)) [Closure/core:cdddr] ]
[ 7]  20 : JMP_CLOSURE	1
                                      6: [ i 0 (< i 3) [R3/24] [R4/21] (i 0 (< i 3) (+ i 1)) ]
[ 6]   0 : CALL_PRIMOP	"cdddr"
                                      6: [ i 0 (< i 3) [R3/24] [R4/21] ((+ i 1)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ i 0 (< i 3) [R3/24] ((+ i 1)) ]
[ 5]  21 : LABEL	"R4"
                                      5: [ i 0 (< i 3) [R3/24] ((+ i 1)) ]
[ 5]  22 : GLOBAL_GET	car
                                      6: [ i 0 (< i 3) [R3/24] ((+ i 1)) [Closure/core:car] ]
[ 6]  23 : JMP_CLOSURE	1
                                      5: [ i 0 (< i 3) [R3/24] ((+ i 1)) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ i 0 (< i 3) [R3/24] (+ i 1) ]
[ 5]   1 : RETURN_VAL
                                      4: [ i 0 (< i 3) (+ i 1) ]
[ 4]  24 : LABEL	"R3"
                                      4: [ i 0 (< i 3) (+ i 1) ]
[ 4]  25 : MAKE_CLOSURE	[Closure]	; ((list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))
                                      5: [ i 0 (< i 3) (+ i 1) [Closure] ]
[ 5]  26 : JMP_CLOSURE	4
                                      4: [ i 0 (< i 3) (+ i 1) ]
[ 4]   0 : MAKE_ENV	4	; (varname init-value predicate step-value)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	let
                                      1: [ let ]
[ 1]   2 : SAVE_RETURN	"R5"	11
                                      2: [ let [R5/11] ]
[ 2]   3 : SAVE_RETURN	"R6"	8
                                      3: [ let [R5/11] [R6/8] ]
[ 3]   4 : LOCAL_GET	0	0	; varname
                                      4: [ let [R5/11] [R6/8] i ]
[ 4]   5 : LOCAL_GET	0	1	; init-value
                                      5: [ let [R5/11] [R6/8] i 0 ]
[ 5]   6 : GLOBAL_GET	list
                                      6: [ let [R5/11] [R6/8] i 0 [Closure/core:list] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ let [R5/11] [R6/8] i 0 ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ let [R5/11] [R6/8] (i 0) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R5/11] (i 0) ]
[ 3]   8 : LABEL	"R6"
                                      3: [ let [R5/11] (i 0) ]
[ 3]   9 : GLOBAL_GET	list
                                      4: [ let [R5/11] (i 0) [Closure/core:list] ]
[ 4]  10 : JMP_CLOSURE	1
                                      3: [ let [R5/11] (i 0) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R5/11] ((i 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((i 0)) ]
[ 2]  11 : LABEL	"R5"
                                      2: [ let ((i 0)) ]
[ 2]  12 : SAVE_RETURN	"R7"	37
                                      3: [ let ((i 0)) [R7/37] ]
[ 3]  13 : SAVE_RETURN	"R8"	17
                                      4: [ let ((i 0)) [R7/37] [R8/17] ]
[ 4]  14 : PUSH_CONST	while
                                      5: [ let ((i 0)) [R7/37] [R8/17] while ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ let ((i 0)) [R7/37] [R8/17] while [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ let ((i 0)) [R7/37] [R8/17] while ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((i 0)) [R7/37] [R8/17] (while) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((i 0)) [R7/37] (while) ]
[ 4]  17 : LABEL	"R8"
                                      4: [ let ((i 0)) [R7/37] (while) ]
[ 4]  18 : SAVE_RETURN	"R9"	22
                                      5: [ let ((i 0)) [R7/37] (while) [R9/22] ]
[ 5]  19 : LOCAL_GET	0	2	; predicate
                                      6: [ let ((i 0)) [R7/37] (while) [R9/22] (< i 3) ]
[ 6]  20 : GLOBAL_GET	list
                                      7: [ let ((i 0)) [R7/37] (while) [R9/22] (< i 3) [Closure/core:list] ]
[ 7]  21 : JMP_CLOSURE	1
                                      6: [ let ((i 0)) [R7/37] (while) [R9/22] (< i 3) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((i 0)) [R7/37] (while) [R9/22] ((< i 3)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((i 0)) [R7/37] (while) ((< i 3)) ]
[ 5]  22 : LABEL	"R9"
                                      5: [ let ((i 0)) [R7/37] (while) ((< i 3)) ]
[ 5]  23 : LOCAL_GET	1	1	; body
                                      6: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ]
[ 6]  24 : SAVE_RETURN	"R10"	34
                                      7: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] ]
[ 7]  25 : SAVE_RETURN	"R11"	31
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] ]
[ 8]  26 : PUSH_CONST	set!
                                      9: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! ]
[ 9]  27 : LOCAL_GET	0	0	; varname
                                     10: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! i ]
[10]  28 : LOCAL_GET	0	3	; step-value
                                     11: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! i (+ i 1) ]
[11]  29 : GLOBAL_GET	list
                                     12: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! i (+ i 1) [Closure/core:list] ]
[12]  30 : JMP_CLOSURE	3
                                     11: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! i (+ i 1) ]
[11]   0 : CALL_PRIMOP	"list"
                                      9: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] (set! i (+ i 1)) ]
[ 9]   1 : RETURN_VAL
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] (set! i (+ i 1)) ]
[ 8]  31 : LABEL	"R11"
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] (set! i (+ i 1)) ]
[ 8]  32 : GLOBAL_GET	list
                                      9: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] (set! i (+ i 1)) [Closure/core:list] ]
[ 9]  33 : JMP_CLOSURE	1
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] (set! i (+ i 1)) ]
[ 8]   0 : CALL_PRIMOP	"list"
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] ((set! i (+ i 1))) ]
[ 8]   1 : RETURN_VAL
                                      7: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ((set! i (+ i 1))) ]
[ 7]  34 : LABEL	"R10"
                                      7: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ((set! i (+ i 1))) ]
[ 7]  35 : GLOBAL_GET	append
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ((set! i (+ i 1))) [Closure/core:append] ]
[ 8]  36 : JMP_CLOSURE	4
                                      7: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ((set! i (+ i 1))) ]
[ 7]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((i 0)) [R7/37] (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 3]  37 : LABEL	"R7"
                                      3: [ let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 3]  38 : GLOBAL_GET	list
                                      4: [ let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) [Closure/core:list] ]
[ 4]  39 : JMP_CLOSURE	3
                                      3: [ let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((i 0)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((i 0)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((i 0)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (i 0) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ i ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (i) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (i) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (i) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (i) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (i) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((i)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((i)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((i)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((i)) ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((i)) ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((i)) ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ((i 0)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ((i 0)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ((i 0)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (i 0) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 0 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) (0) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) (0) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) (0) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) (0) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (i) => ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))
	0	MAKE_ENV	1	; (i)
	1	PUSH_CONST	()
2	LABEL	"L4"
	3	SAVE_RETURN	"R1"	8
	4	LOCAL_GET	0	0	; i
	5	PUSH_CONST	3
	6	GLOBAL_GET	<
	7	JMP_CLOSURE	2
8	LABEL	"R1"
	9	JMP_IF_FALSE	"L5"	27
	10	STACK_POP
	11	SAVE_RETURN	"R2"	16
	12	LOCAL_GET	0	0	; i
	13	LOCAL_GET	1	0	; r
	14	GLOBAL_GET	cons
	15	JMP_CLOSURE	2
16	LABEL	"R2"
	17	LOCAL_SET	1	0	; r
	18	STACK_POP
	19	SAVE_RETURN	"R3"	24
	20	LOCAL_GET	0	0	; i
	21	PUSH_CONST	1
	22	GLOBAL_GET	+
	23	JMP_CLOSURE	2
24	LABEL	"R3"
	25	LOCAL_SET	0	0	; i
	26	JMP_TO_LABEL	"L4"	2
27	LABEL	"L5"
	28	RETURN_VAL

	CODE BLOCK ; (r) => ((for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)
	0	MAKE_ENV	1	; (r)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	STACK_POP
	7	LOCAL_GET	0	0	; r
	8	RETURN_VAL

	CODE BLOCK ; () => ((let ((r (quote ()))) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	MAKE_CLOSURE	[Closure]	; ((for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((let ((r (quote ()))) (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	MAKE_CLOSURE	[Closure]	; ((for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) r)
                                      2: [ () [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : MAKE_ENV	1	; (r)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	0
                                      2: [ [R0/5] 0 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))
                                      3: [ [R0/5] 0 [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] 0 ]
[ 2]   0 : MAKE_ENV	1	; (i)
                                      1: [ [R0/5] ]
[ 1]   1 : PUSH_CONST	()
                                      2: [ [R0/5] () ]
[ 2]   2 : LABEL	"L4"
                                      2: [ [R0/5] () ]
[ 2]   3 : SAVE_RETURN	"R1"	8
                                      3: [ [R0/5] () [R1/8] ]
[ 3]   4 : LOCAL_GET	0	0	; i
                                      4: [ [R0/5] () [R1/8] 0 ]
[ 4]   5 : PUSH_CONST	3
                                      5: [ [R0/5] () [R1/8] 0 3 ]
[ 5]   6 : GLOBAL_GET	<
                                      6: [ [R0/5] () [R1/8] 0 3 [Closure/core:<] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ [R0/5] () [R1/8] 0 3 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ [R0/5] () [R1/8] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/5] () #t ]
[ 3]   8 : LABEL	"R1"
                                      3: [ [R0/5] () #t ]
[ 3]   9 : JMP_IF_FALSE	"L5"	27
                                      2: [ [R0/5] () ]
[ 2]  10 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  11 : SAVE_RETURN	"R2"	16
                                      2: [ [R0/5] [R2/16] ]
[ 2]  12 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R2/16] 0 ]
[ 3]  13 : LOCAL_GET	1	0	; r
                                      4: [ [R0/5] [R2/16] 0 () ]
[ 4]  14 : GLOBAL_GET	cons
                                      5: [ [R0/5] [R2/16] 0 () [Closure/core:cons] ]
[ 5]  15 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R2/16] 0 () ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [R0/5] [R2/16] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] (0) ]
[ 2]  16 : LABEL	"R2"
                                      2: [ [R0/5] (0) ]
[ 2]  17 : LOCAL_SET	1	0	; r
                                      2: [ [R0/5] (0) ]
[ 2]  18 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  19 : SAVE_RETURN	"R3"	24
                                      2: [ [R0/5] [R3/24] ]
[ 2]  20 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R3/24] 0 ]
[ 3]  21 : PUSH_CONST	1
                                      4: [ [R0/5] [R3/24] 0 1 ]
[ 4]  22 : GLOBAL_GET	+
                                      5: [ [R0/5] [R3/24] 0 1 [Closure/core:+] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R3/24] 0 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [R0/5] [R3/24] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] 1 ]
[ 2]  24 : LABEL	"R3"
                                      2: [ [R0/5] 1 ]
[ 2]  25 : LOCAL_SET	0	0	; i
                                      2: [ [R0/5] 1 ]
[ 2]  26 : JMP_TO_LABEL	"L4"	2
                                      2: [ [R0/5] 1 ]
[ 2]   2 : LABEL	"L4"
                                      2: [ [R0/5] 1 ]
[ 2]   3 : SAVE_RETURN	"R1"	8
                                      3: [ [R0/5] 1 [R1/8] ]
[ 3]   4 : LOCAL_GET	0	0	; i
                                      4: [ [R0/5] 1 [R1/8] 1 ]
[ 4]   5 : PUSH_CONST	3
                                      5: [ [R0/5] 1 [R1/8] 1 3 ]
[ 5]   6 : GLOBAL_GET	<
                                      6: [ [R0/5] 1 [R1/8] 1 3 [Closure/core:<] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ [R0/5] 1 [R1/8] 1 3 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ [R0/5] 1 [R1/8] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/5] 1 #t ]
[ 3]   8 : LABEL	"R1"
                                      3: [ [R0/5] 1 #t ]
[ 3]   9 : JMP_IF_FALSE	"L5"	27
                                      2: [ [R0/5] 1 ]
[ 2]  10 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  11 : SAVE_RETURN	"R2"	16
                                      2: [ [R0/5] [R2/16] ]
[ 2]  12 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R2/16] 1 ]
[ 3]  13 : LOCAL_GET	1	0	; r
                                      4: [ [R0/5] [R2/16] 1 (0) ]
[ 4]  14 : GLOBAL_GET	cons
                                      5: [ [R0/5] [R2/16] 1 (0) [Closure/core:cons] ]
[ 5]  15 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R2/16] 1 (0) ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [R0/5] [R2/16] (1 0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] (1 0) ]
[ 2]  16 : LABEL	"R2"
                                      2: [ [R0/5] (1 0) ]
[ 2]  17 : LOCAL_SET	1	0	; r
                                      2: [ [R0/5] (1 0) ]
[ 2]  18 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  19 : SAVE_RETURN	"R3"	24
                                      2: [ [R0/5] [R3/24] ]
[ 2]  20 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R3/24] 1 ]
[ 3]  21 : PUSH_CONST	1
                                      4: [ [R0/5] [R3/24] 1 1 ]
[ 4]  22 : GLOBAL_GET	+
                                      5: [ [R0/5] [R3/24] 1 1 [Closure/core:+] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R3/24] 1 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [R0/5] [R3/24] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] 2 ]
[ 2]  24 : LABEL	"R3"
                                      2: [ [R0/5] 2 ]
[ 2]  25 : LOCAL_SET	0	0	; i
                                      2: [ [R0/5] 2 ]
[ 2]  26 : JMP_TO_LABEL	"L4"	2
                                      2: [ [R0/5] 2 ]
[ 2]   2 : LABEL	"L4"
                                      2: [ [R0/5] 2 ]
[ 2]   3 : SAVE_RETURN	"R1"	8
                                      3: [ [R0/5] 2 [R1/8] ]
[ 3]   4 : LOCAL_GET	0	0	; i
                                      4: [ [R0/5] 2 [R1/8] 2 ]
[ 4]   5 : PUSH_CONST	3
                                      5: [ [R0/5] 2 [R1/8] 2 3 ]
[ 5]   6 : GLOBAL_GET	<
                                      6: [ [R0/5] 2 [R1/8] 2 3 [Closure/core:<] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ [R0/5] 2 [R1/8] 2 3 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ [R0/5] 2 [R1/8] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/5] 2 #t ]
[ 3]   8 : LABEL	"R1"
                                      3: [ [R0/5] 2 #t ]
[ 3]   9 : JMP_IF_FALSE	"L5"	27
                                      2: [ [R0/5] 2 ]
[ 2]  10 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  11 : SAVE_RETURN	"R2"	16
                                      2: [ [R0/5] [R2/16] ]
[ 2]  12 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R2/16] 2 ]
[ 3]  13 : LOCAL_GET	1	0	; r
                                      4: [ [R0/5] [R2/16] 2 (1 0) ]
[ 4]  14 : GLOBAL_GET	cons
                                      5: [ [R0/5] [R2/16] 2 (1 0) [Closure/core:cons] ]
[ 5]  15 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R2/16] 2 (1 0) ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [R0/5] [R2/16] (2 1 0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] (2 1 0) ]
[ 2]  16 : LABEL	"R2"
                                      2: [ [R0/5] (2 1 0) ]
[ 2]  17 : LOCAL_SET	1	0	; r
                                      2: [ [R0/5] (2 1 0) ]
[ 2]  18 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  19 : SAVE_RETURN	"R3"	24
                                      2: [ [R0/5] [R3/24] ]
[ 2]  20 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R3/24] 2 ]
[ 3]  21 : PUSH_CONST	1
                                      4: [ [R0/5] [R3/24] 2 1 ]
[ 4]  22 : GLOBAL_GET	+
                                      5: [ [R0/5] [R3/24] 2 1 [Closure/core:+] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R3/24] 2 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [R0/5] [R3/24] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] 3 ]
[ 2]  24 : LABEL	"R3"
                                      2: [ [R0/5] 3 ]
[ 2]  25 : LOCAL_SET	0	0	; i
                                      2: [ [R0/5] 3 ]
[ 2]  26 : JMP_TO_LABEL	"L4"	2
                                      2: [ [R0/5] 3 ]
[ 2]   2 : LABEL	"L4"
                                      2: [ [R0/5] 3 ]
[ 2]   3 : SAVE_RETURN	"R1"	8
                                      3: [ [R0/5] 3 [R1/8] ]
[ 3]   4 : LOCAL_GET	0	0	; i
                                      4: [ [R0/5] 3 [R1/8] 3 ]
[ 4]   5 : PUSH_CONST	3
                                      5: [ [R0/5] 3 [R1/8] 3 3 ]
[ 5]   6 : GLOBAL_GET	<
                                      6: [ [R0/5] 3 [R1/8] 3 3 [Closure/core:<] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ [R0/5] 3 [R1/8] 3 3 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ [R0/5] 3 [R1/8] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/5] 3 #f ]
[ 3]   8 : LABEL	"R1"
                                      3: [ [R0/5] 3 #f ]
[ 3]   9 : JMP_IF_FALSE	"L5"	27
                                      2: [ [R0/5] 3 ]
[ 2]  27 : LABEL	"L5"
                                      2: [ [R0/5] 3 ]
[ 2]  28 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   5 : LABEL	"R0"
                                      1: [ 3 ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : LOCAL_GET	0	0	; r
                                      1: [ (2 1 0) ]
[ 1]   8 : RETURN_VAL
test: got "(2 1 0)"  - expected "(2 1 0)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((r '())) (dotimes (i 3) (set! r (cons i r))) r)
ParseNext ==>  (let ((r (quote ()))) (dotimes (i 3) (set! r (cons i r))) r)
Parsed:  (core:let ((foo:r (quote ()))) (core:dotimes (core:i 3) (set! foo:r (core:cons core:i foo:r))) foo:r)
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((r (quote ()))) (dotimes (i 3) (set! r (cons i r))) r ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((r (quote ()))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((r (quote ()))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((r (quote ()))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (r (quote ())) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ r ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (r) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (r) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (r) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (r) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (r) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((r)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((r)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((r)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((r)) ((dotimes (i 3) (set! r (cons i r))) r) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((r)) ((dotimes (i 3) (set! r (cons i r))) r) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((r)) ((dotimes (i 3) (set! r (cons i r))) r) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (r) (dotimes (i 3) (set! r (cons i r))) r) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (r) (dotimes (i 3) (set! r (cons i r))) r) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (r) (dotimes (i 3) (set! r (cons i r))) r) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (r) (dotimes (i 3) (set! r (cons i r))) r) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (r) (dotimes (i 3) (set! r (cons i r))) r) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) [R5/30] [Closure/core:cadr] ((r (quote ()))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) [R5/30] [Closure/core:cadr] ((r (quote ()))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) [R5/30] [Closure/core:cadr] ((r (quote ()))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (r (quote ())) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (quote ()) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) [R5/30] ((quote ())) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) ((quote ())) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) ((quote ())) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) ((quote ())) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r)) ((quote ())) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (r) (dotimes (i 3) (set! r (cons i r))) r) (quote ())) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (pars body) => ((let ((varname (car pars)) (count (cadr pars))) (append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body)))
	0	MAKE_ENVDOT	1	; (pars body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; pars
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	10
	7	LOCAL_GET	0	0	; pars
	8	GLOBAL_GET	cadr
	9	JMP_CLOSURE	1
10	LABEL	"R1"
	11	MAKE_CLOSURE	[Closure]	; ((append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))
	12	JMP_CLOSURE	2

                                      2: [ (i 3) (set! r (cons i r)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (pars body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; pars
                                      2: [ [R0/5] (i 3) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R0/5] (i 3) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (i 3) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R0/5] i ]
[ 2]   1 : RETURN_VAL
                                      1: [ i ]
[ 1]   5 : LABEL	"R0"
                                      1: [ i ]
[ 1]   6 : SAVE_RETURN	"R1"	10
                                      2: [ i [R1/10] ]
[ 2]   7 : LOCAL_GET	0	0	; pars
                                      3: [ i [R1/10] (i 3) ]
[ 3]   8 : GLOBAL_GET	cadr
                                      4: [ i [R1/10] (i 3) [Closure/core:cadr] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ i [R1/10] (i 3) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ i [R1/10] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ i 3 ]
[ 2]  10 : LABEL	"R1"
                                      2: [ i 3 ]
[ 2]  11 : MAKE_CLOSURE	[Closure]	; ((append (list (quote for)) (list (list varname (quote 0) (list (quote <) varname count) (list (quote +) varname (quote 1)))) body))
                                      3: [ i 3 [Closure] ]
[ 3]  12 : JMP_CLOSURE	2
                                      2: [ i 3 ]
[ 2]   0 : MAKE_ENV	2	; (varname count)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R2"	5
                                      1: [ [R2/5] ]
[ 1]   2 : PUSH_CONST	for
                                      2: [ [R2/5] for ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R2/5] for [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R2/5] for ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R2/5] (for) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (for) ]
[ 1]   5 : LABEL	"R2"
                                      1: [ (for) ]
[ 1]   6 : SAVE_RETURN	"R3"	29
                                      2: [ (for) [R3/29] ]
[ 2]   7 : SAVE_RETURN	"R4"	26
                                      3: [ (for) [R3/29] [R4/26] ]
[ 3]   8 : LOCAL_GET	0	0	; varname
                                      4: [ (for) [R3/29] [R4/26] i ]
[ 4]   9 : PUSH_CONST	0
                                      5: [ (for) [R3/29] [R4/26] i 0 ]
[ 5]  10 : SAVE_RETURN	"R5"	16
                                      6: [ (for) [R3/29] [R4/26] i 0 [R5/16] ]
[ 6]  11 : PUSH_CONST	<
                                      7: [ (for) [R3/29] [R4/26] i 0 [R5/16] < ]
[ 7]  12 : LOCAL_GET	0	0	; varname
                                      8: [ (for) [R3/29] [R4/26] i 0 [R5/16] < i ]
[ 8]  13 : LOCAL_GET	0	1	; count
                                      9: [ (for) [R3/29] [R4/26] i 0 [R5/16] < i 3 ]
[ 9]  14 : GLOBAL_GET	list
                                     10: [ (for) [R3/29] [R4/26] i 0 [R5/16] < i 3 [Closure/core:list] ]
[10]  15 : JMP_CLOSURE	3
                                      9: [ (for) [R3/29] [R4/26] i 0 [R5/16] < i 3 ]
[ 9]   0 : CALL_PRIMOP	"list"
                                      7: [ (for) [R3/29] [R4/26] i 0 [R5/16] (< i 3) ]
[ 7]   1 : RETURN_VAL
                                      6: [ (for) [R3/29] [R4/26] i 0 (< i 3) ]
[ 6]  16 : LABEL	"R5"
                                      6: [ (for) [R3/29] [R4/26] i 0 (< i 3) ]
[ 6]  17 : SAVE_RETURN	"R6"	23
                                      7: [ (for) [R3/29] [R4/26] i 0 (< i 3) [R6/23] ]
[ 7]  18 : PUSH_CONST	+
                                      8: [ (for) [R3/29] [R4/26] i 0 (< i 3) [R6/23] + ]
[ 8]  19 : LOCAL_GET	0	0	; varname
                                      9: [ (for) [R3/29] [R4/26] i 0 (< i 3) [R6/23] + i ]
[ 9]  20 : PUSH_CONST	1
                                     10: [ (for) [R3/29] [R4/26] i 0 (< i 3) [R6/23] + i 1 ]
[10]  21 : GLOBAL_GET	list
                                     11: [ (for) [R3/29] [R4/26] i 0 (< i 3) [R6/23] + i 1 [Closure/core:list] ]
[11]  22 : JMP_CLOSURE	3
                                     10: [ (for) [R3/29] [R4/26] i 0 (< i 3) [R6/23] + i 1 ]
[10]   0 : CALL_PRIMOP	"list"
                                      8: [ (for) [R3/29] [R4/26] i 0 (< i 3) [R6/23] (+ i 1) ]
[ 8]   1 : RETURN_VAL
                                      7: [ (for) [R3/29] [R4/26] i 0 (< i 3) (+ i 1) ]
[ 7]  23 : LABEL	"R6"
                                      7: [ (for) [R3/29] [R4/26] i 0 (< i 3) (+ i 1) ]
[ 7]  24 : GLOBAL_GET	list
                                      8: [ (for) [R3/29] [R4/26] i 0 (< i 3) (+ i 1) [Closure/core:list] ]
[ 8]  25 : JMP_CLOSURE	4
                                      7: [ (for) [R3/29] [R4/26] i 0 (< i 3) (+ i 1) ]
[ 7]   0 : CALL_PRIMOP	"list"
                                      4: [ (for) [R3/29] [R4/26] (i 0 (< i 3) (+ i 1)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (for) [R3/29] (i 0 (< i 3) (+ i 1)) ]
[ 3]  26 : LABEL	"R4"
                                      3: [ (for) [R3/29] (i 0 (< i 3) (+ i 1)) ]
[ 3]  27 : GLOBAL_GET	list
                                      4: [ (for) [R3/29] (i 0 (< i 3) (+ i 1)) [Closure/core:list] ]
[ 4]  28 : JMP_CLOSURE	1
                                      3: [ (for) [R3/29] (i 0 (< i 3) (+ i 1)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (for) [R3/29] ((i 0 (< i 3) (+ i 1))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (for) ((i 0 (< i 3) (+ i 1))) ]
[ 2]  29 : LABEL	"R3"
                                      2: [ (for) ((i 0 (< i 3) (+ i 1))) ]
[ 2]  30 : LOCAL_GET	1	1	; body
                                      3: [ (for) ((i 0 (< i 3) (+ i 1))) ((set! r (cons i r))) ]
[ 3]  31 : GLOBAL_GET	append
                                      4: [ (for) ((i 0 (< i 3) (+ i 1))) ((set! r (cons i r))) [Closure/core:append] ]
[ 4]  32 : JMP_CLOSURE	3
                                      3: [ (for) ((i 0 (< i 3) (+ i 1))) ((set! r (cons i r))) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (for (i 0 (< i 3) (+ i 1)) (set! r (cons i r))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (test body) => ((let ((varname (car test)) (init-value (cadr test)) (predicate (caddr test)) (step-value (car (cdddr test)))) (list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value))))))
	0	MAKE_ENVDOT	1	; (test body)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	0	; test
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	SAVE_RETURN	"R1"	10
	7	LOCAL_GET	0	0	; test
	8	GLOBAL_GET	cadr
	9	JMP_CLOSURE	1
10	LABEL	"R1"
	11	SAVE_RETURN	"R2"	15
	12	LOCAL_GET	0	0	; test
	13	GLOBAL_GET	caddr
	14	JMP_CLOSURE	1
15	LABEL	"R2"
	16	SAVE_RETURN	"R3"	24
	17	SAVE_RETURN	"R4"	21
	18	LOCAL_GET	0	0	; test
	19	GLOBAL_GET	cdddr
	20	JMP_CLOSURE	1
21	LABEL	"R4"
	22	GLOBAL_GET	car
	23	JMP_CLOSURE	1
24	LABEL	"R3"
	25	MAKE_CLOSURE	[Closure]	; ((list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))
	26	JMP_CLOSURE	4

                                      2: [ (i 0 (< i 3) (+ i 1)) (set! r (cons i r)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (test body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; test
                                      2: [ [R0/5] (i 0 (< i 3) (+ i 1)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [R0/5] (i 0 (< i 3) (+ i 1)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (i 0 (< i 3) (+ i 1)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R0/5] i ]
[ 2]   1 : RETURN_VAL
                                      1: [ i ]
[ 1]   5 : LABEL	"R0"
                                      1: [ i ]
[ 1]   6 : SAVE_RETURN	"R1"	10
                                      2: [ i [R1/10] ]
[ 2]   7 : LOCAL_GET	0	0	; test
                                      3: [ i [R1/10] (i 0 (< i 3) (+ i 1)) ]
[ 3]   8 : GLOBAL_GET	cadr
                                      4: [ i [R1/10] (i 0 (< i 3) (+ i 1)) [Closure/core:cadr] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ i [R1/10] (i 0 (< i 3) (+ i 1)) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ i [R1/10] 0 ]
[ 3]   1 : RETURN_VAL
                                      2: [ i 0 ]
[ 2]  10 : LABEL	"R1"
                                      2: [ i 0 ]
[ 2]  11 : SAVE_RETURN	"R2"	15
                                      3: [ i 0 [R2/15] ]
[ 3]  12 : LOCAL_GET	0	0	; test
                                      4: [ i 0 [R2/15] (i 0 (< i 3) (+ i 1)) ]
[ 4]  13 : GLOBAL_GET	caddr
                                      5: [ i 0 [R2/15] (i 0 (< i 3) (+ i 1)) [Closure/core:caddr] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ i 0 [R2/15] (i 0 (< i 3) (+ i 1)) ]
[ 4]   0 : CALL_PRIMOP	"caddr"
                                      4: [ i 0 [R2/15] (< i 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ i 0 (< i 3) ]
[ 3]  15 : LABEL	"R2"
                                      3: [ i 0 (< i 3) ]
[ 3]  16 : SAVE_RETURN	"R3"	24
                                      4: [ i 0 (< i 3) [R3/24] ]
[ 4]  17 : SAVE_RETURN	"R4"	21
                                      5: [ i 0 (< i 3) [R3/24] [R4/21] ]
[ 5]  18 : LOCAL_GET	0	0	; test
                                      6: [ i 0 (< i 3) [R3/24] [R4/21] (i 0 (< i 3) (+ i 1)) ]
[ 6]  19 : GLOBAL_GET	cdddr
                                      7: [ i 0 (< i 3) [R3/24] [R4/21] (i 0 (< i 3) (+ i 1)) [Closure/core:cdddr] ]
[ 7]  20 : JMP_CLOSURE	1
                                      6: [ i 0 (< i 3) [R3/24] [R4/21] (i 0 (< i 3) (+ i 1)) ]
[ 6]   0 : CALL_PRIMOP	"cdddr"
                                      6: [ i 0 (< i 3) [R3/24] [R4/21] ((+ i 1)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ i 0 (< i 3) [R3/24] ((+ i 1)) ]
[ 5]  21 : LABEL	"R4"
                                      5: [ i 0 (< i 3) [R3/24] ((+ i 1)) ]
[ 5]  22 : GLOBAL_GET	car
                                      6: [ i 0 (< i 3) [R3/24] ((+ i 1)) [Closure/core:car] ]
[ 6]  23 : JMP_CLOSURE	1
                                      5: [ i 0 (< i 3) [R3/24] ((+ i 1)) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ i 0 (< i 3) [R3/24] (+ i 1) ]
[ 5]   1 : RETURN_VAL
                                      4: [ i 0 (< i 3) (+ i 1) ]
[ 4]  24 : LABEL	"R3"
                                      4: [ i 0 (< i 3) (+ i 1) ]
[ 4]  25 : MAKE_CLOSURE	[Closure]	; ((list (quote let) (list (list varname init-value)) (append (list (quote while)) (list predicate) body (list (list (quote set!) varname step-value)))))
                                      5: [ i 0 (< i 3) (+ i 1) [Closure] ]
[ 5]  26 : JMP_CLOSURE	4
                                      4: [ i 0 (< i 3) (+ i 1) ]
[ 4]   0 : MAKE_ENV	4	; (varname init-value predicate step-value)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	let
                                      1: [ let ]
[ 1]   2 : SAVE_RETURN	"R5"	11
                                      2: [ let [R5/11] ]
[ 2]   3 : SAVE_RETURN	"R6"	8
                                      3: [ let [R5/11] [R6/8] ]
[ 3]   4 : LOCAL_GET	0	0	; varname
                                      4: [ let [R5/11] [R6/8] i ]
[ 4]   5 : LOCAL_GET	0	1	; init-value
                                      5: [ let [R5/11] [R6/8] i 0 ]
[ 5]   6 : GLOBAL_GET	list
                                      6: [ let [R5/11] [R6/8] i 0 [Closure/core:list] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ let [R5/11] [R6/8] i 0 ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ let [R5/11] [R6/8] (i 0) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [R5/11] (i 0) ]
[ 3]   8 : LABEL	"R6"
                                      3: [ let [R5/11] (i 0) ]
[ 3]   9 : GLOBAL_GET	list
                                      4: [ let [R5/11] (i 0) [Closure/core:list] ]
[ 4]  10 : JMP_CLOSURE	1
                                      3: [ let [R5/11] (i 0) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [R5/11] ((i 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((i 0)) ]
[ 2]  11 : LABEL	"R5"
                                      2: [ let ((i 0)) ]
[ 2]  12 : SAVE_RETURN	"R7"	37
                                      3: [ let ((i 0)) [R7/37] ]
[ 3]  13 : SAVE_RETURN	"R8"	17
                                      4: [ let ((i 0)) [R7/37] [R8/17] ]
[ 4]  14 : PUSH_CONST	while
                                      5: [ let ((i 0)) [R7/37] [R8/17] while ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ let ((i 0)) [R7/37] [R8/17] while [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ let ((i 0)) [R7/37] [R8/17] while ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((i 0)) [R7/37] [R8/17] (while) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((i 0)) [R7/37] (while) ]
[ 4]  17 : LABEL	"R8"
                                      4: [ let ((i 0)) [R7/37] (while) ]
[ 4]  18 : SAVE_RETURN	"R9"	22
                                      5: [ let ((i 0)) [R7/37] (while) [R9/22] ]
[ 5]  19 : LOCAL_GET	0	2	; predicate
                                      6: [ let ((i 0)) [R7/37] (while) [R9/22] (< i 3) ]
[ 6]  20 : GLOBAL_GET	list
                                      7: [ let ((i 0)) [R7/37] (while) [R9/22] (< i 3) [Closure/core:list] ]
[ 7]  21 : JMP_CLOSURE	1
                                      6: [ let ((i 0)) [R7/37] (while) [R9/22] (< i 3) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((i 0)) [R7/37] (while) [R9/22] ((< i 3)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((i 0)) [R7/37] (while) ((< i 3)) ]
[ 5]  22 : LABEL	"R9"
                                      5: [ let ((i 0)) [R7/37] (while) ((< i 3)) ]
[ 5]  23 : LOCAL_GET	1	1	; body
                                      6: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ]
[ 6]  24 : SAVE_RETURN	"R10"	34
                                      7: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] ]
[ 7]  25 : SAVE_RETURN	"R11"	31
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] ]
[ 8]  26 : PUSH_CONST	set!
                                      9: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! ]
[ 9]  27 : LOCAL_GET	0	0	; varname
                                     10: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! i ]
[10]  28 : LOCAL_GET	0	3	; step-value
                                     11: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! i (+ i 1) ]
[11]  29 : GLOBAL_GET	list
                                     12: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! i (+ i 1) [Closure/core:list] ]
[12]  30 : JMP_CLOSURE	3
                                     11: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] set! i (+ i 1) ]
[11]   0 : CALL_PRIMOP	"list"
                                      9: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] [R11/31] (set! i (+ i 1)) ]
[ 9]   1 : RETURN_VAL
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] (set! i (+ i 1)) ]
[ 8]  31 : LABEL	"R11"
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] (set! i (+ i 1)) ]
[ 8]  32 : GLOBAL_GET	list
                                      9: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] (set! i (+ i 1)) [Closure/core:list] ]
[ 9]  33 : JMP_CLOSURE	1
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] (set! i (+ i 1)) ]
[ 8]   0 : CALL_PRIMOP	"list"
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) [R10/34] ((set! i (+ i 1))) ]
[ 8]   1 : RETURN_VAL
                                      7: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ((set! i (+ i 1))) ]
[ 7]  34 : LABEL	"R10"
                                      7: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ((set! i (+ i 1))) ]
[ 7]  35 : GLOBAL_GET	append
                                      8: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ((set! i (+ i 1))) [Closure/core:append] ]
[ 8]  36 : JMP_CLOSURE	4
                                      7: [ let ((i 0)) [R7/37] (while) ((< i 3)) ((set! r (cons i r))) ((set! i (+ i 1))) ]
[ 7]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((i 0)) [R7/37] (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 3]  37 : LABEL	"R7"
                                      3: [ let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 3]  38 : GLOBAL_GET	list
                                      4: [ let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) [Closure/core:list] ]
[ 4]  39 : JMP_CLOSURE	3
                                      3: [ let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((i 0)) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((i 0)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((i 0)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((i 0)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (i 0) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ i ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (i) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (i) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (i) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (i) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (i) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((i)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((i)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((i)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((i)) ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((i)) ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((i)) ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ((i 0)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ((i 0)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] [Closure/core:cadr] ((i 0)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (i 0) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 0 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) [R5/30] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) (0) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) (0) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) (0) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))) (0) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (i) (while (< i 3) (set! r (cons i r)) (set! i (+ i 1)))) 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (i) => ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))
	0	MAKE_ENV	1	; (i)
	1	PUSH_CONST	()
2	LABEL	"L4"
	3	SAVE_RETURN	"R1"	8
	4	LOCAL_GET	0	0	; i
	5	PUSH_CONST	3
	6	GLOBAL_GET	<
	7	JMP_CLOSURE	2
8	LABEL	"R1"
	9	JMP_IF_FALSE	"L5"	27
	10	STACK_POP
	11	SAVE_RETURN	"R2"	16
	12	LOCAL_GET	0	0	; i
	13	LOCAL_GET	1	0	; r
	14	GLOBAL_GET	cons
	15	JMP_CLOSURE	2
16	LABEL	"R2"
	17	LOCAL_SET	1	0	; r
	18	STACK_POP
	19	SAVE_RETURN	"R3"	24
	20	LOCAL_GET	0	0	; i
	21	PUSH_CONST	1
	22	GLOBAL_GET	+
	23	JMP_CLOSURE	2
24	LABEL	"R3"
	25	LOCAL_SET	0	0	; i
	26	JMP_TO_LABEL	"L4"	2
27	LABEL	"L5"
	28	RETURN_VAL

	CODE BLOCK ; (r) => ((dotimes (i 3) (set! r (cons i r))) r)
	0	MAKE_ENV	1	; (r)
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	STACK_POP
	7	LOCAL_GET	0	0	; r
	8	RETURN_VAL

	CODE BLOCK ; () => ((let ((r (quote ()))) (dotimes (i 3) (set! r (cons i r))) r))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	MAKE_CLOSURE	[Closure]	; ((dotimes (i 3) (set! r (cons i r))) r)
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((let ((r (quote ()))) (dotimes (i 3) (set! r (cons i r))) r))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	MAKE_CLOSURE	[Closure]	; ((dotimes (i 3) (set! r (cons i r))) r)
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((dotimes (i 3) (set! r (cons i r))) r)
                                      2: [ () [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : MAKE_ENV	1	; (r)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	0
                                      2: [ [R0/5] 0 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((while (< i 3) (set! r (cons i r)) (set! i (+ i 1))))
                                      3: [ [R0/5] 0 [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] 0 ]
[ 2]   0 : MAKE_ENV	1	; (i)
                                      1: [ [R0/5] ]
[ 1]   1 : PUSH_CONST	()
                                      2: [ [R0/5] () ]
[ 2]   2 : LABEL	"L4"
                                      2: [ [R0/5] () ]
[ 2]   3 : SAVE_RETURN	"R1"	8
                                      3: [ [R0/5] () [R1/8] ]
[ 3]   4 : LOCAL_GET	0	0	; i
                                      4: [ [R0/5] () [R1/8] 0 ]
[ 4]   5 : PUSH_CONST	3
                                      5: [ [R0/5] () [R1/8] 0 3 ]
[ 5]   6 : GLOBAL_GET	<
                                      6: [ [R0/5] () [R1/8] 0 3 [Closure/core:<] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ [R0/5] () [R1/8] 0 3 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ [R0/5] () [R1/8] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/5] () #t ]
[ 3]   8 : LABEL	"R1"
                                      3: [ [R0/5] () #t ]
[ 3]   9 : JMP_IF_FALSE	"L5"	27
                                      2: [ [R0/5] () ]
[ 2]  10 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  11 : SAVE_RETURN	"R2"	16
                                      2: [ [R0/5] [R2/16] ]
[ 2]  12 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R2/16] 0 ]
[ 3]  13 : LOCAL_GET	1	0	; r
                                      4: [ [R0/5] [R2/16] 0 () ]
[ 4]  14 : GLOBAL_GET	cons
                                      5: [ [R0/5] [R2/16] 0 () [Closure/core:cons] ]
[ 5]  15 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R2/16] 0 () ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [R0/5] [R2/16] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] (0) ]
[ 2]  16 : LABEL	"R2"
                                      2: [ [R0/5] (0) ]
[ 2]  17 : LOCAL_SET	1	0	; r
                                      2: [ [R0/5] (0) ]
[ 2]  18 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  19 : SAVE_RETURN	"R3"	24
                                      2: [ [R0/5] [R3/24] ]
[ 2]  20 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R3/24] 0 ]
[ 3]  21 : PUSH_CONST	1
                                      4: [ [R0/5] [R3/24] 0 1 ]
[ 4]  22 : GLOBAL_GET	+
                                      5: [ [R0/5] [R3/24] 0 1 [Closure/core:+] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R3/24] 0 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [R0/5] [R3/24] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] 1 ]
[ 2]  24 : LABEL	"R3"
                                      2: [ [R0/5] 1 ]
[ 2]  25 : LOCAL_SET	0	0	; i
                                      2: [ [R0/5] 1 ]
[ 2]  26 : JMP_TO_LABEL	"L4"	2
                                      2: [ [R0/5] 1 ]
[ 2]   2 : LABEL	"L4"
                                      2: [ [R0/5] 1 ]
[ 2]   3 : SAVE_RETURN	"R1"	8
                                      3: [ [R0/5] 1 [R1/8] ]
[ 3]   4 : LOCAL_GET	0	0	; i
                                      4: [ [R0/5] 1 [R1/8] 1 ]
[ 4]   5 : PUSH_CONST	3
                                      5: [ [R0/5] 1 [R1/8] 1 3 ]
[ 5]   6 : GLOBAL_GET	<
                                      6: [ [R0/5] 1 [R1/8] 1 3 [Closure/core:<] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ [R0/5] 1 [R1/8] 1 3 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ [R0/5] 1 [R1/8] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/5] 1 #t ]
[ 3]   8 : LABEL	"R1"
                                      3: [ [R0/5] 1 #t ]
[ 3]   9 : JMP_IF_FALSE	"L5"	27
                                      2: [ [R0/5] 1 ]
[ 2]  10 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  11 : SAVE_RETURN	"R2"	16
                                      2: [ [R0/5] [R2/16] ]
[ 2]  12 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R2/16] 1 ]
[ 3]  13 : LOCAL_GET	1	0	; r
                                      4: [ [R0/5] [R2/16] 1 (0) ]
[ 4]  14 : GLOBAL_GET	cons
                                      5: [ [R0/5] [R2/16] 1 (0) [Closure/core:cons] ]
[ 5]  15 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R2/16] 1 (0) ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [R0/5] [R2/16] (1 0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] (1 0) ]
[ 2]  16 : LABEL	"R2"
                                      2: [ [R0/5] (1 0) ]
[ 2]  17 : LOCAL_SET	1	0	; r
                                      2: [ [R0/5] (1 0) ]
[ 2]  18 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  19 : SAVE_RETURN	"R3"	24
                                      2: [ [R0/5] [R3/24] ]
[ 2]  20 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R3/24] 1 ]
[ 3]  21 : PUSH_CONST	1
                                      4: [ [R0/5] [R3/24] 1 1 ]
[ 4]  22 : GLOBAL_GET	+
                                      5: [ [R0/5] [R3/24] 1 1 [Closure/core:+] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R3/24] 1 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [R0/5] [R3/24] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] 2 ]
[ 2]  24 : LABEL	"R3"
                                      2: [ [R0/5] 2 ]
[ 2]  25 : LOCAL_SET	0	0	; i
                                      2: [ [R0/5] 2 ]
[ 2]  26 : JMP_TO_LABEL	"L4"	2
                                      2: [ [R0/5] 2 ]
[ 2]   2 : LABEL	"L4"
                                      2: [ [R0/5] 2 ]
[ 2]   3 : SAVE_RETURN	"R1"	8
                                      3: [ [R0/5] 2 [R1/8] ]
[ 3]   4 : LOCAL_GET	0	0	; i
                                      4: [ [R0/5] 2 [R1/8] 2 ]
[ 4]   5 : PUSH_CONST	3
                                      5: [ [R0/5] 2 [R1/8] 2 3 ]
[ 5]   6 : GLOBAL_GET	<
                                      6: [ [R0/5] 2 [R1/8] 2 3 [Closure/core:<] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ [R0/5] 2 [R1/8] 2 3 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ [R0/5] 2 [R1/8] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/5] 2 #t ]
[ 3]   8 : LABEL	"R1"
                                      3: [ [R0/5] 2 #t ]
[ 3]   9 : JMP_IF_FALSE	"L5"	27
                                      2: [ [R0/5] 2 ]
[ 2]  10 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  11 : SAVE_RETURN	"R2"	16
                                      2: [ [R0/5] [R2/16] ]
[ 2]  12 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R2/16] 2 ]
[ 3]  13 : LOCAL_GET	1	0	; r
                                      4: [ [R0/5] [R2/16] 2 (1 0) ]
[ 4]  14 : GLOBAL_GET	cons
                                      5: [ [R0/5] [R2/16] 2 (1 0) [Closure/core:cons] ]
[ 5]  15 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R2/16] 2 (1 0) ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [R0/5] [R2/16] (2 1 0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] (2 1 0) ]
[ 2]  16 : LABEL	"R2"
                                      2: [ [R0/5] (2 1 0) ]
[ 2]  17 : LOCAL_SET	1	0	; r
                                      2: [ [R0/5] (2 1 0) ]
[ 2]  18 : STACK_POP
                                      1: [ [R0/5] ]
[ 1]  19 : SAVE_RETURN	"R3"	24
                                      2: [ [R0/5] [R3/24] ]
[ 2]  20 : LOCAL_GET	0	0	; i
                                      3: [ [R0/5] [R3/24] 2 ]
[ 3]  21 : PUSH_CONST	1
                                      4: [ [R0/5] [R3/24] 2 1 ]
[ 4]  22 : GLOBAL_GET	+
                                      5: [ [R0/5] [R3/24] 2 1 [Closure/core:+] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ [R0/5] [R3/24] 2 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [R0/5] [R3/24] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/5] 3 ]
[ 2]  24 : LABEL	"R3"
                                      2: [ [R0/5] 3 ]
[ 2]  25 : LOCAL_SET	0	0	; i
                                      2: [ [R0/5] 3 ]
[ 2]  26 : JMP_TO_LABEL	"L4"	2
                                      2: [ [R0/5] 3 ]
[ 2]   2 : LABEL	"L4"
                                      2: [ [R0/5] 3 ]
[ 2]   3 : SAVE_RETURN	"R1"	8
                                      3: [ [R0/5] 3 [R1/8] ]
[ 3]   4 : LOCAL_GET	0	0	; i
                                      4: [ [R0/5] 3 [R1/8] 3 ]
[ 4]   5 : PUSH_CONST	3
                                      5: [ [R0/5] 3 [R1/8] 3 3 ]
[ 5]   6 : GLOBAL_GET	<
                                      6: [ [R0/5] 3 [R1/8] 3 3 [Closure/core:<] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ [R0/5] 3 [R1/8] 3 3 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ [R0/5] 3 [R1/8] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/5] 3 #f ]
[ 3]   8 : LABEL	"R1"
                                      3: [ [R0/5] 3 #f ]
[ 3]   9 : JMP_IF_FALSE	"L5"	27
                                      2: [ [R0/5] 3 ]
[ 2]  27 : LABEL	"L5"
                                      2: [ [R0/5] 3 ]
[ 2]  28 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   5 : LABEL	"R0"
                                      1: [ 3 ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : LOCAL_GET	0	0	; r
                                      1: [ (2 1 0) ]
[ 1]   8 : RETURN_VAL
test: got "(2 1 0)"  - expected "(2 1 0)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (apply + '(1 2))
ParseNext ==>  (apply + (quote (1 2)))
Parsed:  (core:apply core:+ (quote (1 2)))
Executing:  
	CODE BLOCK ; (fn args) => ((let ((arglist (eval args))) (append (list fn) arglist)))
	0	MAKE_ENV	2	; (fn args)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; args
	3	GLOBAL_GET	eval
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	MAKE_CLOSURE	[Closure]	; ((append (list fn) arglist))
	7	JMP_CLOSURE	1

                                      2: [ + (quote (1 2)) ]
[ 2]   0 : MAKE_ENV	2	; (fn args)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; args
                                      2: [ [R0/5] (quote (1 2)) ]
[ 2]   3 : GLOBAL_GET	eval
                                      3: [ [R0/5] (quote (1 2)) [Closure/core:eval] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (quote (1 2)) ]
[ 2]   0 : CALL_PRIMOP	"eval"
Executing:  
	CODE BLOCK ; () => ((quote (1 2)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : RETURN_VAL
                                      2: [ [R0/5] (1 2) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (1 2) ]
[ 1]   5 : LABEL	"R0"
                                      1: [ (1 2) ]
[ 1]   6 : MAKE_CLOSURE	[Closure]	; ((append (list fn) arglist))
                                      2: [ (1 2) [Closure] ]
[ 2]   7 : JMP_CLOSURE	1
                                      1: [ (1 2) ]
[ 1]   0 : MAKE_ENV	1	; (arglist)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R1"	5
                                      1: [ [R1/5] ]
[ 1]   2 : LOCAL_GET	1	0	; fn
                                      2: [ [R1/5] + ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R1/5] + [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R1/5] + ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R1/5] (+) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (+) ]
[ 1]   5 : LABEL	"R1"
                                      1: [ (+) ]
[ 1]   6 : LOCAL_GET	0	0	; arglist
                                      2: [ (+) (1 2) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (+) (1 2) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (+) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (+ 1 2) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((quote (1 2)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	RETURN_VAL

	CODE BLOCK ; () => ((apply + (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((apply + (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 1 2 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (apply cons '(1 2))
ParseNext ==>  (apply cons (quote (1 2)))
Parsed:  (core:apply core:cons (quote (1 2)))
Executing:  
	CODE BLOCK ; (fn args) => ((let ((arglist (eval args))) (append (list fn) arglist)))
	0	MAKE_ENV	2	; (fn args)
	1	SAVE_RETURN	"R0"	5
	2	LOCAL_GET	0	1	; args
	3	GLOBAL_GET	eval
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	MAKE_CLOSURE	[Closure]	; ((append (list fn) arglist))
	7	JMP_CLOSURE	1

                                      2: [ cons (quote (1 2)) ]
[ 2]   0 : MAKE_ENV	2	; (fn args)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; args
                                      2: [ [R0/5] (quote (1 2)) ]
[ 2]   3 : GLOBAL_GET	eval
                                      3: [ [R0/5] (quote (1 2)) [Closure/core:eval] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (quote (1 2)) ]
[ 2]   0 : CALL_PRIMOP	"eval"
Executing:  
	CODE BLOCK ; () => ((quote (1 2)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : RETURN_VAL
                                      2: [ [R0/5] (1 2) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (1 2) ]
[ 1]   5 : LABEL	"R0"
                                      1: [ (1 2) ]
[ 1]   6 : MAKE_CLOSURE	[Closure]	; ((append (list fn) arglist))
                                      2: [ (1 2) [Closure] ]
[ 2]   7 : JMP_CLOSURE	1
                                      1: [ (1 2) ]
[ 1]   0 : MAKE_ENV	1	; (arglist)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R1"	5
                                      1: [ [R1/5] ]
[ 1]   2 : LOCAL_GET	1	0	; fn
                                      2: [ [R1/5] cons ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [R1/5] cons [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R1/5] cons ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R1/5] (cons) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (cons) ]
[ 1]   5 : LABEL	"R1"
                                      1: [ (cons) ]
[ 1]   6 : LOCAL_GET	0	0	; arglist
                                      2: [ (cons) (1 2) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (cons) (1 2) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (cons) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (cons 1 2) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((quote (1 2)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	RETURN_VAL

	CODE BLOCK ; () => ((apply cons (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	cons
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((apply cons (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	cons
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	cons
                                      3: [ 1 2 [Closure/core:cons] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ (1 . 2) ]
[ 1]   1 : RETURN_VAL
test: got "(1 . 2)"  - expected "(1 . 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (fold-left cons '() '(1 2))
ParseNext ==>  (fold-left cons (quote ()) (quote (1 2)))
Parsed:  (core:fold-left core:cons (quote ()) (quote (1 2)))
Compiled:
	CODE BLOCK ; () => ((fold-left cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	fold-left
	5	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK ; () => ((fold-left cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	fold-left
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cons
                                      1: [ [Closure/core:cons] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [Closure/core:cons] () ]
[ 2]   3 : PUSH_CONST	(1 2)
                                      3: [ [Closure/core:cons] () (1 2) ]
[ 3]   4 : GLOBAL_GET	fold-left
                                      4: [ [Closure/core:cons] () (1 2) [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ [Closure/core:cons] () (1 2) ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	10
                                      1: [ [R0/10] ]
[ 1]   2 : SAVE_RETURN	"R1"	6
                                      2: [ [R0/10] [R1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [R0/10] [R1/6] (1 2) ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [R0/10] [R1/6] (1 2) [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R0/10] [R1/6] (1 2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R0/10] [R1/6] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/10] 2 ]
[ 2]   6 : LABEL	"R1"
                                      2: [ [R0/10] 2 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [R0/10] 2 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [R0/10] 2 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [R0/10] 2 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R0/10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : LABEL	"R0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L5"
                                      0: [  ]
[ 0]  15 : LOCAL_GET	0	0	; fn
                                      1: [ [Closure/core:cons] ]
[ 1]  16 : SAVE_RETURN	"R2"	25
                                      2: [ [Closure/core:cons] [R2/25] ]
[ 2]  17 : LOCAL_GET	0	1	; base
                                      3: [ [Closure/core:cons] [R2/25] () ]
[ 3]  18 : SAVE_RETURN	"R3"	22
                                      4: [ [Closure/core:cons] [R2/25] () [R3/22] ]
[ 4]  19 : LOCAL_GET	0	2	; lst
                                      5: [ [Closure/core:cons] [R2/25] () [R3/22] (1 2) ]
[ 5]  20 : GLOBAL_GET	car
                                      6: [ [Closure/core:cons] [R2/25] () [R3/22] (1 2) [Closure/core:car] ]
[ 6]  21 : JMP_CLOSURE	1
                                      5: [ [Closure/core:cons] [R2/25] () [R3/22] (1 2) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [Closure/core:cons] [R2/25] () [R3/22] 1 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [Closure/core:cons] [R2/25] () 1 ]
[ 4]  22 : LABEL	"R3"
                                      4: [ [Closure/core:cons] [R2/25] () 1 ]
[ 4]  23 : LOCAL_GET	0	0	; fn
                                      5: [ [Closure/core:cons] [R2/25] () 1 [Closure/core:cons] ]
[ 5]  24 : JMP_CLOSURE	2
                                      4: [ [Closure/core:cons] [R2/25] () 1 ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [Closure/core:cons] [R2/25] (() . 1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [Closure/core:cons] (() . 1) ]
[ 2]  25 : LABEL	"R2"
                                      2: [ [Closure/core:cons] (() . 1) ]
[ 2]  26 : SAVE_RETURN	"R4"	30
                                      3: [ [Closure/core:cons] (() . 1) [R4/30] ]
[ 3]  27 : LOCAL_GET	0	2	; lst
                                      4: [ [Closure/core:cons] (() . 1) [R4/30] (1 2) ]
[ 4]  28 : GLOBAL_GET	cdr
                                      5: [ [Closure/core:cons] (() . 1) [R4/30] (1 2) [Closure/core:cdr] ]
[ 5]  29 : JMP_CLOSURE	1
                                      4: [ [Closure/core:cons] (() . 1) [R4/30] (1 2) ]
[ 4]   0 : CALL_PRIMOP	"cdr"
                                      4: [ [Closure/core:cons] (() . 1) [R4/30] (2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [Closure/core:cons] (() . 1) (2) ]
[ 3]  30 : LABEL	"R4"
                                      3: [ [Closure/core:cons] (() . 1) (2) ]
[ 3]  31 : GLOBAL_GET	fold-left
                                      4: [ [Closure/core:cons] (() . 1) (2) [Closure] ]
[ 4]  32 : JMP_CLOSURE	3
                                      3: [ [Closure/core:cons] (() . 1) (2) ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	10
                                      1: [ [R0/10] ]
[ 1]   2 : SAVE_RETURN	"R1"	6
                                      2: [ [R0/10] [R1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [R0/10] [R1/6] (2) ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [R0/10] [R1/6] (2) [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R0/10] [R1/6] (2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R0/10] [R1/6] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/10] 1 ]
[ 2]   6 : LABEL	"R1"
                                      2: [ [R0/10] 1 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [R0/10] 1 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [R0/10] 1 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [R0/10] 1 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R0/10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : LABEL	"R0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L5"
                                      0: [  ]
[ 0]  15 : LOCAL_GET	0	0	; fn
                                      1: [ [Closure/core:cons] ]
[ 1]  16 : SAVE_RETURN	"R2"	25
                                      2: [ [Closure/core:cons] [R2/25] ]
[ 2]  17 : LOCAL_GET	0	1	; base
                                      3: [ [Closure/core:cons] [R2/25] (() . 1) ]
[ 3]  18 : SAVE_RETURN	"R3"	22
                                      4: [ [Closure/core:cons] [R2/25] (() . 1) [R3/22] ]
[ 4]  19 : LOCAL_GET	0	2	; lst
                                      5: [ [Closure/core:cons] [R2/25] (() . 1) [R3/22] (2) ]
[ 5]  20 : GLOBAL_GET	car
                                      6: [ [Closure/core:cons] [R2/25] (() . 1) [R3/22] (2) [Closure/core:car] ]
[ 6]  21 : JMP_CLOSURE	1
                                      5: [ [Closure/core:cons] [R2/25] (() . 1) [R3/22] (2) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [Closure/core:cons] [R2/25] (() . 1) [R3/22] 2 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [Closure/core:cons] [R2/25] (() . 1) 2 ]
[ 4]  22 : LABEL	"R3"
                                      4: [ [Closure/core:cons] [R2/25] (() . 1) 2 ]
[ 4]  23 : LOCAL_GET	0	0	; fn
                                      5: [ [Closure/core:cons] [R2/25] (() . 1) 2 [Closure/core:cons] ]
[ 5]  24 : JMP_CLOSURE	2
                                      4: [ [Closure/core:cons] [R2/25] (() . 1) 2 ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [Closure/core:cons] [R2/25] ((() . 1) . 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [Closure/core:cons] ((() . 1) . 2) ]
[ 2]  25 : LABEL	"R2"
                                      2: [ [Closure/core:cons] ((() . 1) . 2) ]
[ 2]  26 : SAVE_RETURN	"R4"	30
                                      3: [ [Closure/core:cons] ((() . 1) . 2) [R4/30] ]
[ 3]  27 : LOCAL_GET	0	2	; lst
                                      4: [ [Closure/core:cons] ((() . 1) . 2) [R4/30] (2) ]
[ 4]  28 : GLOBAL_GET	cdr
                                      5: [ [Closure/core:cons] ((() . 1) . 2) [R4/30] (2) [Closure/core:cdr] ]
[ 5]  29 : JMP_CLOSURE	1
                                      4: [ [Closure/core:cons] ((() . 1) . 2) [R4/30] (2) ]
[ 4]   0 : CALL_PRIMOP	"cdr"
                                      4: [ [Closure/core:cons] ((() . 1) . 2) [R4/30] () ]
[ 4]   1 : RETURN_VAL
                                      3: [ [Closure/core:cons] ((() . 1) . 2) () ]
[ 3]  30 : LABEL	"R4"
                                      3: [ [Closure/core:cons] ((() . 1) . 2) () ]
[ 3]  31 : GLOBAL_GET	fold-left
                                      4: [ [Closure/core:cons] ((() . 1) . 2) () [Closure] ]
[ 4]  32 : JMP_CLOSURE	3
                                      3: [ [Closure/core:cons] ((() . 1) . 2) () ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	10
                                      1: [ [R0/10] ]
[ 1]   2 : SAVE_RETURN	"R1"	6
                                      2: [ [R0/10] [R1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [R0/10] [R1/6] () ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [R0/10] [R1/6] () [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R0/10] [R1/6] () ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R0/10] [R1/6] 0 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/10] 0 ]
[ 2]   6 : LABEL	"R1"
                                      2: [ [R0/10] 0 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [R0/10] 0 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [R0/10] 0 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [R0/10] 0 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R0/10] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  10 : LABEL	"R0"
                                      1: [ #t ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  12 : LOCAL_GET	0	1	; base
                                      1: [ ((() . 1) . 2) ]
[ 1]  13 : RETURN_VAL
test: got "((() . 1) . 2)"  - expected "((() . 1) . 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (fold-right cons '() '(1 2))
ParseNext ==>  (fold-right cons (quote ()) (quote (1 2)))
Parsed:  (core:fold-right core:cons (quote ()) (quote (1 2)))
Compiled:
	CODE BLOCK ; () => ((fold-right cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	fold-right
	5	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK ; () => ((fold-right cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	fold-right
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cons
                                      1: [ [Closure/core:cons] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [Closure/core:cons] () ]
[ 2]   3 : PUSH_CONST	(1 2)
                                      3: [ [Closure/core:cons] () (1 2) ]
[ 3]   4 : GLOBAL_GET	fold-right
                                      4: [ [Closure/core:cons] () (1 2) [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ [Closure/core:cons] () (1 2) ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	10
                                      1: [ [R0/10] ]
[ 1]   2 : SAVE_RETURN	"R1"	6
                                      2: [ [R0/10] [R1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [R0/10] [R1/6] (1 2) ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [R0/10] [R1/6] (1 2) [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R0/10] [R1/6] (1 2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R0/10] [R1/6] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/10] 2 ]
[ 2]   6 : LABEL	"R1"
                                      2: [ [R0/10] 2 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [R0/10] 2 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [R0/10] 2 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [R0/10] 2 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R0/10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : LABEL	"R0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L5"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	19
                                      1: [ [R2/19] ]
[ 1]  16 : LOCAL_GET	0	2	; lst
                                      2: [ [R2/19] (1 2) ]
[ 2]  17 : GLOBAL_GET	car
                                      3: [ [R2/19] (1 2) [Closure/core:car] ]
[ 3]  18 : JMP_CLOSURE	1
                                      2: [ [R2/19] (1 2) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R2/19] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]  19 : LABEL	"R2"
                                      1: [ 1 ]
[ 1]  20 : SAVE_RETURN	"R3"	30
                                      2: [ 1 [R3/30] ]
[ 2]  21 : LOCAL_GET	0	0	; fn
                                      3: [ 1 [R3/30] [Closure/core:cons] ]
[ 3]  22 : LOCAL_GET	0	1	; base
                                      4: [ 1 [R3/30] [Closure/core:cons] () ]
[ 4]  23 : SAVE_RETURN	"R4"	27
                                      5: [ 1 [R3/30] [Closure/core:cons] () [R4/27] ]
[ 5]  24 : LOCAL_GET	0	2	; lst
                                      6: [ 1 [R3/30] [Closure/core:cons] () [R4/27] (1 2) ]
[ 6]  25 : GLOBAL_GET	cdr
                                      7: [ 1 [R3/30] [Closure/core:cons] () [R4/27] (1 2) [Closure/core:cdr] ]
[ 7]  26 : JMP_CLOSURE	1
                                      6: [ 1 [R3/30] [Closure/core:cons] () [R4/27] (1 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ 1 [R3/30] [Closure/core:cons] () [R4/27] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ 1 [R3/30] [Closure/core:cons] () (2) ]
[ 5]  27 : LABEL	"R4"
                                      5: [ 1 [R3/30] [Closure/core:cons] () (2) ]
[ 5]  28 : GLOBAL_GET	fold-right
                                      6: [ 1 [R3/30] [Closure/core:cons] () (2) [Closure] ]
[ 6]  29 : JMP_CLOSURE	3
                                      5: [ 1 [R3/30] [Closure/core:cons] () (2) ]
[ 5]   0 : MAKE_ENV	3	; (fn base lst)
                                      2: [ 1 [R3/30] ]
[ 2]   1 : SAVE_RETURN	"R0"	10
                                      3: [ 1 [R3/30] [R0/10] ]
[ 3]   2 : SAVE_RETURN	"R1"	6
                                      4: [ 1 [R3/30] [R0/10] [R1/6] ]
[ 4]   3 : LOCAL_GET	0	2	; lst
                                      5: [ 1 [R3/30] [R0/10] [R1/6] (2) ]
[ 5]   4 : GLOBAL_GET	length
                                      6: [ 1 [R3/30] [R0/10] [R1/6] (2) [Closure/core:length] ]
[ 6]   5 : JMP_CLOSURE	1
                                      5: [ 1 [R3/30] [R0/10] [R1/6] (2) ]
[ 5]   0 : CALL_PRIMOP	"length"
                                      5: [ 1 [R3/30] [R0/10] [R1/6] 1 ]
[ 5]   1 : RETURN_VAL
                                      4: [ 1 [R3/30] [R0/10] 1 ]
[ 4]   6 : LABEL	"R1"
                                      4: [ 1 [R3/30] [R0/10] 1 ]
[ 4]   7 : PUSH_CONST	0
                                      5: [ 1 [R3/30] [R0/10] 1 0 ]
[ 5]   8 : GLOBAL_GET	=
                                      6: [ 1 [R3/30] [R0/10] 1 0 [Closure/core:=] ]
[ 6]   9 : JMP_CLOSURE	2
                                      5: [ 1 [R3/30] [R0/10] 1 0 ]
[ 5]   0 : CALL_PRIMOP	"="
                                      4: [ 1 [R3/30] [R0/10] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 [R3/30] #f ]
[ 3]  10 : LABEL	"R0"
                                      3: [ 1 [R3/30] #f ]
[ 3]  11 : JMP_IF_FALSE	"L5"	14
                                      2: [ 1 [R3/30] ]
[ 2]  14 : LABEL	"L5"
                                      2: [ 1 [R3/30] ]
[ 2]  15 : SAVE_RETURN	"R2"	19
                                      3: [ 1 [R3/30] [R2/19] ]
[ 3]  16 : LOCAL_GET	0	2	; lst
                                      4: [ 1 [R3/30] [R2/19] (2) ]
[ 4]  17 : GLOBAL_GET	car
                                      5: [ 1 [R3/30] [R2/19] (2) [Closure/core:car] ]
[ 5]  18 : JMP_CLOSURE	1
                                      4: [ 1 [R3/30] [R2/19] (2) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ 1 [R3/30] [R2/19] 2 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 [R3/30] 2 ]
[ 3]  19 : LABEL	"R2"
                                      3: [ 1 [R3/30] 2 ]
[ 3]  20 : SAVE_RETURN	"R3"	30
                                      4: [ 1 [R3/30] 2 [R3/30] ]
[ 4]  21 : LOCAL_GET	0	0	; fn
                                      5: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] ]
[ 5]  22 : LOCAL_GET	0	1	; base
                                      6: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () ]
[ 6]  23 : SAVE_RETURN	"R4"	27
                                      7: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () [R4/27] ]
[ 7]  24 : LOCAL_GET	0	2	; lst
                                      8: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () [R4/27] (2) ]
[ 8]  25 : GLOBAL_GET	cdr
                                      9: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () [R4/27] (2) [Closure/core:cdr] ]
[ 9]  26 : JMP_CLOSURE	1
                                      8: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () [R4/27] (2) ]
[ 8]   0 : CALL_PRIMOP	"cdr"
                                      8: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () [R4/27] () ]
[ 8]   1 : RETURN_VAL
                                      7: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () () ]
[ 7]  27 : LABEL	"R4"
                                      7: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () () ]
[ 7]  28 : GLOBAL_GET	fold-right
                                      8: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () () [Closure] ]
[ 8]  29 : JMP_CLOSURE	3
                                      7: [ 1 [R3/30] 2 [R3/30] [Closure/core:cons] () () ]
[ 7]   0 : MAKE_ENV	3	; (fn base lst)
                                      4: [ 1 [R3/30] 2 [R3/30] ]
[ 4]   1 : SAVE_RETURN	"R0"	10
                                      5: [ 1 [R3/30] 2 [R3/30] [R0/10] ]
[ 5]   2 : SAVE_RETURN	"R1"	6
                                      6: [ 1 [R3/30] 2 [R3/30] [R0/10] [R1/6] ]
[ 6]   3 : LOCAL_GET	0	2	; lst
                                      7: [ 1 [R3/30] 2 [R3/30] [R0/10] [R1/6] () ]
[ 7]   4 : GLOBAL_GET	length
                                      8: [ 1 [R3/30] 2 [R3/30] [R0/10] [R1/6] () [Closure/core:length] ]
[ 8]   5 : JMP_CLOSURE	1
                                      7: [ 1 [R3/30] 2 [R3/30] [R0/10] [R1/6] () ]
[ 7]   0 : CALL_PRIMOP	"length"
                                      7: [ 1 [R3/30] 2 [R3/30] [R0/10] [R1/6] 0 ]
[ 7]   1 : RETURN_VAL
                                      6: [ 1 [R3/30] 2 [R3/30] [R0/10] 0 ]
[ 6]   6 : LABEL	"R1"
                                      6: [ 1 [R3/30] 2 [R3/30] [R0/10] 0 ]
[ 6]   7 : PUSH_CONST	0
                                      7: [ 1 [R3/30] 2 [R3/30] [R0/10] 0 0 ]
[ 7]   8 : GLOBAL_GET	=
                                      8: [ 1 [R3/30] 2 [R3/30] [R0/10] 0 0 [Closure/core:=] ]
[ 8]   9 : JMP_CLOSURE	2
                                      7: [ 1 [R3/30] 2 [R3/30] [R0/10] 0 0 ]
[ 7]   0 : CALL_PRIMOP	"="
                                      6: [ 1 [R3/30] 2 [R3/30] [R0/10] #t ]
[ 6]   1 : RETURN_VAL
                                      5: [ 1 [R3/30] 2 [R3/30] #t ]
[ 5]  10 : LABEL	"R0"
                                      5: [ 1 [R3/30] 2 [R3/30] #t ]
[ 5]  11 : JMP_IF_FALSE	"L5"	14
                                      4: [ 1 [R3/30] 2 [R3/30] ]
[ 4]  12 : LOCAL_GET	0	1	; base
                                      5: [ 1 [R3/30] 2 [R3/30] () ]
[ 5]  13 : RETURN_VAL
                                      4: [ 1 [R3/30] 2 () ]
[ 4]  30 : LABEL	"R3"
                                      4: [ 1 [R3/30] 2 () ]
[ 4]  31 : LOCAL_GET	0	0	; fn
                                      5: [ 1 [R3/30] 2 () [Closure/core:cons] ]
[ 5]  32 : JMP_CLOSURE	2
                                      4: [ 1 [R3/30] 2 () ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ 1 [R3/30] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 (2) ]
[ 2]  30 : LABEL	"R3"
                                      2: [ 1 (2) ]
[ 2]  31 : LOCAL_GET	0	0	; fn
                                      3: [ 1 (2) [Closure/core:cons] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ 1 (2) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ (1 2) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2)"  - expected "(1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (zip '(1 2) '(11 12))
ParseNext ==>  (zip (quote (1 2)) (quote (11 12)))
Parsed:  (core:zip (quote (1 2)) (quote (11 12)))
Compiled:
	CODE BLOCK ; () => ((zip (quote (1 2)) (quote (11 12))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	PUSH_CONST	(11 12)
	3	GLOBAL_GET	zip
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((zip (quote (1 2)) (quote (11 12))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	PUSH_CONST	(11 12)
	3	GLOBAL_GET	zip
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : PUSH_CONST	(11 12)
                                      2: [ (1 2) (11 12) ]
[ 2]   3 : GLOBAL_GET	zip
                                      3: [ (1 2) (11 12) [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ (1 2) (11 12) ]
[ 2]   0 : MAKE_ENV	2	; (a b)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; a
                                      2: [ [R0/5] (1 2) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (1 2) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (1 2) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : DUPLICATE
                                      2: [ #f #f ]
[ 2]   7 : JMP_IF_TRUE	"L2"	14
                                      1: [ #f ]
[ 1]   8 : STACK_POP
                                      0: [  ]
[ 0]   9 : SAVE_RETURN	"R1"	13
                                      1: [ [R1/13] ]
[ 1]  10 : LOCAL_GET	0	1	; b
                                      2: [ [R1/13] (11 12) ]
[ 2]  11 : GLOBAL_GET	null?
                                      3: [ [R1/13] (11 12) [Closure/core:null?] ]
[ 3]  12 : JMP_CLOSURE	1
                                      2: [ [R1/13] (11 12) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R1/13] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  13 : LABEL	"R1"
                                      1: [ #f ]
[ 1]  14 : LABEL	"L2"
                                      1: [ #f ]
[ 1]  15 : JMP_IF_FALSE	"L9"	18
                                      0: [  ]
[ 0]  18 : LABEL	"L9"
                                      0: [  ]
[ 0]  19 : SAVE_RETURN	"R3"	32
                                      1: [ [R3/32] ]
[ 1]  20 : SAVE_RETURN	"R4"	24
                                      2: [ [R3/32] [R4/24] ]
[ 2]  21 : LOCAL_GET	0	0	; a
                                      3: [ [R3/32] [R4/24] (1 2) ]
[ 3]  22 : GLOBAL_GET	car
                                      4: [ [R3/32] [R4/24] (1 2) [Closure/core:car] ]
[ 4]  23 : JMP_CLOSURE	1
                                      3: [ [R3/32] [R4/24] (1 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ [R3/32] [R4/24] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R3/32] 1 ]
[ 2]  24 : LABEL	"R4"
                                      2: [ [R3/32] 1 ]
[ 2]  25 : SAVE_RETURN	"R5"	29
                                      3: [ [R3/32] 1 [R5/29] ]
[ 3]  26 : LOCAL_GET	0	1	; b
                                      4: [ [R3/32] 1 [R5/29] (11 12) ]
[ 4]  27 : GLOBAL_GET	car
                                      5: [ [R3/32] 1 [R5/29] (11 12) [Closure/core:car] ]
[ 5]  28 : JMP_CLOSURE	1
                                      4: [ [R3/32] 1 [R5/29] (11 12) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ [R3/32] 1 [R5/29] 11 ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R3/32] 1 11 ]
[ 3]  29 : LABEL	"R5"
                                      3: [ [R3/32] 1 11 ]
[ 3]  30 : GLOBAL_GET	list
                                      4: [ [R3/32] 1 11 [Closure/core:list] ]
[ 4]  31 : JMP_CLOSURE	2
                                      3: [ [R3/32] 1 11 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      2: [ [R3/32] (1 11) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (1 11) ]
[ 1]  32 : LABEL	"R3"
                                      1: [ (1 11) ]
[ 1]  33 : SAVE_RETURN	"R6"	46
                                      2: [ (1 11) [R6/46] ]
[ 2]  34 : SAVE_RETURN	"R7"	38
                                      3: [ (1 11) [R6/46] [R7/38] ]
[ 3]  35 : LOCAL_GET	0	0	; a
                                      4: [ (1 11) [R6/46] [R7/38] (1 2) ]
[ 4]  36 : GLOBAL_GET	cdr
                                      5: [ (1 11) [R6/46] [R7/38] (1 2) [Closure/core:cdr] ]
[ 5]  37 : JMP_CLOSURE	1
                                      4: [ (1 11) [R6/46] [R7/38] (1 2) ]
[ 4]   0 : CALL_PRIMOP	"cdr"
                                      4: [ (1 11) [R6/46] [R7/38] (2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (1 11) [R6/46] (2) ]
[ 3]  38 : LABEL	"R7"
                                      3: [ (1 11) [R6/46] (2) ]
[ 3]  39 : SAVE_RETURN	"R8"	43
                                      4: [ (1 11) [R6/46] (2) [R8/43] ]
[ 4]  40 : LOCAL_GET	0	1	; b
                                      5: [ (1 11) [R6/46] (2) [R8/43] (11 12) ]
[ 5]  41 : GLOBAL_GET	cdr
                                      6: [ (1 11) [R6/46] (2) [R8/43] (11 12) [Closure/core:cdr] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ (1 11) [R6/46] (2) [R8/43] (11 12) ]
[ 5]   0 : CALL_PRIMOP	"cdr"
                                      5: [ (1 11) [R6/46] (2) [R8/43] (12) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (1 11) [R6/46] (2) (12) ]
[ 4]  43 : LABEL	"R8"
                                      4: [ (1 11) [R6/46] (2) (12) ]
[ 4]  44 : GLOBAL_GET	zip
                                      5: [ (1 11) [R6/46] (2) (12) [Closure] ]
[ 5]  45 : JMP_CLOSURE	2
                                      4: [ (1 11) [R6/46] (2) (12) ]
[ 4]   0 : MAKE_ENV	2	; (a b)
                                      2: [ (1 11) [R6/46] ]
[ 2]   1 : SAVE_RETURN	"R0"	5
                                      3: [ (1 11) [R6/46] [R0/5] ]
[ 3]   2 : LOCAL_GET	0	0	; a
                                      4: [ (1 11) [R6/46] [R0/5] (2) ]
[ 4]   3 : GLOBAL_GET	null?
                                      5: [ (1 11) [R6/46] [R0/5] (2) [Closure/core:null?] ]
[ 5]   4 : JMP_CLOSURE	1
                                      4: [ (1 11) [R6/46] [R0/5] (2) ]
[ 4]   0 : CALL_PRIMOP	"null?"
                                      4: [ (1 11) [R6/46] [R0/5] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ (1 11) [R6/46] #f ]
[ 3]   5 : LABEL	"R0"
                                      3: [ (1 11) [R6/46] #f ]
[ 3]   6 : DUPLICATE
                                      4: [ (1 11) [R6/46] #f #f ]
[ 4]   7 : JMP_IF_TRUE	"L2"	14
                                      3: [ (1 11) [R6/46] #f ]
[ 3]   8 : STACK_POP
                                      2: [ (1 11) [R6/46] ]
[ 2]   9 : SAVE_RETURN	"R1"	13
                                      3: [ (1 11) [R6/46] [R1/13] ]
[ 3]  10 : LOCAL_GET	0	1	; b
                                      4: [ (1 11) [R6/46] [R1/13] (12) ]
[ 4]  11 : GLOBAL_GET	null?
                                      5: [ (1 11) [R6/46] [R1/13] (12) [Closure/core:null?] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ (1 11) [R6/46] [R1/13] (12) ]
[ 4]   0 : CALL_PRIMOP	"null?"
                                      4: [ (1 11) [R6/46] [R1/13] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ (1 11) [R6/46] #f ]
[ 3]  13 : LABEL	"R1"
                                      3: [ (1 11) [R6/46] #f ]
[ 3]  14 : LABEL	"L2"
                                      3: [ (1 11) [R6/46] #f ]
[ 3]  15 : JMP_IF_FALSE	"L9"	18
                                      2: [ (1 11) [R6/46] ]
[ 2]  18 : LABEL	"L9"
                                      2: [ (1 11) [R6/46] ]
[ 2]  19 : SAVE_RETURN	"R3"	32
                                      3: [ (1 11) [R6/46] [R3/32] ]
[ 3]  20 : SAVE_RETURN	"R4"	24
                                      4: [ (1 11) [R6/46] [R3/32] [R4/24] ]
[ 4]  21 : LOCAL_GET	0	0	; a
                                      5: [ (1 11) [R6/46] [R3/32] [R4/24] (2) ]
[ 5]  22 : GLOBAL_GET	car
                                      6: [ (1 11) [R6/46] [R3/32] [R4/24] (2) [Closure/core:car] ]
[ 6]  23 : JMP_CLOSURE	1
                                      5: [ (1 11) [R6/46] [R3/32] [R4/24] (2) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ (1 11) [R6/46] [R3/32] [R4/24] 2 ]
[ 5]   1 : RETURN_VAL
                                      4: [ (1 11) [R6/46] [R3/32] 2 ]
[ 4]  24 : LABEL	"R4"
                                      4: [ (1 11) [R6/46] [R3/32] 2 ]
[ 4]  25 : SAVE_RETURN	"R5"	29
                                      5: [ (1 11) [R6/46] [R3/32] 2 [R5/29] ]
[ 5]  26 : LOCAL_GET	0	1	; b
                                      6: [ (1 11) [R6/46] [R3/32] 2 [R5/29] (12) ]
[ 6]  27 : GLOBAL_GET	car
                                      7: [ (1 11) [R6/46] [R3/32] 2 [R5/29] (12) [Closure/core:car] ]
[ 7]  28 : JMP_CLOSURE	1
                                      6: [ (1 11) [R6/46] [R3/32] 2 [R5/29] (12) ]
[ 6]   0 : CALL_PRIMOP	"car"
                                      6: [ (1 11) [R6/46] [R3/32] 2 [R5/29] 12 ]
[ 6]   1 : RETURN_VAL
                                      5: [ (1 11) [R6/46] [R3/32] 2 12 ]
[ 5]  29 : LABEL	"R5"
                                      5: [ (1 11) [R6/46] [R3/32] 2 12 ]
[ 5]  30 : GLOBAL_GET	list
                                      6: [ (1 11) [R6/46] [R3/32] 2 12 [Closure/core:list] ]
[ 6]  31 : JMP_CLOSURE	2
                                      5: [ (1 11) [R6/46] [R3/32] 2 12 ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ (1 11) [R6/46] [R3/32] (2 12) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (1 11) [R6/46] (2 12) ]
[ 3]  32 : LABEL	"R3"
                                      3: [ (1 11) [R6/46] (2 12) ]
[ 3]  33 : SAVE_RETURN	"R6"	46
                                      4: [ (1 11) [R6/46] (2 12) [R6/46] ]
[ 4]  34 : SAVE_RETURN	"R7"	38
                                      5: [ (1 11) [R6/46] (2 12) [R6/46] [R7/38] ]
[ 5]  35 : LOCAL_GET	0	0	; a
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] [R7/38] (2) ]
[ 6]  36 : GLOBAL_GET	cdr
                                      7: [ (1 11) [R6/46] (2 12) [R6/46] [R7/38] (2) [Closure/core:cdr] ]
[ 7]  37 : JMP_CLOSURE	1
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] [R7/38] (2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] [R7/38] () ]
[ 6]   1 : RETURN_VAL
                                      5: [ (1 11) [R6/46] (2 12) [R6/46] () ]
[ 5]  38 : LABEL	"R7"
                                      5: [ (1 11) [R6/46] (2 12) [R6/46] () ]
[ 5]  39 : SAVE_RETURN	"R8"	43
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] () [R8/43] ]
[ 6]  40 : LOCAL_GET	0	1	; b
                                      7: [ (1 11) [R6/46] (2 12) [R6/46] () [R8/43] (12) ]
[ 7]  41 : GLOBAL_GET	cdr
                                      8: [ (1 11) [R6/46] (2 12) [R6/46] () [R8/43] (12) [Closure/core:cdr] ]
[ 8]  42 : JMP_CLOSURE	1
                                      7: [ (1 11) [R6/46] (2 12) [R6/46] () [R8/43] (12) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ (1 11) [R6/46] (2 12) [R6/46] () [R8/43] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] () () ]
[ 6]  43 : LABEL	"R8"
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] () () ]
[ 6]  44 : GLOBAL_GET	zip
                                      7: [ (1 11) [R6/46] (2 12) [R6/46] () () [Closure] ]
[ 7]  45 : JMP_CLOSURE	2
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] () () ]
[ 6]   0 : MAKE_ENV	2	; (a b)
                                      4: [ (1 11) [R6/46] (2 12) [R6/46] ]
[ 4]   1 : SAVE_RETURN	"R0"	5
                                      5: [ (1 11) [R6/46] (2 12) [R6/46] [R0/5] ]
[ 5]   2 : LOCAL_GET	0	0	; a
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] [R0/5] () ]
[ 6]   3 : GLOBAL_GET	null?
                                      7: [ (1 11) [R6/46] (2 12) [R6/46] [R0/5] () [Closure/core:null?] ]
[ 7]   4 : JMP_CLOSURE	1
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] [R0/5] () ]
[ 6]   0 : CALL_PRIMOP	"null?"
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] [R0/5] #t ]
[ 6]   1 : RETURN_VAL
                                      5: [ (1 11) [R6/46] (2 12) [R6/46] #t ]
[ 5]   5 : LABEL	"R0"
                                      5: [ (1 11) [R6/46] (2 12) [R6/46] #t ]
[ 5]   6 : DUPLICATE
                                      6: [ (1 11) [R6/46] (2 12) [R6/46] #t #t ]
[ 6]   7 : JMP_IF_TRUE	"L2"	14
                                      5: [ (1 11) [R6/46] (2 12) [R6/46] #t ]
[ 5]  14 : LABEL	"L2"
                                      5: [ (1 11) [R6/46] (2 12) [R6/46] #t ]
[ 5]  15 : JMP_IF_FALSE	"L9"	18
                                      4: [ (1 11) [R6/46] (2 12) [R6/46] ]
[ 4]  16 : PUSH_CONST	()
                                      5: [ (1 11) [R6/46] (2 12) [R6/46] () ]
[ 5]  17 : RETURN_VAL
                                      4: [ (1 11) [R6/46] (2 12) () ]
[ 4]  46 : LABEL	"R6"
                                      4: [ (1 11) [R6/46] (2 12) () ]
[ 4]  47 : GLOBAL_GET	cons
                                      5: [ (1 11) [R6/46] (2 12) () [Closure/core:cons] ]
[ 5]  48 : JMP_CLOSURE	2
                                      4: [ (1 11) [R6/46] (2 12) () ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ (1 11) [R6/46] ((2 12)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (1 11) ((2 12)) ]
[ 2]  46 : LABEL	"R6"
                                      2: [ (1 11) ((2 12)) ]
[ 2]  47 : GLOBAL_GET	cons
                                      3: [ (1 11) ((2 12)) [Closure/core:cons] ]
[ 3]  48 : JMP_CLOSURE	2
                                      2: [ (1 11) ((2 12)) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((1 11) (2 12)) ]
[ 1]   1 : RETURN_VAL
test: got "((1 11) (2 12))"  - expected "((1 11) (2 12))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (reverse '(1 2 3))
ParseNext ==>  (reverse (quote (1 2 3)))
Parsed:  (core:reverse (quote (1 2 3)))
Compiled:
	CODE BLOCK ; () => ((reverse (quote (1 2 3))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3)
	2	GLOBAL_GET	reverse
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((reverse (quote (1 2 3))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3)
	2	GLOBAL_GET	reverse
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3)
                                      1: [ (1 2 3) ]
[ 1]   2 : GLOBAL_GET	reverse
                                      2: [ (1 2 3) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2 3) ]
[ 1]   0 : MAKE_ENV	1	; (lst)
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (null? lst) result (helper (cdr lst) (cons (car lst) result))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	helper
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; lst
                                      1: [ (1 2 3) ]
[ 1]   5 : PUSH_CONST	()
                                      2: [ (1 2 3) () ]
[ 2]   6 : GLOBAL_GET	helper
                                      3: [ (1 2 3) () [Closure] ]
[ 3]   7 : JMP_CLOSURE	2
                                      2: [ (1 2 3) () ]
[ 2]   0 : MAKE_ENV	2	; (lst result)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; lst
                                      2: [ [R0/5] (1 2 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (1 2 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (1 2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L4"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L4"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	14
                                      1: [ [R1/14] ]
[ 1]  11 : LOCAL_GET	0	0	; lst
                                      2: [ [R1/14] (1 2 3) ]
[ 2]  12 : GLOBAL_GET	cdr
                                      3: [ [R1/14] (1 2 3) [Closure/core:cdr] ]
[ 3]  13 : JMP_CLOSURE	1
                                      2: [ [R1/14] (1 2 3) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R1/14] (2 3) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (2 3) ]
[ 1]  14 : LABEL	"R1"
                                      1: [ (2 3) ]
[ 1]  15 : SAVE_RETURN	"R2"	24
                                      2: [ (2 3) [R2/24] ]
[ 2]  16 : SAVE_RETURN	"R3"	20
                                      3: [ (2 3) [R2/24] [R3/20] ]
[ 3]  17 : LOCAL_GET	0	0	; lst
                                      4: [ (2 3) [R2/24] [R3/20] (1 2 3) ]
[ 4]  18 : GLOBAL_GET	car
                                      5: [ (2 3) [R2/24] [R3/20] (1 2 3) [Closure/core:car] ]
[ 5]  19 : JMP_CLOSURE	1
                                      4: [ (2 3) [R2/24] [R3/20] (1 2 3) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ (2 3) [R2/24] [R3/20] 1 ]
[ 4]   1 : RETURN_VAL
                                      3: [ (2 3) [R2/24] 1 ]
[ 3]  20 : LABEL	"R3"
                                      3: [ (2 3) [R2/24] 1 ]
[ 3]  21 : LOCAL_GET	0	1	; result
                                      4: [ (2 3) [R2/24] 1 () ]
[ 4]  22 : GLOBAL_GET	cons
                                      5: [ (2 3) [R2/24] 1 () [Closure/core:cons] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ (2 3) [R2/24] 1 () ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ (2 3) [R2/24] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (2 3) (1) ]
[ 2]  24 : LABEL	"R2"
                                      2: [ (2 3) (1) ]
[ 2]  25 : GLOBAL_GET	helper
                                      3: [ (2 3) (1) [Closure] ]
[ 3]  26 : JMP_CLOSURE	2
                                      2: [ (2 3) (1) ]
[ 2]   0 : MAKE_ENV	2	; (lst result)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; lst
                                      2: [ [R0/5] (2 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (2 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L4"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L4"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	14
                                      1: [ [R1/14] ]
[ 1]  11 : LOCAL_GET	0	0	; lst
                                      2: [ [R1/14] (2 3) ]
[ 2]  12 : GLOBAL_GET	cdr
                                      3: [ [R1/14] (2 3) [Closure/core:cdr] ]
[ 3]  13 : JMP_CLOSURE	1
                                      2: [ [R1/14] (2 3) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R1/14] (3) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (3) ]
[ 1]  14 : LABEL	"R1"
                                      1: [ (3) ]
[ 1]  15 : SAVE_RETURN	"R2"	24
                                      2: [ (3) [R2/24] ]
[ 2]  16 : SAVE_RETURN	"R3"	20
                                      3: [ (3) [R2/24] [R3/20] ]
[ 3]  17 : LOCAL_GET	0	0	; lst
                                      4: [ (3) [R2/24] [R3/20] (2 3) ]
[ 4]  18 : GLOBAL_GET	car
                                      5: [ (3) [R2/24] [R3/20] (2 3) [Closure/core:car] ]
[ 5]  19 : JMP_CLOSURE	1
                                      4: [ (3) [R2/24] [R3/20] (2 3) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ (3) [R2/24] [R3/20] 2 ]
[ 4]   1 : RETURN_VAL
                                      3: [ (3) [R2/24] 2 ]
[ 3]  20 : LABEL	"R3"
                                      3: [ (3) [R2/24] 2 ]
[ 3]  21 : LOCAL_GET	0	1	; result
                                      4: [ (3) [R2/24] 2 (1) ]
[ 4]  22 : GLOBAL_GET	cons
                                      5: [ (3) [R2/24] 2 (1) [Closure/core:cons] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ (3) [R2/24] 2 (1) ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ (3) [R2/24] (2 1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (3) (2 1) ]
[ 2]  24 : LABEL	"R2"
                                      2: [ (3) (2 1) ]
[ 2]  25 : GLOBAL_GET	helper
                                      3: [ (3) (2 1) [Closure] ]
[ 3]  26 : JMP_CLOSURE	2
                                      2: [ (3) (2 1) ]
[ 2]   0 : MAKE_ENV	2	; (lst result)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; lst
                                      2: [ [R0/5] (3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L4"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L4"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	14
                                      1: [ [R1/14] ]
[ 1]  11 : LOCAL_GET	0	0	; lst
                                      2: [ [R1/14] (3) ]
[ 2]  12 : GLOBAL_GET	cdr
                                      3: [ [R1/14] (3) [Closure/core:cdr] ]
[ 3]  13 : JMP_CLOSURE	1
                                      2: [ [R1/14] (3) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R1/14] () ]
[ 2]   1 : RETURN_VAL
                                      1: [ () ]
[ 1]  14 : LABEL	"R1"
                                      1: [ () ]
[ 1]  15 : SAVE_RETURN	"R2"	24
                                      2: [ () [R2/24] ]
[ 2]  16 : SAVE_RETURN	"R3"	20
                                      3: [ () [R2/24] [R3/20] ]
[ 3]  17 : LOCAL_GET	0	0	; lst
                                      4: [ () [R2/24] [R3/20] (3) ]
[ 4]  18 : GLOBAL_GET	car
                                      5: [ () [R2/24] [R3/20] (3) [Closure/core:car] ]
[ 5]  19 : JMP_CLOSURE	1
                                      4: [ () [R2/24] [R3/20] (3) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ () [R2/24] [R3/20] 3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ () [R2/24] 3 ]
[ 3]  20 : LABEL	"R3"
                                      3: [ () [R2/24] 3 ]
[ 3]  21 : LOCAL_GET	0	1	; result
                                      4: [ () [R2/24] 3 (2 1) ]
[ 4]  22 : GLOBAL_GET	cons
                                      5: [ () [R2/24] 3 (2 1) [Closure/core:cons] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ () [R2/24] 3 (2 1) ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ () [R2/24] (3 2 1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ () (3 2 1) ]
[ 2]  24 : LABEL	"R2"
                                      2: [ () (3 2 1) ]
[ 2]  25 : GLOBAL_GET	helper
                                      3: [ () (3 2 1) [Closure] ]
[ 3]  26 : JMP_CLOSURE	2
                                      2: [ () (3 2 1) ]
[ 2]   0 : MAKE_ENV	2	; (lst result)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; lst
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L4"	9
                                      0: [  ]
[ 0]   7 : LOCAL_GET	0	1	; result
                                      1: [ (3 2 1) ]
[ 1]   8 : RETURN_VAL
test: got "(3 2 1)"  - expected "(3 2 1)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (reverse '(1 (2 3 4) 5)
ParseNext ==>  (reverse (quote (1 (2 3 4) 5)))
Parsed:  (core:reverse (quote (1 (2 3 4) 5)))
Compiled:
	CODE BLOCK ; () => ((reverse (quote (1 (2 3 4) 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 (2 3 4) 5)
	2	GLOBAL_GET	reverse
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((reverse (quote (1 (2 3 4) 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 (2 3 4) 5)
	2	GLOBAL_GET	reverse
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 (2 3 4) 5)
                                      1: [ (1 (2 3 4) 5) ]
[ 1]   2 : GLOBAL_GET	reverse
                                      2: [ (1 (2 3 4) 5) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 (2 3 4) 5) ]
[ 1]   0 : MAKE_ENV	1	; (lst)
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (null? lst) result (helper (cdr lst) (cons (car lst) result))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	helper
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; lst
                                      1: [ (1 (2 3 4) 5) ]
[ 1]   5 : PUSH_CONST	()
                                      2: [ (1 (2 3 4) 5) () ]
[ 2]   6 : GLOBAL_GET	helper
                                      3: [ (1 (2 3 4) 5) () [Closure] ]
[ 3]   7 : JMP_CLOSURE	2
                                      2: [ (1 (2 3 4) 5) () ]
[ 2]   0 : MAKE_ENV	2	; (lst result)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; lst
                                      2: [ [R0/5] (1 (2 3 4) 5) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (1 (2 3 4) 5) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (1 (2 3 4) 5) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L4"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L4"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	14
                                      1: [ [R1/14] ]
[ 1]  11 : LOCAL_GET	0	0	; lst
                                      2: [ [R1/14] (1 (2 3 4) 5) ]
[ 2]  12 : GLOBAL_GET	cdr
                                      3: [ [R1/14] (1 (2 3 4) 5) [Closure/core:cdr] ]
[ 3]  13 : JMP_CLOSURE	1
                                      2: [ [R1/14] (1 (2 3 4) 5) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R1/14] ((2 3 4) 5) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((2 3 4) 5) ]
[ 1]  14 : LABEL	"R1"
                                      1: [ ((2 3 4) 5) ]
[ 1]  15 : SAVE_RETURN	"R2"	24
                                      2: [ ((2 3 4) 5) [R2/24] ]
[ 2]  16 : SAVE_RETURN	"R3"	20
                                      3: [ ((2 3 4) 5) [R2/24] [R3/20] ]
[ 3]  17 : LOCAL_GET	0	0	; lst
                                      4: [ ((2 3 4) 5) [R2/24] [R3/20] (1 (2 3 4) 5) ]
[ 4]  18 : GLOBAL_GET	car
                                      5: [ ((2 3 4) 5) [R2/24] [R3/20] (1 (2 3 4) 5) [Closure/core:car] ]
[ 5]  19 : JMP_CLOSURE	1
                                      4: [ ((2 3 4) 5) [R2/24] [R3/20] (1 (2 3 4) 5) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ ((2 3 4) 5) [R2/24] [R3/20] 1 ]
[ 4]   1 : RETURN_VAL
                                      3: [ ((2 3 4) 5) [R2/24] 1 ]
[ 3]  20 : LABEL	"R3"
                                      3: [ ((2 3 4) 5) [R2/24] 1 ]
[ 3]  21 : LOCAL_GET	0	1	; result
                                      4: [ ((2 3 4) 5) [R2/24] 1 () ]
[ 4]  22 : GLOBAL_GET	cons
                                      5: [ ((2 3 4) 5) [R2/24] 1 () [Closure/core:cons] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ ((2 3 4) 5) [R2/24] 1 () ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ ((2 3 4) 5) [R2/24] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((2 3 4) 5) (1) ]
[ 2]  24 : LABEL	"R2"
                                      2: [ ((2 3 4) 5) (1) ]
[ 2]  25 : GLOBAL_GET	helper
                                      3: [ ((2 3 4) 5) (1) [Closure] ]
[ 3]  26 : JMP_CLOSURE	2
                                      2: [ ((2 3 4) 5) (1) ]
[ 2]   0 : MAKE_ENV	2	; (lst result)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; lst
                                      2: [ [R0/5] ((2 3 4) 5) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] ((2 3 4) 5) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] ((2 3 4) 5) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L4"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L4"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	14
                                      1: [ [R1/14] ]
[ 1]  11 : LOCAL_GET	0	0	; lst
                                      2: [ [R1/14] ((2 3 4) 5) ]
[ 2]  12 : GLOBAL_GET	cdr
                                      3: [ [R1/14] ((2 3 4) 5) [Closure/core:cdr] ]
[ 3]  13 : JMP_CLOSURE	1
                                      2: [ [R1/14] ((2 3 4) 5) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R1/14] (5) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (5) ]
[ 1]  14 : LABEL	"R1"
                                      1: [ (5) ]
[ 1]  15 : SAVE_RETURN	"R2"	24
                                      2: [ (5) [R2/24] ]
[ 2]  16 : SAVE_RETURN	"R3"	20
                                      3: [ (5) [R2/24] [R3/20] ]
[ 3]  17 : LOCAL_GET	0	0	; lst
                                      4: [ (5) [R2/24] [R3/20] ((2 3 4) 5) ]
[ 4]  18 : GLOBAL_GET	car
                                      5: [ (5) [R2/24] [R3/20] ((2 3 4) 5) [Closure/core:car] ]
[ 5]  19 : JMP_CLOSURE	1
                                      4: [ (5) [R2/24] [R3/20] ((2 3 4) 5) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ (5) [R2/24] [R3/20] (2 3 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (5) [R2/24] (2 3 4) ]
[ 3]  20 : LABEL	"R3"
                                      3: [ (5) [R2/24] (2 3 4) ]
[ 3]  21 : LOCAL_GET	0	1	; result
                                      4: [ (5) [R2/24] (2 3 4) (1) ]
[ 4]  22 : GLOBAL_GET	cons
                                      5: [ (5) [R2/24] (2 3 4) (1) [Closure/core:cons] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ (5) [R2/24] (2 3 4) (1) ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ (5) [R2/24] ((2 3 4) 1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (5) ((2 3 4) 1) ]
[ 2]  24 : LABEL	"R2"
                                      2: [ (5) ((2 3 4) 1) ]
[ 2]  25 : GLOBAL_GET	helper
                                      3: [ (5) ((2 3 4) 1) [Closure] ]
[ 3]  26 : JMP_CLOSURE	2
                                      2: [ (5) ((2 3 4) 1) ]
[ 2]   0 : MAKE_ENV	2	; (lst result)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; lst
                                      2: [ [R0/5] (5) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (5) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (5) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L4"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L4"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	14
                                      1: [ [R1/14] ]
[ 1]  11 : LOCAL_GET	0	0	; lst
                                      2: [ [R1/14] (5) ]
[ 2]  12 : GLOBAL_GET	cdr
                                      3: [ [R1/14] (5) [Closure/core:cdr] ]
[ 3]  13 : JMP_CLOSURE	1
                                      2: [ [R1/14] (5) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R1/14] () ]
[ 2]   1 : RETURN_VAL
                                      1: [ () ]
[ 1]  14 : LABEL	"R1"
                                      1: [ () ]
[ 1]  15 : SAVE_RETURN	"R2"	24
                                      2: [ () [R2/24] ]
[ 2]  16 : SAVE_RETURN	"R3"	20
                                      3: [ () [R2/24] [R3/20] ]
[ 3]  17 : LOCAL_GET	0	0	; lst
                                      4: [ () [R2/24] [R3/20] (5) ]
[ 4]  18 : GLOBAL_GET	car
                                      5: [ () [R2/24] [R3/20] (5) [Closure/core:car] ]
[ 5]  19 : JMP_CLOSURE	1
                                      4: [ () [R2/24] [R3/20] (5) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ () [R2/24] [R3/20] 5 ]
[ 4]   1 : RETURN_VAL
                                      3: [ () [R2/24] 5 ]
[ 3]  20 : LABEL	"R3"
                                      3: [ () [R2/24] 5 ]
[ 3]  21 : LOCAL_GET	0	1	; result
                                      4: [ () [R2/24] 5 ((2 3 4) 1) ]
[ 4]  22 : GLOBAL_GET	cons
                                      5: [ () [R2/24] 5 ((2 3 4) 1) [Closure/core:cons] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ () [R2/24] 5 ((2 3 4) 1) ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ () [R2/24] (5 (2 3 4) 1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ () (5 (2 3 4) 1) ]
[ 2]  24 : LABEL	"R2"
                                      2: [ () (5 (2 3 4) 1) ]
[ 2]  25 : GLOBAL_GET	helper
                                      3: [ () (5 (2 3 4) 1) [Closure] ]
[ 3]  26 : JMP_CLOSURE	2
                                      2: [ () (5 (2 3 4) 1) ]
[ 2]   0 : MAKE_ENV	2	; (lst result)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; lst
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L4"	9
                                      0: [  ]
[ 0]   7 : LOCAL_GET	0	1	; result
                                      1: [ (5 (2 3 4) 1) ]
[ 1]   8 : RETURN_VAL
test: got "(5 (2 3 4) 1)"  - expected "(5 (2 3 4) 1)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (index-of 'a '(a b c))
ParseNext ==>  (index-of (quote a) (quote (a b c)))
Parsed:  (core:index-of (quote core:a) (quote (core:a core:b foo:c)))
Compiled:
	CODE BLOCK ; () => ((index-of (quote a) (quote (a b c))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	a
	2	PUSH_CONST	(a b c)
	3	GLOBAL_GET	index-of
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((index-of (quote a) (quote (a b c))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	a
	2	PUSH_CONST	(a b c)
	3	GLOBAL_GET	index-of
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	a
                                      1: [ a ]
[ 1]   2 : PUSH_CONST	(a b c)
                                      2: [ a (a b c) ]
[ 2]   3 : GLOBAL_GET	index-of
                                      3: [ a (a b c) [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ a (a b c) ]
[ 2]   0 : MAKE_ENV	2	; (elt lst)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))
                                      2: [ () [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : MAKE_ENV	1	; (helper)
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))
                                      1: [ [Closure] ]
[ 1]   2 : LOCAL_SET	0	0	; helper
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	1	1	; lst
                                      1: [ (a b c) ]
[ 1]   5 : LOCAL_GET	1	0	; elt
                                      2: [ (a b c) a ]
[ 2]   6 : PUSH_CONST	0
                                      3: [ (a b c) a 0 ]
[ 3]   7 : LOCAL_GET	0	0	; helper
                                      4: [ (a b c) a 0 [Closure] ]
[ 4]   8 : JMP_CLOSURE	3
                                      3: [ (a b c) a 0 ]
[ 3]   0 : MAKE_ENV	3	; (l e i)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; l
                                      2: [ [R0/5] (a b c) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (a b c) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (a b c) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L6"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L6"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	19
                                      1: [ [R1/19] ]
[ 1]  11 : LOCAL_GET	0	1	; e
                                      2: [ [R1/19] a ]
[ 2]  12 : SAVE_RETURN	"R2"	16
                                      3: [ [R1/19] a [R2/16] ]
[ 3]  13 : LOCAL_GET	0	0	; l
                                      4: [ [R1/19] a [R2/16] (a b c) ]
[ 4]  14 : GLOBAL_GET	first
                                      5: [ [R1/19] a [R2/16] (a b c) [Closure/core:car] ]
[ 5]  15 : JMP_CLOSURE	1
                                      4: [ [R1/19] a [R2/16] (a b c) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ [R1/19] a [R2/16] a ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/19] a a ]
[ 3]  16 : LABEL	"R2"
                                      3: [ [R1/19] a a ]
[ 3]  17 : GLOBAL_GET	=
                                      4: [ [R1/19] a a [Closure/core:=] ]
[ 4]  18 : JMP_CLOSURE	2
                                      3: [ [R1/19] a a ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/19] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  19 : LABEL	"R1"
                                      1: [ #t ]
[ 1]  20 : JMP_IF_FALSE	"L5"	23
                                      0: [  ]
[ 0]  21 : LOCAL_GET	0	2	; i
                                      1: [ 0 ]
[ 1]  22 : RETURN_VAL
test: got "0"  - expected "0"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (index-of 'c '(a b c))
ParseNext ==>  (index-of (quote c) (quote (a b c)))
Parsed:  (core:index-of (quote foo:c) (quote (core:a core:b foo:c)))
Compiled:
	CODE BLOCK ; () => ((index-of (quote c) (quote (a b c))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	c
	2	PUSH_CONST	(a b c)
	3	GLOBAL_GET	index-of
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((index-of (quote c) (quote (a b c))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	c
	2	PUSH_CONST	(a b c)
	3	GLOBAL_GET	index-of
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	c
                                      1: [ c ]
[ 1]   2 : PUSH_CONST	(a b c)
                                      2: [ c (a b c) ]
[ 2]   3 : GLOBAL_GET	index-of
                                      3: [ c (a b c) [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ c (a b c) ]
[ 2]   0 : MAKE_ENV	2	; (elt lst)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))
                                      2: [ () [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : MAKE_ENV	1	; (helper)
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))
                                      1: [ [Closure] ]
[ 1]   2 : LOCAL_SET	0	0	; helper
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	1	1	; lst
                                      1: [ (a b c) ]
[ 1]   5 : LOCAL_GET	1	0	; elt
                                      2: [ (a b c) c ]
[ 2]   6 : PUSH_CONST	0
                                      3: [ (a b c) c 0 ]
[ 3]   7 : LOCAL_GET	0	0	; helper
                                      4: [ (a b c) c 0 [Closure] ]
[ 4]   8 : JMP_CLOSURE	3
                                      3: [ (a b c) c 0 ]
[ 3]   0 : MAKE_ENV	3	; (l e i)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; l
                                      2: [ [R0/5] (a b c) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (a b c) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (a b c) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L6"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L6"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	19
                                      1: [ [R1/19] ]
[ 1]  11 : LOCAL_GET	0	1	; e
                                      2: [ [R1/19] c ]
[ 2]  12 : SAVE_RETURN	"R2"	16
                                      3: [ [R1/19] c [R2/16] ]
[ 3]  13 : LOCAL_GET	0	0	; l
                                      4: [ [R1/19] c [R2/16] (a b c) ]
[ 4]  14 : GLOBAL_GET	first
                                      5: [ [R1/19] c [R2/16] (a b c) [Closure/core:car] ]
[ 5]  15 : JMP_CLOSURE	1
                                      4: [ [R1/19] c [R2/16] (a b c) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ [R1/19] c [R2/16] a ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/19] c a ]
[ 3]  16 : LABEL	"R2"
                                      3: [ [R1/19] c a ]
[ 3]  17 : GLOBAL_GET	=
                                      4: [ [R1/19] c a [Closure/core:=] ]
[ 4]  18 : JMP_CLOSURE	2
                                      3: [ [R1/19] c a ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/19] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  19 : LABEL	"R1"
                                      1: [ #f ]
[ 1]  20 : JMP_IF_FALSE	"L5"	23
                                      0: [  ]
[ 0]  23 : LABEL	"L5"
                                      0: [  ]
[ 0]  24 : SAVE_RETURN	"R3"	28
                                      1: [ [R3/28] ]
[ 1]  25 : LOCAL_GET	0	0	; l
                                      2: [ [R3/28] (a b c) ]
[ 2]  26 : GLOBAL_GET	rest
                                      3: [ [R3/28] (a b c) [Closure/core:cdr] ]
[ 3]  27 : JMP_CLOSURE	1
                                      2: [ [R3/28] (a b c) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R3/28] (b c) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (b c) ]
[ 1]  28 : LABEL	"R3"
                                      1: [ (b c) ]
[ 1]  29 : LOCAL_GET	0	1	; e
                                      2: [ (b c) c ]
[ 2]  30 : SAVE_RETURN	"R4"	35
                                      3: [ (b c) c [R4/35] ]
[ 3]  31 : LOCAL_GET	0	2	; i
                                      4: [ (b c) c [R4/35] 0 ]
[ 4]  32 : PUSH_CONST	1
                                      5: [ (b c) c [R4/35] 0 1 ]
[ 5]  33 : GLOBAL_GET	+
                                      6: [ (b c) c [R4/35] 0 1 [Closure/core:+] ]
[ 6]  34 : JMP_CLOSURE	2
                                      5: [ (b c) c [R4/35] 0 1 ]
[ 5]   0 : CALL_PRIMOP	"+"
                                      4: [ (b c) c [R4/35] 1 ]
[ 4]   1 : RETURN_VAL
                                      3: [ (b c) c 1 ]
[ 3]  35 : LABEL	"R4"
                                      3: [ (b c) c 1 ]
[ 3]  36 : LOCAL_GET	1	0	; helper
                                      4: [ (b c) c 1 [Closure] ]
[ 4]  37 : JMP_CLOSURE	3
                                      3: [ (b c) c 1 ]
[ 3]   0 : MAKE_ENV	3	; (l e i)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; l
                                      2: [ [R0/5] (b c) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (b c) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (b c) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L6"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L6"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	19
                                      1: [ [R1/19] ]
[ 1]  11 : LOCAL_GET	0	1	; e
                                      2: [ [R1/19] c ]
[ 2]  12 : SAVE_RETURN	"R2"	16
                                      3: [ [R1/19] c [R2/16] ]
[ 3]  13 : LOCAL_GET	0	0	; l
                                      4: [ [R1/19] c [R2/16] (b c) ]
[ 4]  14 : GLOBAL_GET	first
                                      5: [ [R1/19] c [R2/16] (b c) [Closure/core:car] ]
[ 5]  15 : JMP_CLOSURE	1
                                      4: [ [R1/19] c [R2/16] (b c) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ [R1/19] c [R2/16] b ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/19] c b ]
[ 3]  16 : LABEL	"R2"
                                      3: [ [R1/19] c b ]
[ 3]  17 : GLOBAL_GET	=
                                      4: [ [R1/19] c b [Closure/core:=] ]
[ 4]  18 : JMP_CLOSURE	2
                                      3: [ [R1/19] c b ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/19] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  19 : LABEL	"R1"
                                      1: [ #f ]
[ 1]  20 : JMP_IF_FALSE	"L5"	23
                                      0: [  ]
[ 0]  23 : LABEL	"L5"
                                      0: [  ]
[ 0]  24 : SAVE_RETURN	"R3"	28
                                      1: [ [R3/28] ]
[ 1]  25 : LOCAL_GET	0	0	; l
                                      2: [ [R3/28] (b c) ]
[ 2]  26 : GLOBAL_GET	rest
                                      3: [ [R3/28] (b c) [Closure/core:cdr] ]
[ 3]  27 : JMP_CLOSURE	1
                                      2: [ [R3/28] (b c) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R3/28] (c) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (c) ]
[ 1]  28 : LABEL	"R3"
                                      1: [ (c) ]
[ 1]  29 : LOCAL_GET	0	1	; e
                                      2: [ (c) c ]
[ 2]  30 : SAVE_RETURN	"R4"	35
                                      3: [ (c) c [R4/35] ]
[ 3]  31 : LOCAL_GET	0	2	; i
                                      4: [ (c) c [R4/35] 1 ]
[ 4]  32 : PUSH_CONST	1
                                      5: [ (c) c [R4/35] 1 1 ]
[ 5]  33 : GLOBAL_GET	+
                                      6: [ (c) c [R4/35] 1 1 [Closure/core:+] ]
[ 6]  34 : JMP_CLOSURE	2
                                      5: [ (c) c [R4/35] 1 1 ]
[ 5]   0 : CALL_PRIMOP	"+"
                                      4: [ (c) c [R4/35] 2 ]
[ 4]   1 : RETURN_VAL
                                      3: [ (c) c 2 ]
[ 3]  35 : LABEL	"R4"
                                      3: [ (c) c 2 ]
[ 3]  36 : LOCAL_GET	1	0	; helper
                                      4: [ (c) c 2 [Closure] ]
[ 4]  37 : JMP_CLOSURE	3
                                      3: [ (c) c 2 ]
[ 3]   0 : MAKE_ENV	3	; (l e i)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; l
                                      2: [ [R0/5] (c) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (c) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (c) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L6"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L6"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	19
                                      1: [ [R1/19] ]
[ 1]  11 : LOCAL_GET	0	1	; e
                                      2: [ [R1/19] c ]
[ 2]  12 : SAVE_RETURN	"R2"	16
                                      3: [ [R1/19] c [R2/16] ]
[ 3]  13 : LOCAL_GET	0	0	; l
                                      4: [ [R1/19] c [R2/16] (c) ]
[ 4]  14 : GLOBAL_GET	first
                                      5: [ [R1/19] c [R2/16] (c) [Closure/core:car] ]
[ 5]  15 : JMP_CLOSURE	1
                                      4: [ [R1/19] c [R2/16] (c) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ [R1/19] c [R2/16] c ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/19] c c ]
[ 3]  16 : LABEL	"R2"
                                      3: [ [R1/19] c c ]
[ 3]  17 : GLOBAL_GET	=
                                      4: [ [R1/19] c c [Closure/core:=] ]
[ 4]  18 : JMP_CLOSURE	2
                                      3: [ [R1/19] c c ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/19] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  19 : LABEL	"R1"
                                      1: [ #t ]
[ 1]  20 : JMP_IF_FALSE	"L5"	23
                                      0: [  ]
[ 0]  21 : LOCAL_GET	0	2	; i
                                      1: [ 2 ]
[ 1]  22 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (index-of 1 '(a b c))
ParseNext ==>  (index-of 1 (quote (a b c)))
Parsed:  (core:index-of 1 (quote (core:a core:b foo:c)))
Compiled:
	CODE BLOCK ; () => ((index-of 1 (quote (a b c))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	(a b c)
	3	GLOBAL_GET	index-of
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((index-of 1 (quote (a b c))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	(a b c)
	3	GLOBAL_GET	index-of
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	(a b c)
                                      2: [ 1 (a b c) ]
[ 2]   3 : GLOBAL_GET	index-of
                                      3: [ 1 (a b c) [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 (a b c) ]
[ 2]   0 : MAKE_ENV	2	; (elt lst)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((set! helper (lambda (l e i) (if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))) (helper lst elt 0))
                                      2: [ () [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : MAKE_ENV	1	; (helper)
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (null? l) (begin l) (if (= e (first l)) (begin i) (begin (helper (rest l) e (+ i 1))))))
                                      1: [ [Closure] ]
[ 1]   2 : LOCAL_SET	0	0	; helper
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	1	1	; lst
                                      1: [ (a b c) ]
[ 1]   5 : LOCAL_GET	1	0	; elt
                                      2: [ (a b c) 1 ]
[ 2]   6 : PUSH_CONST	0
                                      3: [ (a b c) 1 0 ]
[ 3]   7 : LOCAL_GET	0	0	; helper
                                      4: [ (a b c) 1 0 [Closure] ]
[ 4]   8 : JMP_CLOSURE	3
                                      3: [ (a b c) 1 0 ]
[ 3]   0 : MAKE_ENV	3	; (l e i)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; l
                                      2: [ [R0/5] (a b c) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (a b c) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (a b c) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L6"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L6"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	19
                                      1: [ [R1/19] ]
[ 1]  11 : LOCAL_GET	0	1	; e
                                      2: [ [R1/19] 1 ]
[ 2]  12 : SAVE_RETURN	"R2"	16
                                      3: [ [R1/19] 1 [R2/16] ]
[ 3]  13 : LOCAL_GET	0	0	; l
                                      4: [ [R1/19] 1 [R2/16] (a b c) ]
[ 4]  14 : GLOBAL_GET	first
                                      5: [ [R1/19] 1 [R2/16] (a b c) [Closure/core:car] ]
[ 5]  15 : JMP_CLOSURE	1
                                      4: [ [R1/19] 1 [R2/16] (a b c) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ [R1/19] 1 [R2/16] a ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/19] 1 a ]
[ 3]  16 : LABEL	"R2"
                                      3: [ [R1/19] 1 a ]
[ 3]  17 : GLOBAL_GET	=
                                      4: [ [R1/19] 1 a [Closure/core:=] ]
[ 4]  18 : JMP_CLOSURE	2
                                      3: [ [R1/19] 1 a ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/19] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  19 : LABEL	"R1"
                                      1: [ #f ]
[ 1]  20 : JMP_IF_FALSE	"L5"	23
                                      0: [  ]
[ 0]  23 : LABEL	"L5"
                                      0: [  ]
[ 0]  24 : SAVE_RETURN	"R3"	28
                                      1: [ [R3/28] ]
[ 1]  25 : LOCAL_GET	0	0	; l
                                      2: [ [R3/28] (a b c) ]
[ 2]  26 : GLOBAL_GET	rest
                                      3: [ [R3/28] (a b c) [Closure/core:cdr] ]
[ 3]  27 : JMP_CLOSURE	1
                                      2: [ [R3/28] (a b c) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R3/28] (b c) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (b c) ]
[ 1]  28 : LABEL	"R3"
                                      1: [ (b c) ]
[ 1]  29 : LOCAL_GET	0	1	; e
                                      2: [ (b c) 1 ]
[ 2]  30 : SAVE_RETURN	"R4"	35
                                      3: [ (b c) 1 [R4/35] ]
[ 3]  31 : LOCAL_GET	0	2	; i
                                      4: [ (b c) 1 [R4/35] 0 ]
[ 4]  32 : PUSH_CONST	1
                                      5: [ (b c) 1 [R4/35] 0 1 ]
[ 5]  33 : GLOBAL_GET	+
                                      6: [ (b c) 1 [R4/35] 0 1 [Closure/core:+] ]
[ 6]  34 : JMP_CLOSURE	2
                                      5: [ (b c) 1 [R4/35] 0 1 ]
[ 5]   0 : CALL_PRIMOP	"+"
                                      4: [ (b c) 1 [R4/35] 1 ]
[ 4]   1 : RETURN_VAL
                                      3: [ (b c) 1 1 ]
[ 3]  35 : LABEL	"R4"
                                      3: [ (b c) 1 1 ]
[ 3]  36 : LOCAL_GET	1	0	; helper
                                      4: [ (b c) 1 1 [Closure] ]
[ 4]  37 : JMP_CLOSURE	3
                                      3: [ (b c) 1 1 ]
[ 3]   0 : MAKE_ENV	3	; (l e i)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; l
                                      2: [ [R0/5] (b c) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (b c) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (b c) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L6"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L6"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	19
                                      1: [ [R1/19] ]
[ 1]  11 : LOCAL_GET	0	1	; e
                                      2: [ [R1/19] 1 ]
[ 2]  12 : SAVE_RETURN	"R2"	16
                                      3: [ [R1/19] 1 [R2/16] ]
[ 3]  13 : LOCAL_GET	0	0	; l
                                      4: [ [R1/19] 1 [R2/16] (b c) ]
[ 4]  14 : GLOBAL_GET	first
                                      5: [ [R1/19] 1 [R2/16] (b c) [Closure/core:car] ]
[ 5]  15 : JMP_CLOSURE	1
                                      4: [ [R1/19] 1 [R2/16] (b c) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ [R1/19] 1 [R2/16] b ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/19] 1 b ]
[ 3]  16 : LABEL	"R2"
                                      3: [ [R1/19] 1 b ]
[ 3]  17 : GLOBAL_GET	=
                                      4: [ [R1/19] 1 b [Closure/core:=] ]
[ 4]  18 : JMP_CLOSURE	2
                                      3: [ [R1/19] 1 b ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/19] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  19 : LABEL	"R1"
                                      1: [ #f ]
[ 1]  20 : JMP_IF_FALSE	"L5"	23
                                      0: [  ]
[ 0]  23 : LABEL	"L5"
                                      0: [  ]
[ 0]  24 : SAVE_RETURN	"R3"	28
                                      1: [ [R3/28] ]
[ 1]  25 : LOCAL_GET	0	0	; l
                                      2: [ [R3/28] (b c) ]
[ 2]  26 : GLOBAL_GET	rest
                                      3: [ [R3/28] (b c) [Closure/core:cdr] ]
[ 3]  27 : JMP_CLOSURE	1
                                      2: [ [R3/28] (b c) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R3/28] (c) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (c) ]
[ 1]  28 : LABEL	"R3"
                                      1: [ (c) ]
[ 1]  29 : LOCAL_GET	0	1	; e
                                      2: [ (c) 1 ]
[ 2]  30 : SAVE_RETURN	"R4"	35
                                      3: [ (c) 1 [R4/35] ]
[ 3]  31 : LOCAL_GET	0	2	; i
                                      4: [ (c) 1 [R4/35] 1 ]
[ 4]  32 : PUSH_CONST	1
                                      5: [ (c) 1 [R4/35] 1 1 ]
[ 5]  33 : GLOBAL_GET	+
                                      6: [ (c) 1 [R4/35] 1 1 [Closure/core:+] ]
[ 6]  34 : JMP_CLOSURE	2
                                      5: [ (c) 1 [R4/35] 1 1 ]
[ 5]   0 : CALL_PRIMOP	"+"
                                      4: [ (c) 1 [R4/35] 2 ]
[ 4]   1 : RETURN_VAL
                                      3: [ (c) 1 2 ]
[ 3]  35 : LABEL	"R4"
                                      3: [ (c) 1 2 ]
[ 3]  36 : LOCAL_GET	1	0	; helper
                                      4: [ (c) 1 2 [Closure] ]
[ 4]  37 : JMP_CLOSURE	3
                                      3: [ (c) 1 2 ]
[ 3]   0 : MAKE_ENV	3	; (l e i)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; l
                                      2: [ [R0/5] (c) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] (c) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (c) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L6"	9
                                      0: [  ]
[ 0]   9 : LABEL	"L6"
                                      0: [  ]
[ 0]  10 : SAVE_RETURN	"R1"	19
                                      1: [ [R1/19] ]
[ 1]  11 : LOCAL_GET	0	1	; e
                                      2: [ [R1/19] 1 ]
[ 2]  12 : SAVE_RETURN	"R2"	16
                                      3: [ [R1/19] 1 [R2/16] ]
[ 3]  13 : LOCAL_GET	0	0	; l
                                      4: [ [R1/19] 1 [R2/16] (c) ]
[ 4]  14 : GLOBAL_GET	first
                                      5: [ [R1/19] 1 [R2/16] (c) [Closure/core:car] ]
[ 5]  15 : JMP_CLOSURE	1
                                      4: [ [R1/19] 1 [R2/16] (c) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ [R1/19] 1 [R2/16] c ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/19] 1 c ]
[ 3]  16 : LABEL	"R2"
                                      3: [ [R1/19] 1 c ]
[ 3]  17 : GLOBAL_GET	=
                                      4: [ [R1/19] 1 c [Closure/core:=] ]
[ 4]  18 : JMP_CLOSURE	2
                                      3: [ [R1/19] 1 c ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R1/19] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  19 : LABEL	"R1"
                                      1: [ #f ]
[ 1]  20 : JMP_IF_FALSE	"L5"	23
                                      0: [  ]
[ 0]  23 : LABEL	"L5"
                                      0: [  ]
[ 0]  24 : SAVE_RETURN	"R3"	28
                                      1: [ [R3/28] ]
[ 1]  25 : LOCAL_GET	0	0	; l
                                      2: [ [R3/28] (c) ]
[ 2]  26 : GLOBAL_GET	rest
                                      3: [ [R3/28] (c) [Closure/core:cdr] ]
[ 3]  27 : JMP_CLOSURE	1
                                      2: [ [R3/28] (c) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R3/28] () ]
[ 2]   1 : RETURN_VAL
                                      1: [ () ]
[ 1]  28 : LABEL	"R3"
                                      1: [ () ]
[ 1]  29 : LOCAL_GET	0	1	; e
                                      2: [ () 1 ]
[ 2]  30 : SAVE_RETURN	"R4"	35
                                      3: [ () 1 [R4/35] ]
[ 3]  31 : LOCAL_GET	0	2	; i
                                      4: [ () 1 [R4/35] 2 ]
[ 4]  32 : PUSH_CONST	1
                                      5: [ () 1 [R4/35] 2 1 ]
[ 5]  33 : GLOBAL_GET	+
                                      6: [ () 1 [R4/35] 2 1 [Closure/core:+] ]
[ 6]  34 : JMP_CLOSURE	2
                                      5: [ () 1 [R4/35] 2 1 ]
[ 5]   0 : CALL_PRIMOP	"+"
                                      4: [ () 1 [R4/35] 3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ () 1 3 ]
[ 3]  35 : LABEL	"R4"
                                      3: [ () 1 3 ]
[ 3]  36 : LOCAL_GET	1	0	; helper
                                      4: [ () 1 3 [Closure] ]
[ 4]  37 : JMP_CLOSURE	3
                                      3: [ () 1 3 ]
[ 3]   0 : MAKE_ENV	3	; (l e i)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; l
                                      2: [ [R0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [R0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [R0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"R0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L6"	9
                                      0: [  ]
[ 0]   7 : LOCAL_GET	0	0	; l
                                      1: [ () ]
[ 1]   8 : RETURN_VAL
test: got "()"  - expected "()"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (first x) (second x) (third x)))
ParseNext ==>  (begin (set! x (quote (1 2 3 4 5))) (list (first x) (second x) (third x)))
Parsed:  (begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:first foo:x) (core:second foo:x) (core:third foo:x)))
Compiled:
	CODE BLOCK ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (first x) (second x) (third x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"R0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	first
	7	JMP_CLOSURE	1
8	LABEL	"R0"
	9	SAVE_RETURN	"R1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	second
	12	JMP_CLOSURE	1
13	LABEL	"R1"
	14	SAVE_RETURN	"R2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	third
	17	JMP_CLOSURE	1
18	LABEL	"R2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (first x) (second x) (third x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"R0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	first
	7	JMP_CLOSURE	1
8	LABEL	"R0"
	9	SAVE_RETURN	"R1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	second
	12	JMP_CLOSURE	1
13	LABEL	"R1"
	14	SAVE_RETURN	"R2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	third
	17	JMP_CLOSURE	1
18	LABEL	"R2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"R0"	8
                                      1: [ [R0/8] ]
[ 1]   5 : GLOBAL_GET	x
                                      2: [ [R0/8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	first
                                      3: [ [R0/8] (1 2 3 4 5) [Closure/core:car] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [R0/8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R0/8] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]   8 : LABEL	"R0"
                                      1: [ 1 ]
[ 1]   9 : SAVE_RETURN	"R1"	13
                                      2: [ 1 [R1/13] ]
[ 2]  10 : GLOBAL_GET	x
                                      3: [ 1 [R1/13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	second
                                      4: [ 1 [R1/13] (1 2 3 4 5) [Closure/core:cadr] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ 1 [R1/13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ 1 [R1/13] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 2 ]
[ 2]  13 : LABEL	"R1"
                                      2: [ 1 2 ]
[ 2]  14 : SAVE_RETURN	"R2"	18
                                      3: [ 1 2 [R2/18] ]
[ 3]  15 : GLOBAL_GET	x
                                      4: [ 1 2 [R2/18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	third
                                      5: [ 1 2 [R2/18] (1 2 3 4 5) [Closure/core:caddr] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ 1 2 [R2/18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"caddr"
                                      4: [ 1 2 [R2/18] 3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 3 ]
[ 3]  18 : LABEL	"R2"
                                      3: [ 1 2 3 ]
[ 3]  19 : GLOBAL_GET	list
                                      4: [ 1 2 3 [Closure/core:list] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ 1 2 3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (after-first x) (after-second x) (after-third x)))
ParseNext ==>  (begin (set! x (quote (1 2 3 4 5))) (list (after-first x) (after-second x) (after-third x)))
Parsed:  (begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:after-first foo:x) (core:after-second foo:x) (core:after-third foo:x)))
Compiled:
	CODE BLOCK ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (after-first x) (after-second x) (after-third x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"R0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	after-first
	7	JMP_CLOSURE	1
8	LABEL	"R0"
	9	SAVE_RETURN	"R1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	after-second
	12	JMP_CLOSURE	1
13	LABEL	"R1"
	14	SAVE_RETURN	"R2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	after-third
	17	JMP_CLOSURE	1
18	LABEL	"R2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (after-first x) (after-second x) (after-third x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"R0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	after-first
	7	JMP_CLOSURE	1
8	LABEL	"R0"
	9	SAVE_RETURN	"R1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	after-second
	12	JMP_CLOSURE	1
13	LABEL	"R1"
	14	SAVE_RETURN	"R2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	after-third
	17	JMP_CLOSURE	1
18	LABEL	"R2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"R0"	8
                                      1: [ [R0/8] ]
[ 1]   5 : GLOBAL_GET	x
                                      2: [ [R0/8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	after-first
                                      3: [ [R0/8] (1 2 3 4 5) [Closure/core:cdr] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [R0/8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R0/8] (2 3 4 5) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (2 3 4 5) ]
[ 1]   8 : LABEL	"R0"
                                      1: [ (2 3 4 5) ]
[ 1]   9 : SAVE_RETURN	"R1"	13
                                      2: [ (2 3 4 5) [R1/13] ]
[ 2]  10 : GLOBAL_GET	x
                                      3: [ (2 3 4 5) [R1/13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	after-second
                                      4: [ (2 3 4 5) [R1/13] (1 2 3 4 5) [Closure/core:cddr] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ (2 3 4 5) [R1/13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cddr"
                                      3: [ (2 3 4 5) [R1/13] (3 4 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  13 : LABEL	"R1"
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  14 : SAVE_RETURN	"R2"	18
                                      3: [ (2 3 4 5) (3 4 5) [R2/18] ]
[ 3]  15 : GLOBAL_GET	x
                                      4: [ (2 3 4 5) (3 4 5) [R2/18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	after-third
                                      5: [ (2 3 4 5) (3 4 5) [R2/18] (1 2 3 4 5) [Closure/core:cdddr] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ (2 3 4 5) (3 4 5) [R2/18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"cdddr"
                                      4: [ (2 3 4 5) (3 4 5) [R2/18] (4 5) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  18 : LABEL	"R2"
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  19 : GLOBAL_GET	list
                                      4: [ (2 3 4 5) (3 4 5) (4 5) [Closure/core:list] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ ((2 3 4 5) (3 4 5) (4 5)) ]
[ 1]   1 : RETURN_VAL
test: got "((2 3 4 5) (3 4 5) (4 5))"  - expected "((2 3 4 5) (3 4 5) (4 5))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (set! add (let ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum))) (add 0) (add 100) (add 0)
ParseNext ==>  (set! add (let ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum)))
Parsed:  (set! foo:add (core:let ((foo:sum 0)) (lambda (foo:delta) (set! foo:sum (core:+ foo:sum foo:delta)) foo:sum)))
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((sum 0)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((sum 0)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((sum 0)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (sum 0) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ sum ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (sum) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (sum) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (sum) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (sum) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (sum) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((sum)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((sum)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((sum)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((sum)) ((lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((sum)) ((lambda (delta) (set! sum (+ sum delta)) sum)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((sum)) ((lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [R5/30] [Closure/core:cadr] ((sum 0)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [R5/30] [Closure/core:cadr] ((sum 0)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [R5/30] [Closure/core:cadr] ((sum 0)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (sum 0) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 0 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [R5/30] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) (0) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) (0) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) (0) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) (0) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (delta) => ((set! sum (+ sum delta)) sum)
	0	MAKE_ENV	1	; (delta)
	1	SAVE_RETURN	"R1"	6
	2	LOCAL_GET	1	0	; sum
	3	LOCAL_GET	0	0	; delta
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"R1"
	7	LOCAL_SET	1	0	; sum
	8	STACK_POP
	9	LOCAL_GET	1	0	; sum
	10	RETURN_VAL

	CODE BLOCK ; (sum) => ((lambda (delta) (set! sum (+ sum delta)) sum))
	0	MAKE_ENV	1	; (sum)
	1	MAKE_CLOSURE	[Closure]	; ((set! sum (+ sum delta)) sum)
	2	RETURN_VAL

	CODE BLOCK ; () => ((set! add (let ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; ((lambda (delta) (set! sum (+ sum delta)) sum))
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	GLOBAL_SET	add
	7	RETURN_VAL

Running...
Executing:  
	CODE BLOCK ; () => ((set! add (let ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; ((lambda (delta) (set! sum (+ sum delta)) sum))
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	GLOBAL_SET	add
	7	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	0
                                      2: [ [R0/5] 0 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((lambda (delta) (set! sum (+ sum delta)) sum))
                                      3: [ [R0/5] 0 [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] 0 ]
[ 2]   0 : MAKE_ENV	1	; (sum)
                                      1: [ [R0/5] ]
[ 1]   1 : MAKE_CLOSURE	[Closure]	; ((set! sum (+ sum delta)) sum)
                                      2: [ [R0/5] [Closure] ]
[ 2]   2 : RETURN_VAL
                                      1: [ [Closure] ]
[ 1]   5 : LABEL	"R0"
                                      1: [ [Closure] ]
[ 1]   6 : GLOBAL_SET	add
                                      1: [ [Closure] ]
[ 1]   7 : RETURN_VAL
test: got "[Closure]"  - expected "[Closure]"
ParseNext ==>  (add 0)
Parsed:  (foo:add 0)
Compiled:
	CODE BLOCK ; () => ((add 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	0
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((add 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	0
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	0
                                      1: [ 0 ]
[ 1]   2 : GLOBAL_GET	add
                                      2: [ 0 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 0 ]
[ 1]   0 : MAKE_ENV	1	; (delta)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R1"	6
                                      1: [ [R1/6] ]
[ 1]   2 : LOCAL_GET	1	0	; sum
                                      2: [ [R1/6] 0 ]
[ 2]   3 : LOCAL_GET	0	0	; delta
                                      3: [ [R1/6] 0 0 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [R1/6] 0 0 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R1/6] 0 0 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [R1/6] 0 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 0 ]
[ 1]   6 : LABEL	"R1"
                                      1: [ 0 ]
[ 1]   7 : LOCAL_SET	1	0	; sum
                                      1: [ 0 ]
[ 1]   8 : STACK_POP
                                      0: [  ]
[ 0]   9 : LOCAL_GET	1	0	; sum
                                      1: [ 0 ]
[ 1]  10 : RETURN_VAL
test: got "0"  - expected "0"
ParseNext ==>  (add 100)
Parsed:  (foo:add 100)
Compiled:
	CODE BLOCK ; () => ((add 100))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	100
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((add 100))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	100
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	100
                                      1: [ 100 ]
[ 1]   2 : GLOBAL_GET	add
                                      2: [ 100 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 100 ]
[ 1]   0 : MAKE_ENV	1	; (delta)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R1"	6
                                      1: [ [R1/6] ]
[ 1]   2 : LOCAL_GET	1	0	; sum
                                      2: [ [R1/6] 0 ]
[ 2]   3 : LOCAL_GET	0	0	; delta
                                      3: [ [R1/6] 0 100 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [R1/6] 0 100 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R1/6] 0 100 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [R1/6] 100 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 100 ]
[ 1]   6 : LABEL	"R1"
                                      1: [ 100 ]
[ 1]   7 : LOCAL_SET	1	0	; sum
                                      1: [ 100 ]
[ 1]   8 : STACK_POP
                                      0: [  ]
[ 0]   9 : LOCAL_GET	1	0	; sum
                                      1: [ 100 ]
[ 1]  10 : RETURN_VAL
test: got "100"  - expected "100"
ParseNext ==>  (add 0)
Parsed:  (foo:add 0)
Compiled:
	CODE BLOCK ; () => ((add 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	0
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((add 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	0
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	0
                                      1: [ 0 ]
[ 1]   2 : GLOBAL_GET	add
                                      2: [ 0 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 0 ]
[ 1]   0 : MAKE_ENV	1	; (delta)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R1"	6
                                      1: [ [R1/6] ]
[ 1]   2 : LOCAL_GET	1	0	; sum
                                      2: [ [R1/6] 100 ]
[ 2]   3 : LOCAL_GET	0	0	; delta
                                      3: [ [R1/6] 100 0 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [R1/6] 100 0 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [R1/6] 100 0 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [R1/6] 100 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 100 ]
[ 1]   6 : LABEL	"R1"
                                      1: [ 100 ]
[ 1]   7 : LOCAL_SET	1	0	; sum
                                      1: [ 100 ]
[ 1]   8 : STACK_POP
                                      0: [  ]
[ 0]   9 : LOCAL_GET	1	0	; sum
                                      1: [ 100 ]
[ 1]  10 : RETURN_VAL
test: got "100"  - expected "100"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((chain-list (list cdr cdr car)) '(1 2 3 4))
ParseNext ==>  ((chain-list (list cdr cdr car)) (quote (1 2 3 4)))
Parsed:  ((core:chain-list (core:list core:cdr core:cdr core:car)) (quote (1 2 3 4)))
Executing:  
	CODE BLOCK ; (lst) => ((let* ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)))
	0	MAKE_ENV	1	; (lst)
	1	SAVE_RETURN	"R0"	4
	2	GLOBAL_GET	gensym
	3	JMP_CLOSURE	0
4	LABEL	"R0"
	5	MAKE_CLOSURE	[Closure]	; ((let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))
	6	JMP_CLOSURE	1

                                      1: [ (list cdr cdr car) ]
[ 1]   0 : MAKE_ENV	1	; (lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	4
                                      1: [ [R0/4] ]
[ 1]   2 : GLOBAL_GET	gensym
                                      2: [ [R0/4] [Closure/core:gensym] ]
[ 2]   3 : JMP_CLOSURE	0
                                      1: [ [R0/4] ]
[ 1]   0 : CALL_PRIMOP	"gensym"
                                      2: [ [R0/4] GENSYM-5 ]
[ 2]   1 : RETURN_VAL
                                      1: [ GENSYM-5 ]
[ 1]   4 : LABEL	"R0"
                                      1: [ GENSYM-5 ]
[ 1]   5 : MAKE_CLOSURE	[Closure]	; ((let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))
                                      2: [ GENSYM-5 [Closure] ]
[ 2]   6 : JMP_CLOSURE	1
                                      1: [ GENSYM-5 ]
[ 1]   0 : MAKE_ENV	1	; (var)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R1"	9
                                      1: [ [R1/9] ]
[ 1]   2 : SAVE_RETURN	"R2"	6
                                      2: [ [R1/9] [R2/6] ]
[ 2]   3 : LOCAL_GET	1	0	; lst
                                      3: [ [R1/9] [R2/6] (list cdr cdr car) ]
[ 3]   4 : GLOBAL_GET	eval
                                      4: [ [R1/9] [R2/6] (list cdr cdr car) [Closure/core:eval] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R2/6] (list cdr cdr car) ]
[ 3]   0 : CALL_PRIMOP	"eval"
Executing:  
	CODE BLOCK ; () => ((list cdr cdr car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_GET	cdr
	3	GLOBAL_GET	car
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdr
                                      1: [ [Closure/core:cdr] ]
[ 1]   2 : GLOBAL_GET	cdr
                                      2: [ [Closure/core:cdr] [Closure/core:cdr] ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [Closure/core:cdr] [Closure/core:cdr] [Closure/core:car] ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ [Closure/core:cdr] [Closure/core:cdr] [Closure/core:car] [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ [Closure/core:cdr] [Closure/core:cdr] [Closure/core:car] ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 1]   1 : RETURN_VAL
                                      3: [ [R1/9] [R2/6] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 2]   6 : LABEL	"R2"
                                      2: [ [R1/9] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 2]   7 : GLOBAL_GET	reverse
                                      3: [ [R1/9] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) [Closure] ]
[ 3]   8 : JMP_CLOSURE	1
                                      2: [ [R1/9] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 2]   0 : MAKE_ENV	1	; (lst)
                                      1: [ [R1/9] ]
[ 1]   1 : MAKE_CLOSURE	[Closure]	; ((if (null? lst) result (helper (cdr lst) (cons (car lst) result))))
                                      2: [ [R1/9] [Closure] ]
[ 2]   2 : GLOBAL_SET	helper
                                      2: [ [R1/9] [Closure] ]
[ 2]   3 : STACK_POP
                                      1: [ [R1/9] ]
[ 1]   4 : LOCAL_GET	0	0	; lst
                                      2: [ [R1/9] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 2]   5 : PUSH_CONST	()
                                      3: [ [R1/9] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) () ]
[ 3]   6 : GLOBAL_GET	helper
                                      4: [ [R1/9] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) () [Closure] ]
[ 4]   7 : JMP_CLOSURE	2
                                      3: [ [R1/9] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) () ]
[ 3]   0 : MAKE_ENV	2	; (lst result)
                                      1: [ [R1/9] ]
[ 1]   1 : SAVE_RETURN	"R0"	5
                                      2: [ [R1/9] [R0/5] ]
[ 2]   2 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R0/5] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 3]   3 : GLOBAL_GET	null?
                                      4: [ [R1/9] [R0/5] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) [Closure/core:null?] ]
[ 4]   4 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R0/5] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ [R1/9] [R0/5] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] #f ]
[ 2]   5 : LABEL	"R0"
                                      2: [ [R1/9] #f ]
[ 2]   6 : JMP_IF_FALSE	"L4"	9
                                      1: [ [R1/9] ]
[ 1]   9 : LABEL	"L4"
                                      1: [ [R1/9] ]
[ 1]  10 : SAVE_RETURN	"R1"	14
                                      2: [ [R1/9] [R1/14] ]
[ 2]  11 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R1/14] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 3]  12 : GLOBAL_GET	cdr
                                      4: [ [R1/9] [R1/14] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) [Closure/core:cdr] ]
[ 4]  13 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R1/14] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ [R1/9] [R1/14] ([Closure/core:cdr] [Closure/core:car]) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) ]
[ 2]  14 : LABEL	"R1"
                                      2: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) ]
[ 2]  15 : SAVE_RETURN	"R2"	24
                                      3: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] ]
[ 3]  16 : SAVE_RETURN	"R3"	20
                                      4: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [R3/20] ]
[ 4]  17 : LOCAL_GET	0	0	; lst
                                      5: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [R3/20] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 5]  18 : GLOBAL_GET	car
                                      6: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [R3/20] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) [Closure/core:car] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [R3/20] ([Closure/core:cdr] [Closure/core:cdr] [Closure/core:car]) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [R3/20] [Closure/core:cdr] ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [Closure/core:cdr] ]
[ 4]  20 : LABEL	"R3"
                                      4: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [Closure/core:cdr] ]
[ 4]  21 : LOCAL_GET	0	1	; result
                                      5: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [Closure/core:cdr] () ]
[ 5]  22 : GLOBAL_GET	cons
                                      6: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [Closure/core:cdr] () [Closure/core:cons] ]
[ 6]  23 : JMP_CLOSURE	2
                                      5: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] [Closure/core:cdr] () ]
[ 5]   0 : CALL_PRIMOP	"cons"
                                      4: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) [R2/24] ([Closure/core:cdr]) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) ([Closure/core:cdr]) ]
[ 3]  24 : LABEL	"R2"
                                      3: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) ([Closure/core:cdr]) ]
[ 3]  25 : GLOBAL_GET	helper
                                      4: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) ([Closure/core:cdr]) [Closure] ]
[ 4]  26 : JMP_CLOSURE	2
                                      3: [ [R1/9] ([Closure/core:cdr] [Closure/core:car]) ([Closure/core:cdr]) ]
[ 3]   0 : MAKE_ENV	2	; (lst result)
                                      1: [ [R1/9] ]
[ 1]   1 : SAVE_RETURN	"R0"	5
                                      2: [ [R1/9] [R0/5] ]
[ 2]   2 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R0/5] ([Closure/core:cdr] [Closure/core:car]) ]
[ 3]   3 : GLOBAL_GET	null?
                                      4: [ [R1/9] [R0/5] ([Closure/core:cdr] [Closure/core:car]) [Closure/core:null?] ]
[ 4]   4 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R0/5] ([Closure/core:cdr] [Closure/core:car]) ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ [R1/9] [R0/5] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] #f ]
[ 2]   5 : LABEL	"R0"
                                      2: [ [R1/9] #f ]
[ 2]   6 : JMP_IF_FALSE	"L4"	9
                                      1: [ [R1/9] ]
[ 1]   9 : LABEL	"L4"
                                      1: [ [R1/9] ]
[ 1]  10 : SAVE_RETURN	"R1"	14
                                      2: [ [R1/9] [R1/14] ]
[ 2]  11 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R1/14] ([Closure/core:cdr] [Closure/core:car]) ]
[ 3]  12 : GLOBAL_GET	cdr
                                      4: [ [R1/9] [R1/14] ([Closure/core:cdr] [Closure/core:car]) [Closure/core:cdr] ]
[ 4]  13 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R1/14] ([Closure/core:cdr] [Closure/core:car]) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ [R1/9] [R1/14] ([Closure/core:car]) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] ([Closure/core:car]) ]
[ 2]  14 : LABEL	"R1"
                                      2: [ [R1/9] ([Closure/core:car]) ]
[ 2]  15 : SAVE_RETURN	"R2"	24
                                      3: [ [R1/9] ([Closure/core:car]) [R2/24] ]
[ 3]  16 : SAVE_RETURN	"R3"	20
                                      4: [ [R1/9] ([Closure/core:car]) [R2/24] [R3/20] ]
[ 4]  17 : LOCAL_GET	0	0	; lst
                                      5: [ [R1/9] ([Closure/core:car]) [R2/24] [R3/20] ([Closure/core:cdr] [Closure/core:car]) ]
[ 5]  18 : GLOBAL_GET	car
                                      6: [ [R1/9] ([Closure/core:car]) [R2/24] [R3/20] ([Closure/core:cdr] [Closure/core:car]) [Closure/core:car] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ [R1/9] ([Closure/core:car]) [R2/24] [R3/20] ([Closure/core:cdr] [Closure/core:car]) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [R1/9] ([Closure/core:car]) [R2/24] [R3/20] [Closure/core:cdr] ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R1/9] ([Closure/core:car]) [R2/24] [Closure/core:cdr] ]
[ 4]  20 : LABEL	"R3"
                                      4: [ [R1/9] ([Closure/core:car]) [R2/24] [Closure/core:cdr] ]
[ 4]  21 : LOCAL_GET	0	1	; result
                                      5: [ [R1/9] ([Closure/core:car]) [R2/24] [Closure/core:cdr] ([Closure/core:cdr]) ]
[ 5]  22 : GLOBAL_GET	cons
                                      6: [ [R1/9] ([Closure/core:car]) [R2/24] [Closure/core:cdr] ([Closure/core:cdr]) [Closure/core:cons] ]
[ 6]  23 : JMP_CLOSURE	2
                                      5: [ [R1/9] ([Closure/core:car]) [R2/24] [Closure/core:cdr] ([Closure/core:cdr]) ]
[ 5]   0 : CALL_PRIMOP	"cons"
                                      4: [ [R1/9] ([Closure/core:car]) [R2/24] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/9] ([Closure/core:car]) ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]  24 : LABEL	"R2"
                                      3: [ [R1/9] ([Closure/core:car]) ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]  25 : GLOBAL_GET	helper
                                      4: [ [R1/9] ([Closure/core:car]) ([Closure/core:cdr] [Closure/core:cdr]) [Closure] ]
[ 4]  26 : JMP_CLOSURE	2
                                      3: [ [R1/9] ([Closure/core:car]) ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]   0 : MAKE_ENV	2	; (lst result)
                                      1: [ [R1/9] ]
[ 1]   1 : SAVE_RETURN	"R0"	5
                                      2: [ [R1/9] [R0/5] ]
[ 2]   2 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R0/5] ([Closure/core:car]) ]
[ 3]   3 : GLOBAL_GET	null?
                                      4: [ [R1/9] [R0/5] ([Closure/core:car]) [Closure/core:null?] ]
[ 4]   4 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R0/5] ([Closure/core:car]) ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ [R1/9] [R0/5] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] #f ]
[ 2]   5 : LABEL	"R0"
                                      2: [ [R1/9] #f ]
[ 2]   6 : JMP_IF_FALSE	"L4"	9
                                      1: [ [R1/9] ]
[ 1]   9 : LABEL	"L4"
                                      1: [ [R1/9] ]
[ 1]  10 : SAVE_RETURN	"R1"	14
                                      2: [ [R1/9] [R1/14] ]
[ 2]  11 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R1/14] ([Closure/core:car]) ]
[ 3]  12 : GLOBAL_GET	cdr
                                      4: [ [R1/9] [R1/14] ([Closure/core:car]) [Closure/core:cdr] ]
[ 4]  13 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R1/14] ([Closure/core:car]) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ [R1/9] [R1/14] () ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] () ]
[ 2]  14 : LABEL	"R1"
                                      2: [ [R1/9] () ]
[ 2]  15 : SAVE_RETURN	"R2"	24
                                      3: [ [R1/9] () [R2/24] ]
[ 3]  16 : SAVE_RETURN	"R3"	20
                                      4: [ [R1/9] () [R2/24] [R3/20] ]
[ 4]  17 : LOCAL_GET	0	0	; lst
                                      5: [ [R1/9] () [R2/24] [R3/20] ([Closure/core:car]) ]
[ 5]  18 : GLOBAL_GET	car
                                      6: [ [R1/9] () [R2/24] [R3/20] ([Closure/core:car]) [Closure/core:car] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ [R1/9] () [R2/24] [R3/20] ([Closure/core:car]) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [R1/9] () [R2/24] [R3/20] [Closure/core:car] ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R1/9] () [R2/24] [Closure/core:car] ]
[ 4]  20 : LABEL	"R3"
                                      4: [ [R1/9] () [R2/24] [Closure/core:car] ]
[ 4]  21 : LOCAL_GET	0	1	; result
                                      5: [ [R1/9] () [R2/24] [Closure/core:car] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 5]  22 : GLOBAL_GET	cons
                                      6: [ [R1/9] () [R2/24] [Closure/core:car] ([Closure/core:cdr] [Closure/core:cdr]) [Closure/core:cons] ]
[ 6]  23 : JMP_CLOSURE	2
                                      5: [ [R1/9] () [R2/24] [Closure/core:car] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 5]   0 : CALL_PRIMOP	"cons"
                                      4: [ [R1/9] () [R2/24] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/9] () ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]  24 : LABEL	"R2"
                                      3: [ [R1/9] () ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]  25 : GLOBAL_GET	helper
                                      4: [ [R1/9] () ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) [Closure] ]
[ 4]  26 : JMP_CLOSURE	2
                                      3: [ [R1/9] () ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]   0 : MAKE_ENV	2	; (lst result)
                                      1: [ [R1/9] ]
[ 1]   1 : SAVE_RETURN	"R0"	5
                                      2: [ [R1/9] [R0/5] ]
[ 2]   2 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R0/5] () ]
[ 3]   3 : GLOBAL_GET	null?
                                      4: [ [R1/9] [R0/5] () [Closure/core:null?] ]
[ 4]   4 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R0/5] () ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ [R1/9] [R0/5] #t ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] #t ]
[ 2]   5 : LABEL	"R0"
                                      2: [ [R1/9] #t ]
[ 2]   6 : JMP_IF_FALSE	"L4"	9
                                      1: [ [R1/9] ]
[ 1]   7 : LOCAL_GET	0	1	; result
                                      2: [ [R1/9] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 2]   8 : RETURN_VAL
                                      1: [ ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 1]   9 : LABEL	"R1"
                                      1: [ ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 1]  10 : MAKE_CLOSURE	[Closure]	; ((let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))
                                      2: [ ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) [Closure] ]
[ 2]  11 : JMP_CLOSURE	1
                                      1: [ ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 1]   0 : MAKE_ENV	1	; (args)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	22
                                      1: [ [R3/22] ]
[ 1]   2 : SAVE_RETURN	"R4"	19
                                      2: [ [R3/22] [R4/19] ]
[ 2]   3 : PUSH_CONST	fold-right
                                      3: [ [R3/22] [R4/19] fold-right ]
[ 3]   4 : PUSH_CONST	list
                                      4: [ [R3/22] [R4/19] fold-right list ]
[ 4]   5 : SAVE_RETURN	"R5"	10
                                      5: [ [R3/22] [R4/19] fold-right list [R5/10] ]
[ 5]   6 : PUSH_CONST	quote
                                      6: [ [R3/22] [R4/19] fold-right list [R5/10] quote ]
[ 6]   7 : LOCAL_GET	1	0	; var
                                      7: [ [R3/22] [R4/19] fold-right list [R5/10] quote GENSYM-5 ]
[ 7]   8 : GLOBAL_GET	list
                                      8: [ [R3/22] [R4/19] fold-right list [R5/10] quote GENSYM-5 [Closure/core:list] ]
[ 8]   9 : JMP_CLOSURE	2
                                      7: [ [R3/22] [R4/19] fold-right list [R5/10] quote GENSYM-5 ]
[ 7]   0 : CALL_PRIMOP	"list"
                                      6: [ [R3/22] [R4/19] fold-right list [R5/10] (quote GENSYM-5) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) ]
[ 5]  10 : LABEL	"R5"
                                      5: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) ]
[ 5]  11 : SAVE_RETURN	"R6"	16
                                      6: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) [R6/16] ]
[ 6]  12 : PUSH_CONST	quote
                                      7: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) [R6/16] quote ]
[ 7]  13 : LOCAL_GET	0	0	; args
                                      8: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) [R6/16] quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 8]  14 : GLOBAL_GET	list
                                      9: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) [R6/16] quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) [Closure/core:list] ]
[ 9]  15 : JMP_CLOSURE	2
                                      8: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) [R6/16] quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 8]   0 : CALL_PRIMOP	"list"
                                      7: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) [R6/16] (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr])) ]
[ 7]   1 : RETURN_VAL
                                      6: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr])) ]
[ 6]  16 : LABEL	"R6"
                                      6: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr])) ]
[ 6]  17 : GLOBAL_GET	list
                                      7: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr])) [Closure/core:list] ]
[ 7]  18 : JMP_CLOSURE	4
                                      6: [ [R3/22] [R4/19] fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr])) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      3: [ [R3/22] [R4/19] (fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R3/22] (fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]))) ]
[ 2]  19 : LABEL	"R4"
                                      2: [ [R3/22] (fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]))) ]
[ 2]  20 : GLOBAL_GET	eval
                                      3: [ [R3/22] (fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]))) [Closure/core:eval] ]
[ 3]  21 : JMP_CLOSURE	1
                                      2: [ [R3/22] (fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]))) ]
[ 2]   0 : CALL_PRIMOP	"eval"
Executing:  
	CODE BLOCK ; () => ((fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	list
	2	PUSH_CONST	GENSYM-5
	3	PUSH_CONST	([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr])
	4	GLOBAL_GET	fold-right
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	list
                                      1: [ [Closure/core:list] ]
[ 1]   2 : PUSH_CONST	GENSYM-5
                                      2: [ [Closure/core:list] GENSYM-5 ]
[ 2]   3 : PUSH_CONST	([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr])
                                      3: [ [Closure/core:list] GENSYM-5 ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]   4 : GLOBAL_GET	fold-right
                                      4: [ [Closure/core:list] GENSYM-5 ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ [Closure/core:list] GENSYM-5 ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	10
                                      1: [ [R0/10] ]
[ 1]   2 : SAVE_RETURN	"R1"	6
                                      2: [ [R0/10] [R1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [R0/10] [R1/6] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [R0/10] [R1/6] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R0/10] [R1/6] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R0/10] [R1/6] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/10] 3 ]
[ 2]   6 : LABEL	"R1"
                                      2: [ [R0/10] 3 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [R0/10] 3 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [R0/10] 3 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [R0/10] 3 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R0/10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : LABEL	"R0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L5"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	19
                                      1: [ [R2/19] ]
[ 1]  16 : LOCAL_GET	0	2	; lst
                                      2: [ [R2/19] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 2]  17 : GLOBAL_GET	car
                                      3: [ [R2/19] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) [Closure/core:car] ]
[ 3]  18 : JMP_CLOSURE	1
                                      2: [ [R2/19] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R2/19] [Closure/core:car] ]
[ 2]   1 : RETURN_VAL
                                      1: [ [Closure/core:car] ]
[ 1]  19 : LABEL	"R2"
                                      1: [ [Closure/core:car] ]
[ 1]  20 : SAVE_RETURN	"R3"	30
                                      2: [ [Closure/core:car] [R3/30] ]
[ 2]  21 : LOCAL_GET	0	0	; fn
                                      3: [ [Closure/core:car] [R3/30] [Closure/core:list] ]
[ 3]  22 : LOCAL_GET	0	1	; base
                                      4: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 ]
[ 4]  23 : SAVE_RETURN	"R4"	27
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ]
[ 5]  24 : LOCAL_GET	0	2	; lst
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 6]  25 : GLOBAL_GET	cdr
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) [Closure/core:cdr] ]
[ 7]  26 : JMP_CLOSURE	1
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 5]  27 : LABEL	"R4"
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 5]  28 : GLOBAL_GET	fold-right
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 ([Closure/core:cdr] [Closure/core:cdr]) [Closure] ]
[ 6]  29 : JMP_CLOSURE	3
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:list] GENSYM-5 ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 5]   0 : MAKE_ENV	3	; (fn base lst)
                                      2: [ [Closure/core:car] [R3/30] ]
[ 2]   1 : SAVE_RETURN	"R0"	10
                                      3: [ [Closure/core:car] [R3/30] [R0/10] ]
[ 3]   2 : SAVE_RETURN	"R1"	6
                                      4: [ [Closure/core:car] [R3/30] [R0/10] [R1/6] ]
[ 4]   3 : LOCAL_GET	0	2	; lst
                                      5: [ [Closure/core:car] [R3/30] [R0/10] [R1/6] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 5]   4 : GLOBAL_GET	length
                                      6: [ [Closure/core:car] [R3/30] [R0/10] [R1/6] ([Closure/core:cdr] [Closure/core:cdr]) [Closure/core:length] ]
[ 6]   5 : JMP_CLOSURE	1
                                      5: [ [Closure/core:car] [R3/30] [R0/10] [R1/6] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 5]   0 : CALL_PRIMOP	"length"
                                      5: [ [Closure/core:car] [R3/30] [R0/10] [R1/6] 2 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [Closure/core:car] [R3/30] [R0/10] 2 ]
[ 4]   6 : LABEL	"R1"
                                      4: [ [Closure/core:car] [R3/30] [R0/10] 2 ]
[ 4]   7 : PUSH_CONST	0
                                      5: [ [Closure/core:car] [R3/30] [R0/10] 2 0 ]
[ 5]   8 : GLOBAL_GET	=
                                      6: [ [Closure/core:car] [R3/30] [R0/10] 2 0 [Closure/core:=] ]
[ 6]   9 : JMP_CLOSURE	2
                                      5: [ [Closure/core:car] [R3/30] [R0/10] 2 0 ]
[ 5]   0 : CALL_PRIMOP	"="
                                      4: [ [Closure/core:car] [R3/30] [R0/10] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ [Closure/core:car] [R3/30] #f ]
[ 3]  10 : LABEL	"R0"
                                      3: [ [Closure/core:car] [R3/30] #f ]
[ 3]  11 : JMP_IF_FALSE	"L5"	14
                                      2: [ [Closure/core:car] [R3/30] ]
[ 2]  14 : LABEL	"L5"
                                      2: [ [Closure/core:car] [R3/30] ]
[ 2]  15 : SAVE_RETURN	"R2"	19
                                      3: [ [Closure/core:car] [R3/30] [R2/19] ]
[ 3]  16 : LOCAL_GET	0	2	; lst
                                      4: [ [Closure/core:car] [R3/30] [R2/19] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 4]  17 : GLOBAL_GET	car
                                      5: [ [Closure/core:car] [R3/30] [R2/19] ([Closure/core:cdr] [Closure/core:cdr]) [Closure/core:car] ]
[ 5]  18 : JMP_CLOSURE	1
                                      4: [ [Closure/core:car] [R3/30] [R2/19] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ [Closure/core:car] [R3/30] [R2/19] [Closure/core:cdr] ]
[ 4]   1 : RETURN_VAL
                                      3: [ [Closure/core:car] [R3/30] [Closure/core:cdr] ]
[ 3]  19 : LABEL	"R2"
                                      3: [ [Closure/core:car] [R3/30] [Closure/core:cdr] ]
[ 3]  20 : SAVE_RETURN	"R3"	30
                                      4: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] ]
[ 4]  21 : LOCAL_GET	0	0	; fn
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] ]
[ 5]  22 : LOCAL_GET	0	1	; base
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 ]
[ 6]  23 : SAVE_RETURN	"R4"	27
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ]
[ 7]  24 : LOCAL_GET	0	2	; lst
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 8]  25 : GLOBAL_GET	cdr
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:cdr] [Closure/core:cdr]) [Closure/core:cdr] ]
[ 9]  26 : JMP_CLOSURE	1
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:cdr] [Closure/core:cdr]) ]
[ 8]   0 : CALL_PRIMOP	"cdr"
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:cdr]) ]
[ 8]   1 : RETURN_VAL
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 ([Closure/core:cdr]) ]
[ 7]  27 : LABEL	"R4"
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 ([Closure/core:cdr]) ]
[ 7]  28 : GLOBAL_GET	fold-right
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 ([Closure/core:cdr]) [Closure] ]
[ 8]  29 : JMP_CLOSURE	3
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 ([Closure/core:cdr]) ]
[ 7]   0 : MAKE_ENV	3	; (fn base lst)
                                      4: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] ]
[ 4]   1 : SAVE_RETURN	"R0"	10
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] ]
[ 5]   2 : SAVE_RETURN	"R1"	6
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] ]
[ 6]   3 : LOCAL_GET	0	2	; lst
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] ([Closure/core:cdr]) ]
[ 7]   4 : GLOBAL_GET	length
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] ([Closure/core:cdr]) [Closure/core:length] ]
[ 8]   5 : JMP_CLOSURE	1
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] ([Closure/core:cdr]) ]
[ 7]   0 : CALL_PRIMOP	"length"
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] 1 ]
[ 7]   1 : RETURN_VAL
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 1 ]
[ 6]   6 : LABEL	"R1"
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 1 ]
[ 6]   7 : PUSH_CONST	0
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 1 0 ]
[ 7]   8 : GLOBAL_GET	=
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 1 0 [Closure/core:=] ]
[ 8]   9 : JMP_CLOSURE	2
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 1 0 ]
[ 7]   0 : CALL_PRIMOP	"="
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] #f ]
[ 5]  10 : LABEL	"R0"
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] #f ]
[ 5]  11 : JMP_IF_FALSE	"L5"	14
                                      4: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] ]
[ 4]  14 : LABEL	"L5"
                                      4: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] ]
[ 4]  15 : SAVE_RETURN	"R2"	19
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R2/19] ]
[ 5]  16 : LOCAL_GET	0	2	; lst
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R2/19] ([Closure/core:cdr]) ]
[ 6]  17 : GLOBAL_GET	car
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R2/19] ([Closure/core:cdr]) [Closure/core:car] ]
[ 7]  18 : JMP_CLOSURE	1
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R2/19] ([Closure/core:cdr]) ]
[ 6]   0 : CALL_PRIMOP	"car"
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [R2/19] [Closure/core:cdr] ]
[ 6]   1 : RETURN_VAL
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] ]
[ 5]  19 : LABEL	"R2"
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] ]
[ 5]  20 : SAVE_RETURN	"R3"	30
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] ]
[ 6]  21 : LOCAL_GET	0	0	; fn
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] ]
[ 7]  22 : LOCAL_GET	0	1	; base
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 ]
[ 8]  23 : SAVE_RETURN	"R4"	27
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ]
[ 9]  24 : LOCAL_GET	0	2	; lst
                                     10: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:cdr]) ]
[10]  25 : GLOBAL_GET	cdr
                                     11: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:cdr]) [Closure/core:cdr] ]
[11]  26 : JMP_CLOSURE	1
                                     10: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] ([Closure/core:cdr]) ]
[10]   0 : CALL_PRIMOP	"cdr"
                                     10: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 [R4/27] () ]
[10]   1 : RETURN_VAL
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 () ]
[ 9]  27 : LABEL	"R4"
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 () ]
[ 9]  28 : GLOBAL_GET	fold-right
                                     10: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 () [Closure] ]
[10]  29 : JMP_CLOSURE	3
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:list] GENSYM-5 () ]
[ 9]   0 : MAKE_ENV	3	; (fn base lst)
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] ]
[ 6]   1 : SAVE_RETURN	"R0"	10
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] ]
[ 7]   2 : SAVE_RETURN	"R1"	6
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] ]
[ 8]   3 : LOCAL_GET	0	2	; lst
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] () ]
[ 9]   4 : GLOBAL_GET	length
                                     10: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] () [Closure/core:length] ]
[10]   5 : JMP_CLOSURE	1
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] () ]
[ 9]   0 : CALL_PRIMOP	"length"
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] [R1/6] 0 ]
[ 9]   1 : RETURN_VAL
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 0 ]
[ 8]   6 : LABEL	"R1"
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 0 ]
[ 8]   7 : PUSH_CONST	0
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 0 0 ]
[ 9]   8 : GLOBAL_GET	=
                                     10: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 0 0 [Closure/core:=] ]
[10]   9 : JMP_CLOSURE	2
                                      9: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] 0 0 ]
[ 9]   0 : CALL_PRIMOP	"="
                                      8: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] [R0/10] #t ]
[ 8]   1 : RETURN_VAL
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] #t ]
[ 7]  10 : LABEL	"R0"
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] #t ]
[ 7]  11 : JMP_IF_FALSE	"L5"	14
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] ]
[ 6]  12 : LOCAL_GET	0	1	; base
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] [R3/30] GENSYM-5 ]
[ 7]  13 : RETURN_VAL
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] GENSYM-5 ]
[ 6]  30 : LABEL	"R3"
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] GENSYM-5 ]
[ 6]  31 : LOCAL_GET	0	0	; fn
                                      7: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] GENSYM-5 [Closure/core:list] ]
[ 7]  32 : JMP_CLOSURE	2
                                      6: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] [Closure/core:cdr] GENSYM-5 ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:cdr] [R3/30] ([Closure/core:cdr] GENSYM-5) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [Closure/core:car] [R3/30] [Closure/core:cdr] ([Closure/core:cdr] GENSYM-5) ]
[ 4]  30 : LABEL	"R3"
                                      4: [ [Closure/core:car] [R3/30] [Closure/core:cdr] ([Closure/core:cdr] GENSYM-5) ]
[ 4]  31 : LOCAL_GET	0	0	; fn
                                      5: [ [Closure/core:car] [R3/30] [Closure/core:cdr] ([Closure/core:cdr] GENSYM-5) [Closure/core:list] ]
[ 5]  32 : JMP_CLOSURE	2
                                      4: [ [Closure/core:car] [R3/30] [Closure/core:cdr] ([Closure/core:cdr] GENSYM-5) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      3: [ [Closure/core:car] [R3/30] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5)) ]
[ 2]  30 : LABEL	"R3"
                                      2: [ [Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5)) ]
[ 2]  31 : LOCAL_GET	0	0	; fn
                                      3: [ [Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5)) [Closure/core:list] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ [Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))) ]
[ 1]   1 : RETURN_VAL
                                      2: [ [R3/22] ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))) ]
[ 1]  22 : LABEL	"R3"
                                      1: [ ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))) ]
[ 1]  23 : MAKE_CLOSURE	[Closure]	; ((begin (list (quote lambda) (list var) bodytext)))
                                      2: [ ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))) [Closure] ]
[ 2]  24 : JMP_CLOSURE	1
                                      1: [ ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))) ]
[ 1]   0 : MAKE_ENV	1	; (bodytext)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	lambda
                                      1: [ lambda ]
[ 1]   2 : SAVE_RETURN	"R7"	6
                                      2: [ lambda [R7/6] ]
[ 2]   3 : LOCAL_GET	2	0	; var
                                      3: [ lambda [R7/6] GENSYM-5 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ lambda [R7/6] GENSYM-5 [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ lambda [R7/6] GENSYM-5 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ lambda [R7/6] (GENSYM-5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ lambda (GENSYM-5) ]
[ 2]   6 : LABEL	"R7"
                                      2: [ lambda (GENSYM-5) ]
[ 2]   7 : LOCAL_GET	0	0	; bodytext
                                      3: [ lambda (GENSYM-5) ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))) ]
[ 3]   8 : GLOBAL_GET	list
                                      4: [ lambda (GENSYM-5) ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))) [Closure/core:list] ]
[ 4]   9 : JMP_CLOSURE	3
                                      3: [ lambda (GENSYM-5) ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (lambda (GENSYM-5) ([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5)))) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((list cdr cdr car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_GET	cdr
	3	GLOBAL_GET	car
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

	CODE BLOCK ; () => ((fold-right list (quote GENSYM-5) (quote ([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr]))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	list
	2	PUSH_CONST	GENSYM-5
	3	PUSH_CONST	([Closure/core:car] [Closure/core:cdr] [Closure/core:cdr])
	4	GLOBAL_GET	fold-right
	5	JMP_CLOSURE	3

	CODE BLOCK ; (GENSYM-5) => (([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))))
	0	MAKE_ENV	1	; (GENSYM-5)
	1	SAVE_RETURN	"R0"	9
	2	SAVE_RETURN	"R1"	6
	3	LOCAL_GET	0	0	; GENSYM-5
	4	PUSH_CONST	[Closure/core:cdr]
	5	JMP_CLOSURE	1
6	LABEL	"R1"
	7	PUSH_CONST	[Closure/core:cdr]
	8	JMP_CLOSURE	1
9	LABEL	"R0"
	10	PUSH_CONST	[Closure/core:car]
	11	JMP_CLOSURE	1

	CODE BLOCK ; () => (((chain-list (list cdr cdr car)) (quote (1 2 3 4))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4)
	2	MAKE_CLOSURE	[Closure]	; (([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))))
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => (((chain-list (list cdr cdr car)) (quote (1 2 3 4))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4)
	2	MAKE_CLOSURE	[Closure]	; (([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))))
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4)
                                      1: [ (1 2 3 4) ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; (([Closure/core:car] ([Closure/core:cdr] ([Closure/core:cdr] GENSYM-5))))
                                      2: [ (1 2 3 4) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2 3 4) ]
[ 1]   0 : MAKE_ENV	1	; (GENSYM-5)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	9
                                      1: [ [R0/9] ]
[ 1]   2 : SAVE_RETURN	"R1"	6
                                      2: [ [R0/9] [R1/6] ]
[ 2]   3 : LOCAL_GET	0	0	; GENSYM-5
                                      3: [ [R0/9] [R1/6] (1 2 3 4) ]
[ 3]   4 : PUSH_CONST	[Closure/core:cdr]
                                      4: [ [R0/9] [R1/6] (1 2 3 4) [Closure/core:cdr] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R0/9] [R1/6] (1 2 3 4) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ [R0/9] [R1/6] (2 3 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/9] (2 3 4) ]
[ 2]   6 : LABEL	"R1"
                                      2: [ [R0/9] (2 3 4) ]
[ 2]   7 : PUSH_CONST	[Closure/core:cdr]
                                      3: [ [R0/9] (2 3 4) [Closure/core:cdr] ]
[ 3]   8 : JMP_CLOSURE	1
                                      2: [ [R0/9] (2 3 4) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R0/9] (3 4) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (3 4) ]
[ 1]   9 : LABEL	"R0"
                                      1: [ (3 4) ]
[ 1]  10 : PUSH_CONST	[Closure/core:car]
                                      2: [ (3 4) [Closure/core:car] ]
[ 2]  11 : JMP_CLOSURE	1
                                      1: [ (3 4) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((chain cdr cdr car) '(1 2 3 4))
ParseNext ==>  ((chain cdr cdr car) (quote (1 2 3 4)))
Parsed:  ((core:chain core:cdr core:cdr core:car) (quote (1 2 3 4)))
Executing:  
	CODE BLOCK ; (first rest) => ((list (quote chain-list) (list (quote quote) (cons first rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	PUSH_CONST	chain-list
	2	SAVE_RETURN	"R0"	12
	3	PUSH_CONST	quote
	4	SAVE_RETURN	"R1"	9
	5	LOCAL_GET	0	0	; first
	6	LOCAL_GET	0	1	; rest
	7	GLOBAL_GET	cons
	8	JMP_CLOSURE	2
9	LABEL	"R1"
	10	GLOBAL_GET	list
	11	JMP_CLOSURE	2
12	LABEL	"R0"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	2

                                      3: [ cdr cdr car ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	chain-list
                                      1: [ chain-list ]
[ 1]   2 : SAVE_RETURN	"R0"	12
                                      2: [ chain-list [R0/12] ]
[ 2]   3 : PUSH_CONST	quote
                                      3: [ chain-list [R0/12] quote ]
[ 3]   4 : SAVE_RETURN	"R1"	9
                                      4: [ chain-list [R0/12] quote [R1/9] ]
[ 4]   5 : LOCAL_GET	0	0	; first
                                      5: [ chain-list [R0/12] quote [R1/9] cdr ]
[ 5]   6 : LOCAL_GET	0	1	; rest
                                      6: [ chain-list [R0/12] quote [R1/9] cdr (cdr car) ]
[ 6]   7 : GLOBAL_GET	cons
                                      7: [ chain-list [R0/12] quote [R1/9] cdr (cdr car) [Closure/core:cons] ]
[ 7]   8 : JMP_CLOSURE	2
                                      6: [ chain-list [R0/12] quote [R1/9] cdr (cdr car) ]
[ 6]   0 : CALL_PRIMOP	"cons"
                                      5: [ chain-list [R0/12] quote [R1/9] (cdr cdr car) ]
[ 5]   1 : RETURN_VAL
                                      4: [ chain-list [R0/12] quote (cdr cdr car) ]
[ 4]   9 : LABEL	"R1"
                                      4: [ chain-list [R0/12] quote (cdr cdr car) ]
[ 4]  10 : GLOBAL_GET	list
                                      5: [ chain-list [R0/12] quote (cdr cdr car) [Closure/core:list] ]
[ 5]  11 : JMP_CLOSURE	2
                                      4: [ chain-list [R0/12] quote (cdr cdr car) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      3: [ chain-list [R0/12] (quote (cdr cdr car)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ chain-list (quote (cdr cdr car)) ]
[ 2]  12 : LABEL	"R0"
                                      2: [ chain-list (quote (cdr cdr car)) ]
[ 2]  13 : GLOBAL_GET	list
                                      3: [ chain-list (quote (cdr cdr car)) [Closure/core:list] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ chain-list (quote (cdr cdr car)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (chain-list (quote (cdr cdr car))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK ; (lst) => ((let* ((var (gensym)) (args (reverse (eval lst))) (bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (list (quote lambda) (list var) bodytext)))
	0	MAKE_ENV	1	; (lst)
	1	SAVE_RETURN	"R0"	4
	2	GLOBAL_GET	gensym
	3	JMP_CLOSURE	0
4	LABEL	"R0"
	5	MAKE_CLOSURE	[Closure]	; ((let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))
	6	JMP_CLOSURE	1

                                      1: [ (quote (cdr cdr car)) ]
[ 1]   0 : MAKE_ENV	1	; (lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	4
                                      1: [ [R0/4] ]
[ 1]   2 : GLOBAL_GET	gensym
                                      2: [ [R0/4] [Closure/core:gensym] ]
[ 2]   3 : JMP_CLOSURE	0
                                      1: [ [R0/4] ]
[ 1]   0 : CALL_PRIMOP	"gensym"
                                      2: [ [R0/4] GENSYM-6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ GENSYM-6 ]
[ 1]   4 : LABEL	"R0"
                                      1: [ GENSYM-6 ]
[ 1]   5 : MAKE_CLOSURE	[Closure]	; ((let ((args (reverse (eval lst)))) (let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext)))))
                                      2: [ GENSYM-6 [Closure] ]
[ 2]   6 : JMP_CLOSURE	1
                                      1: [ GENSYM-6 ]
[ 1]   0 : MAKE_ENV	1	; (var)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R1"	9
                                      1: [ [R1/9] ]
[ 1]   2 : SAVE_RETURN	"R2"	6
                                      2: [ [R1/9] [R2/6] ]
[ 2]   3 : LOCAL_GET	1	0	; lst
                                      3: [ [R1/9] [R2/6] (quote (cdr cdr car)) ]
[ 3]   4 : GLOBAL_GET	eval
                                      4: [ [R1/9] [R2/6] (quote (cdr cdr car)) [Closure/core:eval] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R2/6] (quote (cdr cdr car)) ]
[ 3]   0 : CALL_PRIMOP	"eval"
Executing:  
	CODE BLOCK ; () => ((quote (cdr cdr car)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(cdr cdr car)
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(cdr cdr car)
                                      1: [ (cdr cdr car) ]
[ 1]   2 : RETURN_VAL
                                      3: [ [R1/9] [R2/6] (cdr cdr car) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] (cdr cdr car) ]
[ 2]   6 : LABEL	"R2"
                                      2: [ [R1/9] (cdr cdr car) ]
[ 2]   7 : GLOBAL_GET	reverse
                                      3: [ [R1/9] (cdr cdr car) [Closure] ]
[ 3]   8 : JMP_CLOSURE	1
                                      2: [ [R1/9] (cdr cdr car) ]
[ 2]   0 : MAKE_ENV	1	; (lst)
                                      1: [ [R1/9] ]
[ 1]   1 : MAKE_CLOSURE	[Closure]	; ((if (null? lst) result (helper (cdr lst) (cons (car lst) result))))
                                      2: [ [R1/9] [Closure] ]
[ 2]   2 : GLOBAL_SET	helper
                                      2: [ [R1/9] [Closure] ]
[ 2]   3 : STACK_POP
                                      1: [ [R1/9] ]
[ 1]   4 : LOCAL_GET	0	0	; lst
                                      2: [ [R1/9] (cdr cdr car) ]
[ 2]   5 : PUSH_CONST	()
                                      3: [ [R1/9] (cdr cdr car) () ]
[ 3]   6 : GLOBAL_GET	helper
                                      4: [ [R1/9] (cdr cdr car) () [Closure] ]
[ 4]   7 : JMP_CLOSURE	2
                                      3: [ [R1/9] (cdr cdr car) () ]
[ 3]   0 : MAKE_ENV	2	; (lst result)
                                      1: [ [R1/9] ]
[ 1]   1 : SAVE_RETURN	"R0"	5
                                      2: [ [R1/9] [R0/5] ]
[ 2]   2 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R0/5] (cdr cdr car) ]
[ 3]   3 : GLOBAL_GET	null?
                                      4: [ [R1/9] [R0/5] (cdr cdr car) [Closure/core:null?] ]
[ 4]   4 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R0/5] (cdr cdr car) ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ [R1/9] [R0/5] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] #f ]
[ 2]   5 : LABEL	"R0"
                                      2: [ [R1/9] #f ]
[ 2]   6 : JMP_IF_FALSE	"L4"	9
                                      1: [ [R1/9] ]
[ 1]   9 : LABEL	"L4"
                                      1: [ [R1/9] ]
[ 1]  10 : SAVE_RETURN	"R1"	14
                                      2: [ [R1/9] [R1/14] ]
[ 2]  11 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R1/14] (cdr cdr car) ]
[ 3]  12 : GLOBAL_GET	cdr
                                      4: [ [R1/9] [R1/14] (cdr cdr car) [Closure/core:cdr] ]
[ 4]  13 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R1/14] (cdr cdr car) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ [R1/9] [R1/14] (cdr car) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] (cdr car) ]
[ 2]  14 : LABEL	"R1"
                                      2: [ [R1/9] (cdr car) ]
[ 2]  15 : SAVE_RETURN	"R2"	24
                                      3: [ [R1/9] (cdr car) [R2/24] ]
[ 3]  16 : SAVE_RETURN	"R3"	20
                                      4: [ [R1/9] (cdr car) [R2/24] [R3/20] ]
[ 4]  17 : LOCAL_GET	0	0	; lst
                                      5: [ [R1/9] (cdr car) [R2/24] [R3/20] (cdr cdr car) ]
[ 5]  18 : GLOBAL_GET	car
                                      6: [ [R1/9] (cdr car) [R2/24] [R3/20] (cdr cdr car) [Closure/core:car] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ [R1/9] (cdr car) [R2/24] [R3/20] (cdr cdr car) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [R1/9] (cdr car) [R2/24] [R3/20] cdr ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R1/9] (cdr car) [R2/24] cdr ]
[ 4]  20 : LABEL	"R3"
                                      4: [ [R1/9] (cdr car) [R2/24] cdr ]
[ 4]  21 : LOCAL_GET	0	1	; result
                                      5: [ [R1/9] (cdr car) [R2/24] cdr () ]
[ 5]  22 : GLOBAL_GET	cons
                                      6: [ [R1/9] (cdr car) [R2/24] cdr () [Closure/core:cons] ]
[ 6]  23 : JMP_CLOSURE	2
                                      5: [ [R1/9] (cdr car) [R2/24] cdr () ]
[ 5]   0 : CALL_PRIMOP	"cons"
                                      4: [ [R1/9] (cdr car) [R2/24] (cdr) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/9] (cdr car) (cdr) ]
[ 3]  24 : LABEL	"R2"
                                      3: [ [R1/9] (cdr car) (cdr) ]
[ 3]  25 : GLOBAL_GET	helper
                                      4: [ [R1/9] (cdr car) (cdr) [Closure] ]
[ 4]  26 : JMP_CLOSURE	2
                                      3: [ [R1/9] (cdr car) (cdr) ]
[ 3]   0 : MAKE_ENV	2	; (lst result)
                                      1: [ [R1/9] ]
[ 1]   1 : SAVE_RETURN	"R0"	5
                                      2: [ [R1/9] [R0/5] ]
[ 2]   2 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R0/5] (cdr car) ]
[ 3]   3 : GLOBAL_GET	null?
                                      4: [ [R1/9] [R0/5] (cdr car) [Closure/core:null?] ]
[ 4]   4 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R0/5] (cdr car) ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ [R1/9] [R0/5] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] #f ]
[ 2]   5 : LABEL	"R0"
                                      2: [ [R1/9] #f ]
[ 2]   6 : JMP_IF_FALSE	"L4"	9
                                      1: [ [R1/9] ]
[ 1]   9 : LABEL	"L4"
                                      1: [ [R1/9] ]
[ 1]  10 : SAVE_RETURN	"R1"	14
                                      2: [ [R1/9] [R1/14] ]
[ 2]  11 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R1/14] (cdr car) ]
[ 3]  12 : GLOBAL_GET	cdr
                                      4: [ [R1/9] [R1/14] (cdr car) [Closure/core:cdr] ]
[ 4]  13 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R1/14] (cdr car) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ [R1/9] [R1/14] (car) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] (car) ]
[ 2]  14 : LABEL	"R1"
                                      2: [ [R1/9] (car) ]
[ 2]  15 : SAVE_RETURN	"R2"	24
                                      3: [ [R1/9] (car) [R2/24] ]
[ 3]  16 : SAVE_RETURN	"R3"	20
                                      4: [ [R1/9] (car) [R2/24] [R3/20] ]
[ 4]  17 : LOCAL_GET	0	0	; lst
                                      5: [ [R1/9] (car) [R2/24] [R3/20] (cdr car) ]
[ 5]  18 : GLOBAL_GET	car
                                      6: [ [R1/9] (car) [R2/24] [R3/20] (cdr car) [Closure/core:car] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ [R1/9] (car) [R2/24] [R3/20] (cdr car) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [R1/9] (car) [R2/24] [R3/20] cdr ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R1/9] (car) [R2/24] cdr ]
[ 4]  20 : LABEL	"R3"
                                      4: [ [R1/9] (car) [R2/24] cdr ]
[ 4]  21 : LOCAL_GET	0	1	; result
                                      5: [ [R1/9] (car) [R2/24] cdr (cdr) ]
[ 5]  22 : GLOBAL_GET	cons
                                      6: [ [R1/9] (car) [R2/24] cdr (cdr) [Closure/core:cons] ]
[ 6]  23 : JMP_CLOSURE	2
                                      5: [ [R1/9] (car) [R2/24] cdr (cdr) ]
[ 5]   0 : CALL_PRIMOP	"cons"
                                      4: [ [R1/9] (car) [R2/24] (cdr cdr) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/9] (car) (cdr cdr) ]
[ 3]  24 : LABEL	"R2"
                                      3: [ [R1/9] (car) (cdr cdr) ]
[ 3]  25 : GLOBAL_GET	helper
                                      4: [ [R1/9] (car) (cdr cdr) [Closure] ]
[ 4]  26 : JMP_CLOSURE	2
                                      3: [ [R1/9] (car) (cdr cdr) ]
[ 3]   0 : MAKE_ENV	2	; (lst result)
                                      1: [ [R1/9] ]
[ 1]   1 : SAVE_RETURN	"R0"	5
                                      2: [ [R1/9] [R0/5] ]
[ 2]   2 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R0/5] (car) ]
[ 3]   3 : GLOBAL_GET	null?
                                      4: [ [R1/9] [R0/5] (car) [Closure/core:null?] ]
[ 4]   4 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R0/5] (car) ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ [R1/9] [R0/5] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] #f ]
[ 2]   5 : LABEL	"R0"
                                      2: [ [R1/9] #f ]
[ 2]   6 : JMP_IF_FALSE	"L4"	9
                                      1: [ [R1/9] ]
[ 1]   9 : LABEL	"L4"
                                      1: [ [R1/9] ]
[ 1]  10 : SAVE_RETURN	"R1"	14
                                      2: [ [R1/9] [R1/14] ]
[ 2]  11 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R1/14] (car) ]
[ 3]  12 : GLOBAL_GET	cdr
                                      4: [ [R1/9] [R1/14] (car) [Closure/core:cdr] ]
[ 4]  13 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R1/14] (car) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ [R1/9] [R1/14] () ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] () ]
[ 2]  14 : LABEL	"R1"
                                      2: [ [R1/9] () ]
[ 2]  15 : SAVE_RETURN	"R2"	24
                                      3: [ [R1/9] () [R2/24] ]
[ 3]  16 : SAVE_RETURN	"R3"	20
                                      4: [ [R1/9] () [R2/24] [R3/20] ]
[ 4]  17 : LOCAL_GET	0	0	; lst
                                      5: [ [R1/9] () [R2/24] [R3/20] (car) ]
[ 5]  18 : GLOBAL_GET	car
                                      6: [ [R1/9] () [R2/24] [R3/20] (car) [Closure/core:car] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ [R1/9] () [R2/24] [R3/20] (car) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [R1/9] () [R2/24] [R3/20] car ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R1/9] () [R2/24] car ]
[ 4]  20 : LABEL	"R3"
                                      4: [ [R1/9] () [R2/24] car ]
[ 4]  21 : LOCAL_GET	0	1	; result
                                      5: [ [R1/9] () [R2/24] car (cdr cdr) ]
[ 5]  22 : GLOBAL_GET	cons
                                      6: [ [R1/9] () [R2/24] car (cdr cdr) [Closure/core:cons] ]
[ 6]  23 : JMP_CLOSURE	2
                                      5: [ [R1/9] () [R2/24] car (cdr cdr) ]
[ 5]   0 : CALL_PRIMOP	"cons"
                                      4: [ [R1/9] () [R2/24] (car cdr cdr) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R1/9] () (car cdr cdr) ]
[ 3]  24 : LABEL	"R2"
                                      3: [ [R1/9] () (car cdr cdr) ]
[ 3]  25 : GLOBAL_GET	helper
                                      4: [ [R1/9] () (car cdr cdr) [Closure] ]
[ 4]  26 : JMP_CLOSURE	2
                                      3: [ [R1/9] () (car cdr cdr) ]
[ 3]   0 : MAKE_ENV	2	; (lst result)
                                      1: [ [R1/9] ]
[ 1]   1 : SAVE_RETURN	"R0"	5
                                      2: [ [R1/9] [R0/5] ]
[ 2]   2 : LOCAL_GET	0	0	; lst
                                      3: [ [R1/9] [R0/5] () ]
[ 3]   3 : GLOBAL_GET	null?
                                      4: [ [R1/9] [R0/5] () [Closure/core:null?] ]
[ 4]   4 : JMP_CLOSURE	1
                                      3: [ [R1/9] [R0/5] () ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ [R1/9] [R0/5] #t ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R1/9] #t ]
[ 2]   5 : LABEL	"R0"
                                      2: [ [R1/9] #t ]
[ 2]   6 : JMP_IF_FALSE	"L4"	9
                                      1: [ [R1/9] ]
[ 1]   7 : LOCAL_GET	0	1	; result
                                      2: [ [R1/9] (car cdr cdr) ]
[ 2]   8 : RETURN_VAL
                                      1: [ (car cdr cdr) ]
[ 1]   9 : LABEL	"R1"
                                      1: [ (car cdr cdr) ]
[ 1]  10 : MAKE_CLOSURE	[Closure]	; ((let ((bodytext (eval (list (quote fold-right) (quote list) (list (quote quote) var) (list (quote quote) args))))) (begin (list (quote lambda) (list var) bodytext))))
                                      2: [ (car cdr cdr) [Closure] ]
[ 2]  11 : JMP_CLOSURE	1
                                      1: [ (car cdr cdr) ]
[ 1]   0 : MAKE_ENV	1	; (args)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R3"	22
                                      1: [ [R3/22] ]
[ 1]   2 : SAVE_RETURN	"R4"	19
                                      2: [ [R3/22] [R4/19] ]
[ 2]   3 : PUSH_CONST	fold-right
                                      3: [ [R3/22] [R4/19] fold-right ]
[ 3]   4 : PUSH_CONST	list
                                      4: [ [R3/22] [R4/19] fold-right list ]
[ 4]   5 : SAVE_RETURN	"R5"	10
                                      5: [ [R3/22] [R4/19] fold-right list [R5/10] ]
[ 5]   6 : PUSH_CONST	quote
                                      6: [ [R3/22] [R4/19] fold-right list [R5/10] quote ]
[ 6]   7 : LOCAL_GET	1	0	; var
                                      7: [ [R3/22] [R4/19] fold-right list [R5/10] quote GENSYM-6 ]
[ 7]   8 : GLOBAL_GET	list
                                      8: [ [R3/22] [R4/19] fold-right list [R5/10] quote GENSYM-6 [Closure/core:list] ]
[ 8]   9 : JMP_CLOSURE	2
                                      7: [ [R3/22] [R4/19] fold-right list [R5/10] quote GENSYM-6 ]
[ 7]   0 : CALL_PRIMOP	"list"
                                      6: [ [R3/22] [R4/19] fold-right list [R5/10] (quote GENSYM-6) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) ]
[ 5]  10 : LABEL	"R5"
                                      5: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) ]
[ 5]  11 : SAVE_RETURN	"R6"	16
                                      6: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) [R6/16] ]
[ 6]  12 : PUSH_CONST	quote
                                      7: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) [R6/16] quote ]
[ 7]  13 : LOCAL_GET	0	0	; args
                                      8: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) [R6/16] quote (car cdr cdr) ]
[ 8]  14 : GLOBAL_GET	list
                                      9: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) [R6/16] quote (car cdr cdr) [Closure/core:list] ]
[ 9]  15 : JMP_CLOSURE	2
                                      8: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) [R6/16] quote (car cdr cdr) ]
[ 8]   0 : CALL_PRIMOP	"list"
                                      7: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) [R6/16] (quote (car cdr cdr)) ]
[ 7]   1 : RETURN_VAL
                                      6: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) (quote (car cdr cdr)) ]
[ 6]  16 : LABEL	"R6"
                                      6: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) (quote (car cdr cdr)) ]
[ 6]  17 : GLOBAL_GET	list
                                      7: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) (quote (car cdr cdr)) [Closure/core:list] ]
[ 7]  18 : JMP_CLOSURE	4
                                      6: [ [R3/22] [R4/19] fold-right list (quote GENSYM-6) (quote (car cdr cdr)) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      3: [ [R3/22] [R4/19] (fold-right list (quote GENSYM-6) (quote (car cdr cdr))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R3/22] (fold-right list (quote GENSYM-6) (quote (car cdr cdr))) ]
[ 2]  19 : LABEL	"R4"
                                      2: [ [R3/22] (fold-right list (quote GENSYM-6) (quote (car cdr cdr))) ]
[ 2]  20 : GLOBAL_GET	eval
                                      3: [ [R3/22] (fold-right list (quote GENSYM-6) (quote (car cdr cdr))) [Closure/core:eval] ]
[ 3]  21 : JMP_CLOSURE	1
                                      2: [ [R3/22] (fold-right list (quote GENSYM-6) (quote (car cdr cdr))) ]
[ 2]   0 : CALL_PRIMOP	"eval"
Executing:  
	CODE BLOCK ; () => ((fold-right list (quote GENSYM-6) (quote (car cdr cdr))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	list
	2	PUSH_CONST	GENSYM-6
	3	PUSH_CONST	(car cdr cdr)
	4	GLOBAL_GET	fold-right
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	list
                                      1: [ [Closure/core:list] ]
[ 1]   2 : PUSH_CONST	GENSYM-6
                                      2: [ [Closure/core:list] GENSYM-6 ]
[ 2]   3 : PUSH_CONST	(car cdr cdr)
                                      3: [ [Closure/core:list] GENSYM-6 (car cdr cdr) ]
[ 3]   4 : GLOBAL_GET	fold-right
                                      4: [ [Closure/core:list] GENSYM-6 (car cdr cdr) [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ [Closure/core:list] GENSYM-6 (car cdr cdr) ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	10
                                      1: [ [R0/10] ]
[ 1]   2 : SAVE_RETURN	"R1"	6
                                      2: [ [R0/10] [R1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [R0/10] [R1/6] (car cdr cdr) ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [R0/10] [R1/6] (car cdr cdr) [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R0/10] [R1/6] (car cdr cdr) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [R0/10] [R1/6] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/10] 3 ]
[ 2]   6 : LABEL	"R1"
                                      2: [ [R0/10] 3 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [R0/10] 3 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [R0/10] 3 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [R0/10] 3 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [R0/10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : LABEL	"R0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L5"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"R2"	19
                                      1: [ [R2/19] ]
[ 1]  16 : LOCAL_GET	0	2	; lst
                                      2: [ [R2/19] (car cdr cdr) ]
[ 2]  17 : GLOBAL_GET	car
                                      3: [ [R2/19] (car cdr cdr) [Closure/core:car] ]
[ 3]  18 : JMP_CLOSURE	1
                                      2: [ [R2/19] (car cdr cdr) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [R2/19] car ]
[ 2]   1 : RETURN_VAL
                                      1: [ car ]
[ 1]  19 : LABEL	"R2"
                                      1: [ car ]
[ 1]  20 : SAVE_RETURN	"R3"	30
                                      2: [ car [R3/30] ]
[ 2]  21 : LOCAL_GET	0	0	; fn
                                      3: [ car [R3/30] [Closure/core:list] ]
[ 3]  22 : LOCAL_GET	0	1	; base
                                      4: [ car [R3/30] [Closure/core:list] GENSYM-6 ]
[ 4]  23 : SAVE_RETURN	"R4"	27
                                      5: [ car [R3/30] [Closure/core:list] GENSYM-6 [R4/27] ]
[ 5]  24 : LOCAL_GET	0	2	; lst
                                      6: [ car [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (car cdr cdr) ]
[ 6]  25 : GLOBAL_GET	cdr
                                      7: [ car [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (car cdr cdr) [Closure/core:cdr] ]
[ 7]  26 : JMP_CLOSURE	1
                                      6: [ car [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (car cdr cdr) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ car [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (cdr cdr) ]
[ 6]   1 : RETURN_VAL
                                      5: [ car [R3/30] [Closure/core:list] GENSYM-6 (cdr cdr) ]
[ 5]  27 : LABEL	"R4"
                                      5: [ car [R3/30] [Closure/core:list] GENSYM-6 (cdr cdr) ]
[ 5]  28 : GLOBAL_GET	fold-right
                                      6: [ car [R3/30] [Closure/core:list] GENSYM-6 (cdr cdr) [Closure] ]
[ 6]  29 : JMP_CLOSURE	3
                                      5: [ car [R3/30] [Closure/core:list] GENSYM-6 (cdr cdr) ]
[ 5]   0 : MAKE_ENV	3	; (fn base lst)
                                      2: [ car [R3/30] ]
[ 2]   1 : SAVE_RETURN	"R0"	10
                                      3: [ car [R3/30] [R0/10] ]
[ 3]   2 : SAVE_RETURN	"R1"	6
                                      4: [ car [R3/30] [R0/10] [R1/6] ]
[ 4]   3 : LOCAL_GET	0	2	; lst
                                      5: [ car [R3/30] [R0/10] [R1/6] (cdr cdr) ]
[ 5]   4 : GLOBAL_GET	length
                                      6: [ car [R3/30] [R0/10] [R1/6] (cdr cdr) [Closure/core:length] ]
[ 6]   5 : JMP_CLOSURE	1
                                      5: [ car [R3/30] [R0/10] [R1/6] (cdr cdr) ]
[ 5]   0 : CALL_PRIMOP	"length"
                                      5: [ car [R3/30] [R0/10] [R1/6] 2 ]
[ 5]   1 : RETURN_VAL
                                      4: [ car [R3/30] [R0/10] 2 ]
[ 4]   6 : LABEL	"R1"
                                      4: [ car [R3/30] [R0/10] 2 ]
[ 4]   7 : PUSH_CONST	0
                                      5: [ car [R3/30] [R0/10] 2 0 ]
[ 5]   8 : GLOBAL_GET	=
                                      6: [ car [R3/30] [R0/10] 2 0 [Closure/core:=] ]
[ 6]   9 : JMP_CLOSURE	2
                                      5: [ car [R3/30] [R0/10] 2 0 ]
[ 5]   0 : CALL_PRIMOP	"="
                                      4: [ car [R3/30] [R0/10] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ car [R3/30] #f ]
[ 3]  10 : LABEL	"R0"
                                      3: [ car [R3/30] #f ]
[ 3]  11 : JMP_IF_FALSE	"L5"	14
                                      2: [ car [R3/30] ]
[ 2]  14 : LABEL	"L5"
                                      2: [ car [R3/30] ]
[ 2]  15 : SAVE_RETURN	"R2"	19
                                      3: [ car [R3/30] [R2/19] ]
[ 3]  16 : LOCAL_GET	0	2	; lst
                                      4: [ car [R3/30] [R2/19] (cdr cdr) ]
[ 4]  17 : GLOBAL_GET	car
                                      5: [ car [R3/30] [R2/19] (cdr cdr) [Closure/core:car] ]
[ 5]  18 : JMP_CLOSURE	1
                                      4: [ car [R3/30] [R2/19] (cdr cdr) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ car [R3/30] [R2/19] cdr ]
[ 4]   1 : RETURN_VAL
                                      3: [ car [R3/30] cdr ]
[ 3]  19 : LABEL	"R2"
                                      3: [ car [R3/30] cdr ]
[ 3]  20 : SAVE_RETURN	"R3"	30
                                      4: [ car [R3/30] cdr [R3/30] ]
[ 4]  21 : LOCAL_GET	0	0	; fn
                                      5: [ car [R3/30] cdr [R3/30] [Closure/core:list] ]
[ 5]  22 : LOCAL_GET	0	1	; base
                                      6: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 ]
[ 6]  23 : SAVE_RETURN	"R4"	27
                                      7: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] ]
[ 7]  24 : LOCAL_GET	0	2	; lst
                                      8: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (cdr cdr) ]
[ 8]  25 : GLOBAL_GET	cdr
                                      9: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (cdr cdr) [Closure/core:cdr] ]
[ 9]  26 : JMP_CLOSURE	1
                                      8: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (cdr cdr) ]
[ 8]   0 : CALL_PRIMOP	"cdr"
                                      8: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (cdr) ]
[ 8]   1 : RETURN_VAL
                                      7: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 (cdr) ]
[ 7]  27 : LABEL	"R4"
                                      7: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 (cdr) ]
[ 7]  28 : GLOBAL_GET	fold-right
                                      8: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 (cdr) [Closure] ]
[ 8]  29 : JMP_CLOSURE	3
                                      7: [ car [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 (cdr) ]
[ 7]   0 : MAKE_ENV	3	; (fn base lst)
                                      4: [ car [R3/30] cdr [R3/30] ]
[ 4]   1 : SAVE_RETURN	"R0"	10
                                      5: [ car [R3/30] cdr [R3/30] [R0/10] ]
[ 5]   2 : SAVE_RETURN	"R1"	6
                                      6: [ car [R3/30] cdr [R3/30] [R0/10] [R1/6] ]
[ 6]   3 : LOCAL_GET	0	2	; lst
                                      7: [ car [R3/30] cdr [R3/30] [R0/10] [R1/6] (cdr) ]
[ 7]   4 : GLOBAL_GET	length
                                      8: [ car [R3/30] cdr [R3/30] [R0/10] [R1/6] (cdr) [Closure/core:length] ]
[ 8]   5 : JMP_CLOSURE	1
                                      7: [ car [R3/30] cdr [R3/30] [R0/10] [R1/6] (cdr) ]
[ 7]   0 : CALL_PRIMOP	"length"
                                      7: [ car [R3/30] cdr [R3/30] [R0/10] [R1/6] 1 ]
[ 7]   1 : RETURN_VAL
                                      6: [ car [R3/30] cdr [R3/30] [R0/10] 1 ]
[ 6]   6 : LABEL	"R1"
                                      6: [ car [R3/30] cdr [R3/30] [R0/10] 1 ]
[ 6]   7 : PUSH_CONST	0
                                      7: [ car [R3/30] cdr [R3/30] [R0/10] 1 0 ]
[ 7]   8 : GLOBAL_GET	=
                                      8: [ car [R3/30] cdr [R3/30] [R0/10] 1 0 [Closure/core:=] ]
[ 8]   9 : JMP_CLOSURE	2
                                      7: [ car [R3/30] cdr [R3/30] [R0/10] 1 0 ]
[ 7]   0 : CALL_PRIMOP	"="
                                      6: [ car [R3/30] cdr [R3/30] [R0/10] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ car [R3/30] cdr [R3/30] #f ]
[ 5]  10 : LABEL	"R0"
                                      5: [ car [R3/30] cdr [R3/30] #f ]
[ 5]  11 : JMP_IF_FALSE	"L5"	14
                                      4: [ car [R3/30] cdr [R3/30] ]
[ 4]  14 : LABEL	"L5"
                                      4: [ car [R3/30] cdr [R3/30] ]
[ 4]  15 : SAVE_RETURN	"R2"	19
                                      5: [ car [R3/30] cdr [R3/30] [R2/19] ]
[ 5]  16 : LOCAL_GET	0	2	; lst
                                      6: [ car [R3/30] cdr [R3/30] [R2/19] (cdr) ]
[ 6]  17 : GLOBAL_GET	car
                                      7: [ car [R3/30] cdr [R3/30] [R2/19] (cdr) [Closure/core:car] ]
[ 7]  18 : JMP_CLOSURE	1
                                      6: [ car [R3/30] cdr [R3/30] [R2/19] (cdr) ]
[ 6]   0 : CALL_PRIMOP	"car"
                                      6: [ car [R3/30] cdr [R3/30] [R2/19] cdr ]
[ 6]   1 : RETURN_VAL
                                      5: [ car [R3/30] cdr [R3/30] cdr ]
[ 5]  19 : LABEL	"R2"
                                      5: [ car [R3/30] cdr [R3/30] cdr ]
[ 5]  20 : SAVE_RETURN	"R3"	30
                                      6: [ car [R3/30] cdr [R3/30] cdr [R3/30] ]
[ 6]  21 : LOCAL_GET	0	0	; fn
                                      7: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] ]
[ 7]  22 : LOCAL_GET	0	1	; base
                                      8: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 ]
[ 8]  23 : SAVE_RETURN	"R4"	27
                                      9: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] ]
[ 9]  24 : LOCAL_GET	0	2	; lst
                                     10: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (cdr) ]
[10]  25 : GLOBAL_GET	cdr
                                     11: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (cdr) [Closure/core:cdr] ]
[11]  26 : JMP_CLOSURE	1
                                     10: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] (cdr) ]
[10]   0 : CALL_PRIMOP	"cdr"
                                     10: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 [R4/27] () ]
[10]   1 : RETURN_VAL
                                      9: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 () ]
[ 9]  27 : LABEL	"R4"
                                      9: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 () ]
[ 9]  28 : GLOBAL_GET	fold-right
                                     10: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 () [Closure] ]
[10]  29 : JMP_CLOSURE	3
                                      9: [ car [R3/30] cdr [R3/30] cdr [R3/30] [Closure/core:list] GENSYM-6 () ]
[ 9]   0 : MAKE_ENV	3	; (fn base lst)
                                      6: [ car [R3/30] cdr [R3/30] cdr [R3/30] ]
[ 6]   1 : SAVE_RETURN	"R0"	10
                                      7: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] ]
[ 7]   2 : SAVE_RETURN	"R1"	6
                                      8: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] [R1/6] ]
[ 8]   3 : LOCAL_GET	0	2	; lst
                                      9: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] [R1/6] () ]
[ 9]   4 : GLOBAL_GET	length
                                     10: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] [R1/6] () [Closure/core:length] ]
[10]   5 : JMP_CLOSURE	1
                                      9: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] [R1/6] () ]
[ 9]   0 : CALL_PRIMOP	"length"
                                      9: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] [R1/6] 0 ]
[ 9]   1 : RETURN_VAL
                                      8: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] 0 ]
[ 8]   6 : LABEL	"R1"
                                      8: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] 0 ]
[ 8]   7 : PUSH_CONST	0
                                      9: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] 0 0 ]
[ 9]   8 : GLOBAL_GET	=
                                     10: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] 0 0 [Closure/core:=] ]
[10]   9 : JMP_CLOSURE	2
                                      9: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] 0 0 ]
[ 9]   0 : CALL_PRIMOP	"="
                                      8: [ car [R3/30] cdr [R3/30] cdr [R3/30] [R0/10] #t ]
[ 8]   1 : RETURN_VAL
                                      7: [ car [R3/30] cdr [R3/30] cdr [R3/30] #t ]
[ 7]  10 : LABEL	"R0"
                                      7: [ car [R3/30] cdr [R3/30] cdr [R3/30] #t ]
[ 7]  11 : JMP_IF_FALSE	"L5"	14
                                      6: [ car [R3/30] cdr [R3/30] cdr [R3/30] ]
[ 6]  12 : LOCAL_GET	0	1	; base
                                      7: [ car [R3/30] cdr [R3/30] cdr [R3/30] GENSYM-6 ]
[ 7]  13 : RETURN_VAL
                                      6: [ car [R3/30] cdr [R3/30] cdr GENSYM-6 ]
[ 6]  30 : LABEL	"R3"
                                      6: [ car [R3/30] cdr [R3/30] cdr GENSYM-6 ]
[ 6]  31 : LOCAL_GET	0	0	; fn
                                      7: [ car [R3/30] cdr [R3/30] cdr GENSYM-6 [Closure/core:list] ]
[ 7]  32 : JMP_CLOSURE	2
                                      6: [ car [R3/30] cdr [R3/30] cdr GENSYM-6 ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      5: [ car [R3/30] cdr [R3/30] (cdr GENSYM-6) ]
[ 5]   1 : RETURN_VAL
                                      4: [ car [R3/30] cdr (cdr GENSYM-6) ]
[ 4]  30 : LABEL	"R3"
                                      4: [ car [R3/30] cdr (cdr GENSYM-6) ]
[ 4]  31 : LOCAL_GET	0	0	; fn
                                      5: [ car [R3/30] cdr (cdr GENSYM-6) [Closure/core:list] ]
[ 5]  32 : JMP_CLOSURE	2
                                      4: [ car [R3/30] cdr (cdr GENSYM-6) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      3: [ car [R3/30] (cdr (cdr GENSYM-6)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ car (cdr (cdr GENSYM-6)) ]
[ 2]  30 : LABEL	"R3"
                                      2: [ car (cdr (cdr GENSYM-6)) ]
[ 2]  31 : LOCAL_GET	0	0	; fn
                                      3: [ car (cdr (cdr GENSYM-6)) [Closure/core:list] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ car (cdr (cdr GENSYM-6)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (car (cdr (cdr GENSYM-6))) ]
[ 1]   1 : RETURN_VAL
                                      2: [ [R3/22] (car (cdr (cdr GENSYM-6))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (car (cdr (cdr GENSYM-6))) ]
[ 1]  22 : LABEL	"R3"
                                      1: [ (car (cdr (cdr GENSYM-6))) ]
[ 1]  23 : MAKE_CLOSURE	[Closure]	; ((begin (list (quote lambda) (list var) bodytext)))
                                      2: [ (car (cdr (cdr GENSYM-6))) [Closure] ]
[ 2]  24 : JMP_CLOSURE	1
                                      1: [ (car (cdr (cdr GENSYM-6))) ]
[ 1]   0 : MAKE_ENV	1	; (bodytext)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	lambda
                                      1: [ lambda ]
[ 1]   2 : SAVE_RETURN	"R7"	6
                                      2: [ lambda [R7/6] ]
[ 2]   3 : LOCAL_GET	2	0	; var
                                      3: [ lambda [R7/6] GENSYM-6 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ lambda [R7/6] GENSYM-6 [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ lambda [R7/6] GENSYM-6 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ lambda [R7/6] (GENSYM-6) ]
[ 3]   1 : RETURN_VAL
                                      2: [ lambda (GENSYM-6) ]
[ 2]   6 : LABEL	"R7"
                                      2: [ lambda (GENSYM-6) ]
[ 2]   7 : LOCAL_GET	0	0	; bodytext
                                      3: [ lambda (GENSYM-6) (car (cdr (cdr GENSYM-6))) ]
[ 3]   8 : GLOBAL_GET	list
                                      4: [ lambda (GENSYM-6) (car (cdr (cdr GENSYM-6))) [Closure/core:list] ]
[ 4]   9 : JMP_CLOSURE	3
                                      3: [ lambda (GENSYM-6) (car (cdr (cdr GENSYM-6))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (lambda (GENSYM-6) (car (cdr (cdr GENSYM-6)))) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; () => ((quote (cdr cdr car)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(cdr cdr car)
	2	RETURN_VAL

	CODE BLOCK ; () => ((fold-right list (quote GENSYM-6) (quote (car cdr cdr))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	list
	2	PUSH_CONST	GENSYM-6
	3	PUSH_CONST	(car cdr cdr)
	4	GLOBAL_GET	fold-right
	5	JMP_CLOSURE	3

	CODE BLOCK ; (GENSYM-6) => ((car (cdr (cdr GENSYM-6))))
	0	MAKE_ENV	1	; (GENSYM-6)
	1	SAVE_RETURN	"R0"	9
	2	SAVE_RETURN	"R1"	6
	3	LOCAL_GET	0	0	; GENSYM-6
	4	GLOBAL_GET	cdr
	5	JMP_CLOSURE	1
6	LABEL	"R1"
	7	GLOBAL_GET	cdr
	8	JMP_CLOSURE	1
9	LABEL	"R0"
	10	GLOBAL_GET	car
	11	JMP_CLOSURE	1

	CODE BLOCK ; () => (((chain cdr cdr car) (quote (1 2 3 4))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4)
	2	MAKE_CLOSURE	[Closure]	; ((car (cdr (cdr GENSYM-6))))
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => (((chain cdr cdr car) (quote (1 2 3 4))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4)
	2	MAKE_CLOSURE	[Closure]	; ((car (cdr (cdr GENSYM-6))))
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4)
                                      1: [ (1 2 3 4) ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((car (cdr (cdr GENSYM-6))))
                                      2: [ (1 2 3 4) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2 3 4) ]
[ 1]   0 : MAKE_ENV	1	; (GENSYM-6)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	9
                                      1: [ [R0/9] ]
[ 1]   2 : SAVE_RETURN	"R1"	6
                                      2: [ [R0/9] [R1/6] ]
[ 2]   3 : LOCAL_GET	0	0	; GENSYM-6
                                      3: [ [R0/9] [R1/6] (1 2 3 4) ]
[ 3]   4 : GLOBAL_GET	cdr
                                      4: [ [R0/9] [R1/6] (1 2 3 4) [Closure/core:cdr] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [R0/9] [R1/6] (1 2 3 4) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ [R0/9] [R1/6] (2 3 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/9] (2 3 4) ]
[ 2]   6 : LABEL	"R1"
                                      2: [ [R0/9] (2 3 4) ]
[ 2]   7 : GLOBAL_GET	cdr
                                      3: [ [R0/9] (2 3 4) [Closure/core:cdr] ]
[ 3]   8 : JMP_CLOSURE	1
                                      2: [ [R0/9] (2 3 4) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [R0/9] (3 4) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (3 4) ]
[ 1]   9 : LABEL	"R0"
                                      1: [ (3 4) ]
[ 1]  10 : GLOBAL_GET	car
                                      2: [ (3 4) [Closure/core:car] ]
[ 2]  11 : JMP_CLOSURE	1
                                      1: [ (3 4) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (vector? (make-vector 3))
ParseNext ==>  (vector? (make-vector 3))
Parsed:  (core:vector? (core:make-vector 3))
Compiled:
	CODE BLOCK ; () => ((vector? (make-vector 3)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	3
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	GLOBAL_GET	vector?
	7	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((vector? (make-vector 3)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	3
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	GLOBAL_GET	vector?
	7	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	3
                                      2: [ [R0/5] 3 ]
[ 2]   3 : GLOBAL_GET	make-vector
                                      3: [ [R0/5] 3 [Closure/core:make-vector] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] 3 ]
[ 2]   0 : CALL_PRIMOP	"make-vector"
                                      2: [ [R0/5] [Vector () () ()] ]
[ 2]   1 : RETURN_VAL
                                      1: [ [Vector () () ()] ]
[ 1]   5 : LABEL	"R0"
                                      1: [ [Vector () () ()] ]
[ 1]   6 : GLOBAL_GET	vector?
                                      2: [ [Vector () () ()] [Closure/core:vector?] ]
[ 2]   7 : JMP_CLOSURE	1
                                      1: [ [Vector () () ()] ]
[ 1]   0 : CALL_PRIMOP	"vector?"
                                      1: [ #t ]
[ 1]   1 : RETURN_VAL
test: got "#t"  - expected "#t"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (vector? 1)
ParseNext ==>  (vector? 1)
Parsed:  (core:vector? 1)
Compiled:
	CODE BLOCK ; () => ((vector? 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	GLOBAL_GET	vector?
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((vector? 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	GLOBAL_GET	vector?
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : GLOBAL_GET	vector?
                                      2: [ 1 [Closure/core:vector?] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : CALL_PRIMOP	"vector?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
test: got "#f"  - expected "#f"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (make-vector 3)
ParseNext ==>  (make-vector 3)
Parsed:  (core:make-vector 3)
Compiled:
	CODE BLOCK ; () => ((make-vector 3))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	3
	2	GLOBAL_GET	make-vector
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((make-vector 3))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	3
	2	GLOBAL_GET	make-vector
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	3
                                      1: [ 3 ]
[ 1]   2 : GLOBAL_GET	make-vector
                                      2: [ 3 [Closure/core:make-vector] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 3 ]
[ 1]   0 : CALL_PRIMOP	"make-vector"
                                      1: [ [Vector () () ()] ]
[ 1]   1 : RETURN_VAL
test: got "[Vector () () ()]"  - expected "[Vector () () ()]"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (make-vector 3 0)
ParseNext ==>  (make-vector 3 0)
Parsed:  (core:make-vector 3 0)
Compiled:
	CODE BLOCK ; () => ((make-vector 3 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	3
	2	PUSH_CONST	0
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((make-vector 3 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	3
	2	PUSH_CONST	0
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	3
                                      1: [ 3 ]
[ 1]   2 : PUSH_CONST	0
                                      2: [ 3 0 ]
[ 2]   3 : GLOBAL_GET	make-vector
                                      3: [ 3 0 [Closure/core:make-vector] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 3 0 ]
[ 2]   0 : CALL_PRIMOP	"make-vector"
                                      1: [ [Vector 0 0 0] ]
[ 1]   1 : RETURN_VAL
test: got "[Vector 0 0 0]"  - expected "[Vector 0 0 0]"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (make-vector '(1 2))
ParseNext ==>  (make-vector (quote (1 2)))
Parsed:  (core:make-vector (quote (1 2)))
Compiled:
	CODE BLOCK ; () => ((make-vector (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	make-vector
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((make-vector (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	make-vector
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : GLOBAL_GET	make-vector
                                      2: [ (1 2) [Closure/core:make-vector] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2) ]
[ 1]   0 : CALL_PRIMOP	"make-vector"
                                      1: [ [Vector 1 2] ]
[ 1]   1 : RETURN_VAL
test: got "[Vector 1 2]"  - expected "[Vector 1 2]"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (vector-length (make-vector '(1 2)))
ParseNext ==>  (vector-length (make-vector (quote (1 2))))
Parsed:  (core:vector-length (core:make-vector (quote (1 2))))
Compiled:
	CODE BLOCK ; () => ((vector-length (make-vector (quote (1 2)))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	(1 2)
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	GLOBAL_GET	vector-length
	7	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((vector-length (make-vector (quote (1 2)))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	(1 2)
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	GLOBAL_GET	vector-length
	7	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	(1 2)
                                      2: [ [R0/5] (1 2) ]
[ 2]   3 : GLOBAL_GET	make-vector
                                      3: [ [R0/5] (1 2) [Closure/core:make-vector] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (1 2) ]
[ 2]   0 : CALL_PRIMOP	"make-vector"
                                      2: [ [R0/5] [Vector 1 2] ]
[ 2]   1 : RETURN_VAL
                                      1: [ [Vector 1 2] ]
[ 1]   5 : LABEL	"R0"
                                      1: [ [Vector 1 2] ]
[ 1]   6 : GLOBAL_GET	vector-length
                                      2: [ [Vector 1 2] [Closure/core:vector-length] ]
[ 2]   7 : JMP_CLOSURE	1
                                      1: [ [Vector 1 2] ]
[ 1]   0 : CALL_PRIMOP	"vector-length"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (vector-get (make-vector '(1 2)) 0)
ParseNext ==>  (vector-get (make-vector (quote (1 2))) 0)
Parsed:  (core:vector-get (core:make-vector (quote (1 2))) 0)
Compiled:
	CODE BLOCK ; () => ((vector-get (make-vector (quote (1 2))) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	(1 2)
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	PUSH_CONST	0
	7	GLOBAL_GET	vector-get
	8	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK ; () => ((vector-get (make-vector (quote (1 2))) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	(1 2)
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	PUSH_CONST	0
	7	GLOBAL_GET	vector-get
	8	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	(1 2)
                                      2: [ [R0/5] (1 2) ]
[ 2]   3 : GLOBAL_GET	make-vector
                                      3: [ [R0/5] (1 2) [Closure/core:make-vector] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (1 2) ]
[ 2]   0 : CALL_PRIMOP	"make-vector"
                                      2: [ [R0/5] [Vector 1 2] ]
[ 2]   1 : RETURN_VAL
                                      1: [ [Vector 1 2] ]
[ 1]   5 : LABEL	"R0"
                                      1: [ [Vector 1 2] ]
[ 1]   6 : PUSH_CONST	0
                                      2: [ [Vector 1 2] 0 ]
[ 2]   7 : GLOBAL_GET	vector-get
                                      3: [ [Vector 1 2] 0 [Closure/core:vector-get] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ [Vector 1 2] 0 ]
[ 2]   0 : CALL_PRIMOP	"vector-get"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((v (make-vector '(1 2)))) (vector-set! v 0 3) v)
ParseNext ==>  (let ((v (make-vector (quote (1 2))))) (vector-set! v 0 3) v)
Parsed:  (core:let ((core:v (core:make-vector (quote (1 2))))) (core:vector-set! core:v 0 3) core:v)
Executing:  
	CODE BLOCK ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"R0"	24
	2	SAVE_RETURN	"R1"	21
	3	SAVE_RETURN	"R2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"R2"
	8	SAVE_RETURN	"R3"	17
	9	SAVE_RETURN	"R4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"R4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"R3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"R1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"R0"
	25	SAVE_RETURN	"R5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"R5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((v (make-vector (quote (1 2))))) (vector-set! v 0 3) v ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	24
                                      1: [ [R0/24] ]
[ 1]   2 : SAVE_RETURN	"R1"	21
                                      2: [ [R0/24] [R1/21] ]
[ 2]   3 : SAVE_RETURN	"R2"	7
                                      3: [ [R0/24] [R1/21] [R2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [R0/24] [R1/21] [R2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [R0/24] [R1/21] [R2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [R0/24] [R1/21] [R2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   7 : LABEL	"R2"
                                      3: [ [R0/24] [R1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"R3"	17
                                      4: [ [R0/24] [R1/21] (lambda) [R3/17] ]
[ 4]   9 : SAVE_RETURN	"R4"	14
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((v (make-vector (quote (1 2))))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((v (make-vector (quote (1 2))))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] [Closure/core:car] ((v (make-vector (quote (1 2))))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (v (make-vector (quote (1 2)))) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ v ]
[ 1]   1 : RETURN_VAL
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] [R4/14] (v) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (v) ]
[ 5]  14 : LABEL	"R4"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (v) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [R0/24] [R1/21] (lambda) [R3/17] (v) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] (v) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [R0/24] [R1/21] (lambda) [R3/17] ((v)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [R0/24] [R1/21] (lambda) ((v)) ]
[ 4]  17 : LABEL	"R3"
                                      4: [ [R0/24] [R1/21] (lambda) ((v)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [R0/24] [R1/21] (lambda) ((v)) ((vector-set! v 0 3) v) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [R0/24] [R1/21] (lambda) ((v)) ((vector-set! v 0 3) v) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [R0/24] [R1/21] (lambda) ((v)) ((vector-set! v 0 3) v) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [R0/24] [R1/21] (lambda (v) (vector-set! v 0 3) v) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [R0/24] (lambda (v) (vector-set! v 0 3) v) ]
[ 2]  21 : LABEL	"R1"
                                      2: [ [R0/24] (lambda (v) (vector-set! v 0 3) v) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [R0/24] (lambda (v) (vector-set! v 0 3) v) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [R0/24] (lambda (v) (vector-set! v 0 3) v) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [R0/24] ((lambda (v) (vector-set! v 0 3) v)) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (v) (vector-set! v 0 3) v)) ]
[ 1]  24 : LABEL	"R0"
                                      1: [ ((lambda (v) (vector-set! v 0 3) v)) ]
[ 1]  25 : SAVE_RETURN	"R5"	30
                                      2: [ ((lambda (v) (vector-set! v 0 3) v)) [R5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (v) (vector-set! v 0 3) v)) [R5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (v) (vector-set! v 0 3) v)) [R5/30] [Closure/core:cadr] ((v (make-vector (quote (1 2))))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (v) (vector-set! v 0 3) v)) [R5/30] [Closure/core:cadr] ((v (make-vector (quote (1 2))))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (v) (vector-set! v 0 3) v)) [R5/30] [Closure/core:cadr] ((v (make-vector (quote (1 2))))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (v (make-vector (quote (1 2)))) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (make-vector (quote (1 2))) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (v) (vector-set! v 0 3) v)) [R5/30] ((make-vector (quote (1 2)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (v) (vector-set! v 0 3) v)) ((make-vector (quote (1 2)))) ]
[ 2]  30 : LABEL	"R5"
                                      2: [ ((lambda (v) (vector-set! v 0 3) v)) ((make-vector (quote (1 2)))) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (v) (vector-set! v 0 3) v)) ((make-vector (quote (1 2)))) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (v) (vector-set! v 0 3) v)) ((make-vector (quote (1 2)))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (v) (vector-set! v 0 3) v) (make-vector (quote (1 2)))) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK ; (v) => ((vector-set! v 0 3) v)
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"R1"	7
	2	LOCAL_GET	0	0	; v
	3	PUSH_CONST	0
	4	PUSH_CONST	3
	5	GLOBAL_GET	vector-set!
	6	JMP_CLOSURE	3
7	LABEL	"R1"
	8	STACK_POP
	9	LOCAL_GET	0	0	; v
	10	RETURN_VAL

	CODE BLOCK ; () => ((let ((v (make-vector (quote (1 2))))) (vector-set! v 0 3) v))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	(1 2)
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	MAKE_CLOSURE	[Closure]	; ((vector-set! v 0 3) v)
	7	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK ; () => ((let ((v (make-vector (quote (1 2))))) (vector-set! v 0 3) v))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"R0"	5
	2	PUSH_CONST	(1 2)
	3	GLOBAL_GET	make-vector
	4	JMP_CLOSURE	1
5	LABEL	"R0"
	6	MAKE_CLOSURE	[Closure]	; ((vector-set! v 0 3) v)
	7	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R0"	5
                                      1: [ [R0/5] ]
[ 1]   2 : PUSH_CONST	(1 2)
                                      2: [ [R0/5] (1 2) ]
[ 2]   3 : GLOBAL_GET	make-vector
                                      3: [ [R0/5] (1 2) [Closure/core:make-vector] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [R0/5] (1 2) ]
[ 2]   0 : CALL_PRIMOP	"make-vector"
                                      2: [ [R0/5] [Vector 1 2] ]
[ 2]   1 : RETURN_VAL
                                      1: [ [Vector 1 2] ]
[ 1]   5 : LABEL	"R0"
                                      1: [ [Vector 1 2] ]
[ 1]   6 : MAKE_CLOSURE	[Closure]	; ((vector-set! v 0 3) v)
                                      2: [ [Vector 1 2] [Closure] ]
[ 2]   7 : JMP_CLOSURE	1
                                      1: [ [Vector 1 2] ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"R1"	7
                                      1: [ [R1/7] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [R1/7] [Vector 1 2] ]
[ 2]   3 : PUSH_CONST	0
                                      3: [ [R1/7] [Vector 1 2] 0 ]
[ 3]   4 : PUSH_CONST	3
                                      4: [ [R1/7] [Vector 1 2] 0 3 ]
[ 4]   5 : GLOBAL_GET	vector-set!
                                      5: [ [R1/7] [Vector 1 2] 0 3 [Closure/core:vector-set!] ]
[ 5]   6 : JMP_CLOSURE	3
                                      4: [ [R1/7] [Vector 1 2] 0 3 ]
[ 4]   0 : CALL_PRIMOP	"vector-set!"
                                      2: [ [R1/7] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   7 : LABEL	"R1"
                                      1: [ 3 ]
[ 1]   8 : STACK_POP
                                      0: [  ]
[ 0]   9 : LOCAL_GET	0	0	; v
                                      1: [ [Vector 3 2] ]
[ 1]  10 : RETURN_VAL
test: got "[Vector 3 2]"  - expected "[Vector 3 2]"
SUCCESS
